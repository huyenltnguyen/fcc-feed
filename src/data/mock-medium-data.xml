<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title>
            <![CDATA[freeCodeCamp - Medium]]>
        </title>
        <description>
            <![CDATA[Our community publishes stories worth reading on development, design, and data science. - Medium]]>
        </description>
        <link>https://medium.freecodecamp.org?source=rss----336d898217ee---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>freeCodeCamp - Medium</title>
            <link>https://medium.freecodecamp.org?source=rss----336d898217ee---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 19 Apr 2018 22:08:01 GMT</lastBuildDate>
        <atom:link href="https://medium.freecodecamp.org/feed" rel="self" type="application/rss+xml" />
        <webMaster>
            <![CDATA[yourfriends@medium.com]]>
        </webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub" />
        <item>
            <title>
                <![CDATA[Python interview question guide: how to code a linked list]]>
            </title>
            <link>https://medium.freecodecamp.org/python-interview-question-guide-how-to-code-a-linked-list-fd77cbbd367d?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/fd77cbbd367d</guid>
            <category>
                <![CDATA[technology]]>
            </category>
            <category>
                <![CDATA[interview]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[python]]>
            </category>
            <dc:creator>
                <![CDATA[Anthony Sistilli]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 21:50:34 GMT</pubDate>
            <atom:updated>2018-04-19T21:50:34.949Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Y2zqUEPWCjkWCWVnxmy3GQ.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/Xe7za0JtTeM?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Mike Alonzo</a> on <a href="https://unsplash.com/search/photos/link?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>I always understood the core concept of Linked Lists, but I never put it into practice.</p><p>It wasn’t until my very first Amazon interview years ago when I realized that I had no idea how the concept of Linked Lists translated into code.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/160/1*wak2I_I5pc27658xM9tzTw.png" /><figcaption>*My face during my first ever Amazon interview*</figcaption></figure><p>And that’s why I’m writing this guide!</p><p>My goal is to help <strong>you</strong> get a job as a Software Engineer.</p><p>I want to cover a lot of Linked Lists interview questions, and this article is the first step in that process. So let’s dive in.</p><h3>What is a Linked List?</h3><p>A Linked List is a data structure that consists of many mini-data structures called ‘Nodes.’ The Nodes link together to form a list.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-uiJaOoQ2sa3px0LXBI8AA.png" /><figcaption>An entire Linked List, made up of 3 Nodes linked together.</figcaption></figure><h4>Each node contains 2 attributes</h4><ol><li>Its value. This can be anything: integers, characters, strings, objects, and so on.</li><li>A pointer to the next node in the sequence.</li></ol><h4>Some definitions</h4><p><strong>The ‘Head Node’:</strong> The head node is simply the first node in the linked list. As we can see from the example above, the node containing ‘5’ is the first node, and therefore the head.</p><p><strong>The ‘Tail Node’: </strong>The tail node is the last node in the sequence. Since it’s the last node, it points to null, because there is no next node in the sequence. In the example above, the node containing ‘3’ would be the tail node.</p><h3>Singly Linked vs Doubly Linked</h3><p>When it comes to Linked Lists, there are two main kinds.</p><p>Those that are ‘singly’ linked, and those that are ‘doubly’ linked.</p><p><strong>Singly linked</strong> means that each node only points to at most 1 other node, the node in front of it. This is exhibited in the example above.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AeA6VRuLuC6bPTSXCvIDtw.png" /><figcaption>An example of a singly linked list.</figcaption></figure><p><strong>Doubly linked</strong> means that each node can point to 2 other nodes, the node in front of it <strong>and the node behind it. </strong>As we can see from the example below, since there is no node preceding the head node (which is 5), one of its pointers points to null.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*XuJpPbTkjM6BTHAUYQQ8Xg.png" /><figcaption>An example of a doubly linked list.</figcaption></figure><h3>Okay, I understand all of that. But how does the code work?</h3><p>Coding Linked Lists can be a <strong>4 line problem or a 400 line problem.</strong> It depends on how you want to approach it.</p><p>On the simplest level, like we discussed, a linked list is just a <strong>bunch of connected nodes.</strong></p><p>Thus, all we really need to create this structure is a node object.</p><pre><strong>class linkedListNode</strong>:<br> <strong>def </strong>__init__(self, value, nextNode=None):<br> self.value = value<br> self.nextNode = nextNode</pre><p>Here we can see we’ve simply created a class that has a value and nextNode attribute.</p><p>To create a node, we simply pass in a value.</p><pre>node1 = linkedListNode(&quot;3&quot;) # &quot;3&quot;<br>node2 = linkedListNode(&quot;7&quot;) # &quot;7&quot;<br>node3 = linkedListNode(&quot;10&quot;) # &quot;10&quot;</pre><p>Here, we’ve created 3 individual nodes.</p><p>The next step is simply to connect them together.</p><pre>node1.nextNode = node2 <br>node2.nextNode = node3 </pre><p>The first line above makes node1 point to node2:</p><p>“3” →“7”</p><p>The second line above makes node2 point to node3:</p><p>“7”→”10&quot;</p><p>All together, we’re left with a Linked List that looks like this:</p><p>“3”→”7&quot;→”10&quot;→Null</p><p><strong>Note: “10” points to null, because there was no nextNode assigned to node3, and the default nextNode is Null.</strong></p><p>Like I mentioned earlier, there are a lot of different ways to do this. This is just the simplest.</p><p>If you are trying to make an entire LinkedList class, <a href="https://www.youtube.com/watch?v=6sBsF13n5ig">this video</a> goes in depth on how to do that.</p><h3>Traversing A Linked List</h3><p>If you’re doing a programming interview, and you get asked a Linked List question, you’re not going to be given all the nodes.</p><p>All you’ll get is the head node.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/542/1*p16zzDp5ozVsOks_e9TqAQ.png" /><figcaption>All that’s being passed in here is the head node.</figcaption></figure><p>From that head node, you have to get the rest of the list.</p><p>First let’s understand how to get the value and nextNode from a node in Python.</p><p>Let’s say we have a node simply named ‘node’.</p><p>Getting the value of the node:</p><pre>node.value</pre><p>Getting the nextNode of the node:</p><pre>node.nextNode</pre><h4><strong>Traversal</strong></h4><p>This first thing we want to do is create a variable called “currentNode” that keeps track of the node we’re at. We want to assign this to our head node at first.</p><pre>currentNode = head</pre><p>Now all we have to do is simply check whether or not our current node is Null. If it’s not, we make our ‘currentNode’ equal to the ‘nextNode’ of the ‘currentNode’.</p><pre>currentNode = node1<br><strong>while </strong>currentNode <strong>is not </strong>None:<br> currentNode = currentNode.nextNode</pre><p>Let’s say we have the following Linked List: “3”→”7&quot;→”10&quot;.</p><p>Our head and first ‘currentNode’ is “3”.</p><p>When we do</p><pre>currentNode = currentNode.nextNode</pre><p>We are reassigning ‘currentNode’ to our current node’s neighbor, which in this case is “7”.</p><p>This continues until the currentNode is pointed to None, in which case the loop stops.</p><p>And that is the basic way to traverse through a Linked List in Python.</p><p><a href="https://github.com/AtotheY/YoutubeTutorials/blob/master/Introductions/linkedListOnlyNodes.py">Link to the code on Github.</a></p><h3>Inserting elements</h3><p>When you insert an element into a linked list, you insert it into the back unless specified otherwise.</p><p>Let’s use the following example:</p><p>“3”→”7&quot;→”10&quot;→Null</p><p>Let’s say we want to insert a “4”.</p><p>We would simply find the tail node, in this case “10”, and set its nextNode to our “4” node.</p><p>“3”→”7&quot;→”10&quot;→“4”→Null</p><pre>node4 = linkedListNode(&quot;4&quot;)<br>node3.nextNode = node4</pre><p>Now let’s say we were in an interview, and all we had was the head node.</p><p>We simply traverse through the LinkedList to find the tail. Once we have the tail, we simply set its nextNode to our new node that we create.</p><pre><strong>def insertNode</strong>(head, valuetoInsert):<br> currentNode = head<br> <strong>while </strong>currentNode <strong>is not </strong>None:<br> <strong>if </strong>currentNode.nextNode <strong>is </strong>None:<br> currentNode.nextNode = linkedListNode(valuetoInsert)<br> <strong>return </strong>head<br> currentNode = currentNode.nextNode</pre><h3>Deleting elements</h3><p>Deleting can get a bit tricky.</p><p>Let’s take the same example.</p><p>“3”→”7&quot;→”10&quot;→Null</p><p>If we wanted to delete the “7”, all we need to do is point the “3” to the “10” so that the “7” is never referenced.</p><p>“3”→”10&quot;→Null</p><p>To do this, we would have to traverse the list while not only keeping track of the currentNode, but also keeping track of the <strong>previousNode.</strong></p><p>We would also have to account for the head node being the node we want to delete.</p><p>In the code below, we simply delete the first instance of the value we want to delete.</p><p>Note that there are many ways to accomplish this, and the solution below might not be the cleanest code you’ll see in your life. However, in the heat of an interview, the interviewer probably won’t expect textbook perfect code.</p><pre><strong>def deleteNode</strong>(head, valueToDelete):<br> currentNode = head<br> previousNode = None<br> <strong>while </strong>currentNode <strong>is not </strong>None:<br> <strong>if </strong>currentNode.value == valueToDelete:<br> <strong>if </strong>previousNode <strong>is </strong>None: <br> newHead = currentNode.nextNode<br> currentNode.nextNode = None<br> <strong>return </strong>newHead # Deleted the head<br> previousNode.nextNode = currentNode.nextNode<br> <strong>return </strong>head<br> previousNode = currentNode<br> currentNode = currentNode.nextNode<br> <strong>return </strong>head # Value to delete was not found.</pre><p>In the code above, once we find the node we want to delete, we set the previous node’s “nextNode” to the deleted node’s “nextNode” to completely cut it out of the list.</p><h3>Big O Time Complexity Analysis</h3><p><strong>**NOTE** These are the time complexities for the node structure above, which is most likely to appear on an interview. In practical cases, you can store attributes in a LinkedList class to lower these complexities.</strong></p><p>‘n’ = the amount of elements inside the Linked List.</p><p><strong>Inserting to the back of the Linked List— </strong>We go through all n elements to find the tail and insert our new node. <strong>O(n)</strong></p><p><strong>Inserting to the front of the Linked List — </strong>We simply create the new node and set its nextNode to the head. No need to traverse the list. <strong>O(1)</strong></p><p><strong>Traversing —</strong> We go through all n elements once. <strong>O(n)</strong></p><p><strong>Deleting — </strong>Worst case scenario, the node we’re deleting is the last node, causing us to traverse through the entire list. <strong>O(n)</strong></p><h3>You can now tackle Linked List interview questions!</h3><p>You now have the fundamental knowledge you need to start tackling Linked List interview questions!</p><p>They can start off easy, and get tough really quick.</p><p>In the next article, I’m going to go over a couple of common questions and techniques you can use to solve them.</p><p><strong>If you’re a student looking to land your dream internship or full-time job within the next 2 years, start practicing now!</strong></p><p>I’ve started a community (www.theforge.ca) where we connect students with mentors and industry experts that help them navigate their way to their dream job.</p><p>Thanks for reading, and good luck!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fd77cbbd367d" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/python-interview-question-guide-how-to-code-a-linked-list-fd77cbbd367d">Python interview question guide: how to code a linked list</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[How to install cpanel/whm on a Digital Ocean VPS]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-install-cpanel-whm-on-a-digital-ocean-vps-8146eb83f70a?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/8146eb83f70a</guid>
            <category>
                <![CDATA[tutorial]]>
            </category>
            <category>
                <![CDATA[deployment]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <category>
                <![CDATA[technology]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <dc:creator>
                <![CDATA[Michael Umanah]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 21:28:02 GMT</pubDate>
            <atom:updated>2018-04-19T21:28:02.749Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*11DoUz1iZt4Fs6R_5SB_NA.jpeg" /><figcaption>photo credits: pexels.com</figcaption></figure><h4><strong>Introduction</strong></h4><p>In this article, I will be taking us through a step by step process of installing a cpanel/whm on a digital ocean VPS. Note that these steps can be used to install a cpanel/whm on any VPS, but for this post, I will be using a Digital Ocean VPS.</p><p>Choosing a reliable hosting platform to use in hosting your projects can be a daunting task. I actually spent a good amount of time going through reviews and features before I finally agreed to go with Digital Ocean.</p><h4>Why Digital Ocean</h4><ul><li>They have one of the best prices for their VPS — it’s as low as $5 per month.</li><li>Nice admin UI</li><li>Very responsive support</li><li>High performing servers.</li></ul><h4>Why are we installing cpanel/whm</h4><p>Cpanel is a web-based server control panel that makes site management a piece of cake. It includes lots of features such as creating mails, server security, domain management, database, and so on, that simplify the work of a DevOps. You can see a demo of how it works by following this <a href="https://cpanel.com/demo/">link</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eBDjqoD5059kVjkHgdUYcA.png" /><figcaption>cpanel dashboard</figcaption></figure><h4>Setting up an account with Digital Ocean</h4><p>First of all, you need to open an account with Digital Ocean. Signing up with this link, <a href="https://bit.ly/2JvuZ2V">https://bit.ly/2JvuZ2V</a>, will get a $10 credit deposited in your account for you to use, and it will also give me some referral credit. It’s really not much, but it’s better than nothing.</p><p>If you’re a student or know someone who is, sign up to Github’s Student Pack, and you’ll get $50 extra to use on your Digital Ocean account.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dd-pZ42nr5Vl_ywaZZJADg.png" /><figcaption>digital ocean signup form</figcaption></figure><h4>Creating a droplet</h4><p>Once you are logged into your dashboard, go to the top right corner and click on the create button on the drop down, then select droplets.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*S9mdJL5hbsukZw-pEwcJiQ.png" /><figcaption>digital ocean dashboard</figcaption></figure><p>Droplet is the name given to Digital Ocean servers, which you will use in installing and setting up the cpanel.</p><p>It will then take you to a screen for you to choose an image. Click on centOS. We choose that because WHM/cPanel runs on a CentOS server.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fWG1zauf2GBvZR8RxatEYQ.png" /></figure><p>Scrolling down, you can choose the size of the droplet that you want. You can choose any configuration that you are okay with, but bear in mind that the minimum configuration for installing a cpanel as stated on the cpanel website is 1gb ram and 20gb disk space.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*XY10ZRh1VLUTKVde0NaVdA.png" /></figure><p>You can also choose a block storage for your data back up.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TvjETZATsJEnlNftCUFSsg.png" /></figure><p>Scrolling down, you will be asked to choose a datacenter Region. If you’re targeting a specific country with most of your websites, it’s helpful to have a local server close to where most of your users will be accessing your websites.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*amUyEma6Bux6UOm2veG0gA.png" /></figure><p>Further down, you can select additional options. Here I typically go with Private Networking, IPv6, and Monitoring.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sXWbToI6tyyqkXc6VET2Bg.png" /></figure><p>Make sure your hostname is HOSTNAME.YOURDOMAIN.COM</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DmmKln3SBAqPO9sV0qE_tQ.png" /></figure><p>Once you finalize, Digital Ocean will start creating your droplet and email you the SSH keys, giving you root access to your server.</p><h4>Installing Cpanel on your droplet.</h4><p>Once you get the email, it means your server is now ready and you can start installing the cpanel/whm on it. You need to take note of the following things in the mail:</p><ul><li>Droplet Name</li><li>Droplet IP Address</li><li>Droplet Username (which is going to be root)</li><li>Droplet Password (which you will be asked to changed on first login)</li></ul><p>We need to be able access our server remotely to run a few commands on it.</p><p>For Mac users, you can do this easily by using the terminal. Open up the terminal on your Mac, and type the following command.</p><pre>ssh root@162.345.323.09</pre><p>The number above should be the droplet IP address that was sent to your email.</p><p>It will then prompt you for the password which you can copy and paste, and then click enter.</p><p>Note that when typing or pasting the password, the field won’t show — so just click on enter after pasting it.</p><p>For Windows users, I recommend using PuTTY (which you can download <a href="https://www.putty.org/">here</a>). It’s a free software which you can use to gain shell access to a server.</p><p>After installing PuTTY and opening it, this is what you will see.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/550/1*XlKghq_ZPc4HoDlJfoievw.png" /></figure><p>All you have to add here is your Host Name (or Droplet IP address) and click Open.</p><p>You’re going to log in as “root,” and then copy and paste the password you took note of earlier on.</p><p>Note: To copy and paste on Windows, simply right-click on your mouse and press enter. PuTTY doesn’t show your password for security reasons, but it’s there.</p><p>By default, Digital Ocean is going to ask you to reset your password. Simply enter your current password, then your desired password, and press enter.</p><h4>Installing cPanel</h4><p>Installing cpanel is quite easy, we will just be running few commands on our server. We begin by preparing our server for cpanel installation by running the following command to install perl.</p><pre>sudo yum install perl</pre><p>After installing perl, we need to take one more preliminary step. cPanel is very picky about making sure that server that it is installed on has a Fully Qualified Domain Name. To that effect, we need to provide it with a valid hostname. You can input a temporary one and then correct it once cPanel is installed.</p><pre>hostname host.example.com</pre><p><strong>Note: the last command should be your own hostname.</strong></p><p>We are now done with the pre-installation, and so we will start the actual cpanel installation. We start by installing screen and wget.</p><pre>sudo yum install screen wget</pre><p>Once screen and wget are installed, we can start a new screen session by typing this.</p><pre>screen</pre><p>After opening screen, we can then start installing cpanel using this command.</p><pre>wget -N http://httpupdate.cPanel.net/latest</pre><p>Once this is done, we can start the script by typing the command.</p><pre>sh latest</pre><p>The script might take 1 -3 hours to execute, so you just have to be patient until it’s done.</p><h4>Setting Up your new cpanel account.</h4><p>Wow, we finally have cpanel installed on the server. The next thing is to configure the basic settings on it.</p><h4>Accessing your server</h4><p>To access your server, go to <a href="https://YOURDROPLETIP:2087,">https://YOUR DROPLET IP:2087</a> on your browser and enter your username and root password.</p><pre>eg: https://162.345.323.09:2087</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I3E_5rV2N7pkFHQLrs5msg.png" /></figure><p>Once you are logged in, we need to now add the basic features to WHM and agree to their license terms.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*OXFVCylXl_x19RkAWabOCA.png" /></figure><p>Next, enter your contact email, and move on to the next step. You don’t have to change the other settings.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*IP6r9CXJ6pJ23-hRThfRdA.png" /></figure><p>Skip the next step.</p><p>Make sure your Nameserver Configuration is set to BIND, and scroll down to select your nameservers.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*S3cJQ-e3hv7yp6gOkLN4GA.png" /></figure><p>Leave your FTP Server settings to be set to Pure-FTPD — this is the default setting on all cPanel systems. Once you’re done, move to the next step.</p><p>Select Use filesystem quotas and click Finish.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*QAKne69zswIFL0EFy96ArQ.png" /></figure><p>And you’re done! WHM is now installed. Ready for you to start creating accounts and adding your domains.</p><h4>Cpanel/whm license</h4><p>To use cpanel/whm on your server, you will need to pay for a license. But since you are installing the cpanel on a new server with a new IP address, you will have a free trial for 15 days. After that, you will have to add a license or else you will be locked out of the whm.</p><p>Purchasing a VPS whm/cpanel license from cpanel will cost you $20 per month. But if you need to save some bucks, you can follow <a href="https://www.buycpanel.com/">this link</a> to buy the same license for just 15 dollars per month from “buy cpanel,” which is an authorized reseller for cpanel.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4YZUs_dNLwU9LUjsI1VGsg.png" /><figcaption>buycpanel home page</figcaption></figure><p>After clicking on the link, remember to select the whm/cpanel VPS license, and then you can add any addon that you like. Then proceed to making your payment.</p><p>It’s really that easy. If you encounter any issue or suggestions while installing it, you can just add a comment and I will surely get back to you.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8146eb83f70a" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-install-cpanel-whm-on-a-digital-ocean-vps-8146eb83f70a">How to install cpanel/whm on a Digital Ocean VPS</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[A quick guide to deploying your Python webapp on Google App Engine]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-deploy-your-first-python-webapp-on-google-app-engine-2d487b52796a?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/2d487b52796a</guid>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[python]]>
            </category>
            <category>
                <![CDATA[google]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <category>
                <![CDATA[cloud-computing]]>
            </category>
            <dc:creator>
                <![CDATA[Karan Asher]]>
            </dc:creator>
            <pubDate>Mon, 16 Apr 2018 00:12:46 GMT</pubDate>
            <atom:updated>2018-04-19T20:36:41.341Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*BD_VuHYR7AmZpNo0Jsz6MA.png" /><figcaption>Image credit. <a href="https://www.python.org/">https://www.python.org/,</a> <a href="https://medium.com/@javidgon/google-cloud-storage-pros-cons-and-how-to-use-it-with-javascript-ea9ce60a94c0">https://medium.com/@javidgon/google-cloud-storage-pros-cons-and-how-to-use-it-with-javascript-ea9ce60a94c0</a></figcaption></figure><p>The growth in the number of web-based applications and frameworks in the recent times is astounding. As companies such as Google, Amazon, and Microsoft provide more and more easy-to-use tools to build and deploy applications, it makes more sense to use the services and tools provided by them instead of building things in-house and hosting it on-premise.</p><p>Google App Engine is a great way to get started with learning web development. It provides a bunch of useful features such as sharding, automatic database replication, automatic scaling, memcache, and so on.</p><p>However, the process to sign-up and deploy your first test hello world app is not very intuitive.</p><p>In this, post, you will learn a very straightforward and easy to understand method to <strong>deploy your first Python webapp on Google App Engine. So let’s get started.</strong></p><h3>Step 1. Download the basic housekeeping stuff</h3><p>No matter what platform you build products on, there is always some housekeeping stuff you need to put in place before you can hit the ground running. And deploying apps within the Google App Engine is no exception.</p><ol><li>Download <a href="https://www.python.org/download/releases/2.7/">Python 2.7</a><br>As of when this article was written, the Google App Engine <a href="https://cloud.google.com/appengine/docs/standard/python/">standard environment supports Python only upto version 2.7</a>. However, it is only a matter of time before support for Python 3.x is added. You can check the App Engine docs for the latest info.</li><li>Download <a href="https://cloud.google.com/appengine/docs/standard/python/download">Google Cloud SDK</a><br>This will allow you to fork apps onto your local machine, make changes (edit and develop the app), and deploy your app back to the cloud.</li><li>Set the Python path in the Google App Engine launcher<br>After downloading the SDK, launch the App Engine launcher, go to Edit -&gt; Preferences and make sure you set the path for where you installed Python in step 1 above.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1007/1*9yZA4qZ33Cv21_SMBUgnJQ.png" /><figcaption>Set the Python path in Google App Engine launcher</figcaption></figure><p>That’s all you need. Your local machine should now be ready to build webapps.</p><h3>Step 2. App Engine sign-up</h3><p>This is often the most confusing part of the entire setup. Things you should know when you sign-up:</p><ol><li>Currently, App Engine offers a free trial for one year.</li><li>The trial includes $300 of credit that can be used during the one year trial period.</li><li>You will need to add a credit card to sign-up (for verification purposes).</li><li>You will not be charged during the sign-up process.</li><li>You will not be charged during the trial period as long as you do not cross the credit limit offered.</li></ol><p>Here are the steps you need to follow to sign-up:</p><ol><li>Go to the <a href="https://cloud.google.com/">Google Cloud</a> landing page</li><li>Follow the sign-up process and go to your App Engine dashboard</li></ol><p>Most of the hard work is complete after a successful sign-up.</p><h3>Step 3. Create a new project</h3><p>The next step is to create a new Python project that you can work on. Follow the screenshots below to create a new project.</p><p>Launch the new project wizard.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/867/1*rSTOv7ZWWkAxtu-g2g4KpQ.png" /><figcaption>Image courtesy. <a href="https://console.cloud.google.com/home">https://console.cloud.google.com/home</a></figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8O3Ri2zMaZzWmeDgj9dgpA.png" /><figcaption>Image courtesy <a href="https://console.cloud.google.com/home">https://console.cloud.google.com/home</a></figcaption></figure><p>Give your app a name and make a note of your project ID.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/587/1*dYbGfnBqXwURctjtrX0I9Q.png" /><figcaption>Image courtesy. <a href="https://console.cloud.google.com/home">https://console.cloud.google.com/home</a></figcaption></figure><p>Hit the create button and Google should take a few minutes to set up all that is necessary for your newly created app.</p><h3>Step 4. Fork the app to develop it locally</h3><p>The next step in the process is to fork the app on your local machine. This will allow you to make changes to the app locally and deploy it whenever you wish to.</p><p>Go to Google App Engine launcher and create a new application.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/622/1*uff-3MNuaet1H5T_42FgvQ.png" /></figure><p>Enter the project ID of your newly created app. Also, provide the folder (local destination) where you wish to store the app locally. Make sure you select the Python 2.7 as your runtime engine.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/791/1*r2BQcalOos81Z8mXVy3aBg.png" /></figure><p>Hit the create button, and you should see your app listed on the window that follows. You should also check that you now see some files in your local storage (the directory you chose in the screenshot above) after this step.</p><h3>Step 5. Run the app locally</h3><p>Before you go ahead and make some changes to the app, it is important to check whether or not you have executed all the above steps correctly. This can be done by simply running the app locally.</p><p>Select the app and hit the run button on the window.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1016/1*Y7qxLNhn7wdr5TqTy1CZKQ.png" /></figure><p>Wait for a few seconds until you can hit the <strong>Browse</strong> button. Once the <strong>Browse </strong>button becomes clickable, click it. This should take you to the browser, and you should see the hello world text appear in your browser window. Alternatively, you can manually go to the browser and use the port specified to access the app.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/519/1*40w2_9Q6f70uNPTf3NFNUw.png" /></figure><p>As long as you see the above screen, you are all set.</p><h3>Step 6. Understand the app structure</h3><p>It is finally time to look at the lines of code which are running this webapp. Open your app folder in the text editor of your choice. I recommend <a href="https://www.sublimetext.com/">Sublime text</a> or <a href="https://code.visualstudio.com">VS Code</a>. However, feel free to choose the one you prefer.</p><p>Here is a description of the various files.</p><p><strong>app.yaml</strong></p><p>This file is a basic markup file that stores information (some metadata) about the app. It is important to note the following crucial parts of the file.</p><ol><li><strong>application</strong><br>This is the project ID which you should never change. This is the unique identifier for the app</li><li><strong>url -&gt; script</strong><br>This is the homepage for the app. In other words, this file will be rendered in your browser when you launch the app</li><li><strong>libraries<br></strong>This is where you can include external libraries to use within the webapp</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/923/1*PvsZdf3Ovfikf0bJN6BfOQ.png" /><figcaption>app.yaml file in the webapp folder</figcaption></figure><p><strong>main.py</strong></p><p>This is the homepage of the app (as discussed above). Note that the hello world text in the browser window (step 5) is due to the code you see highlighted below.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aXofHUmwJZ8OT_OriZOL_Q.png" /><figcaption>main.py file in the webapp folder</figcaption></figure><h3>Step 7. Make your changes and deploy the new app</h3><p>No hello world app is ever complete without the developer changing the hello world text to something else just to make sure that everything happening behind the scenes is working as it should.</p><p>Go ahead and change the text in the above screenshot to something else.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/598/1*I59ULsaOtVP-O3vkB39pbQ.png" /><figcaption>main.py file in the webapp folder</figcaption></figure><p>Save the changes, go to the browser and refresh the page. You should see the page with the text “MEOW” displayed.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/547/1*BrIPW6Jxc9temhudnsyHJA.png" /></figure><p>Finally, it is time to deploy your changes to the cloud to make them globally accessible via a URL. Go to the App Engine launcher, select the app, and hit the <strong>Deploy</strong> button.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/899/1*I10VjXlrViNGRuhN-2vBqw.png" /></figure><p>This will ensure your app gets deployed onto Google Cloud. To check whether or not everything worked just fine, go to the URL below:</p><p><strong>https://&lt;yourProjectID&gt;.appspot.com/</strong></p><p>You should see the exact same window as above, expect now, it is a URL that is globally accessible.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/774/1*cYcD50vTJtPWBx4cT4bNxw.png" /></figure><h3>Step 8. Misc</h3><p>Congratulations, you’ve finally gotten your first Python webapp deployed on the Google App Engine. Here are some other points which you may find useful.</p><ol><li><a href="http://jinja.pocoo.org/docs/2.10/">Jinja 2</a> is an amazing front end templating library for Python that can do some cool stuff, such as passing objects form Python to HTML, using for loops, if conditions, and so on directly out of the box</li><li><a href="https://classroom.udacity.com/courses/cs253">Here’s</a> a very useful Udacity course on web development that I have personally found quite resourceful</li><li>Viewing the logs while running your webapp can be handy to debug and also discover some bugs on the fly</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DnRmy7tB7eJfV9rNESJUPw.png" /><figcaption>Log console of the webapp</figcaption></figure><p><em>#UntilNextTime</em>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2d487b52796a" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-deploy-your-first-python-webapp-on-google-app-engine-2d487b52796a">A quick guide to deploying your Python webapp on Google App Engine</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[How to protect your routes with React Context]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/717670c4713a</guid>
            <category>
                <![CDATA[tech]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[front-end-development]]>
            </category>
            <category>
                <![CDATA[react]]>
            </category>
            <category>
                <![CDATA[javascript]]>
            </category>
            <dc:creator>
                <![CDATA[paul christophe]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 20:22:09 GMT</pubDate>
            <atom:updated>2018-04-19T20:22:09.918Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wmwNRYeBumNlEKriJxLHjg.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/PpwqEpJ9UaQ?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Antonina Bukowska</a> on <a href="https://unsplash.com/search/photos/lock?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>Among the changes in <a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html">React 16.3</a> is a new stable version of the <strong>Context API</strong>. We’re going to take a look at how it works by building a <strong>protected route component</strong>.</p><h4>What is Context?</h4><p>Context is about encapsulating state. It allows us to pass data from a parent provider component to any subscribed component down the tree. Without state management we often have to “drill” props through every component along the way.</p><h4>Isn’t that what Redux is for?</h4><p><strong>Yes</strong>, Context operates similarly to how components can connect to Redux’s global state. However, a native element like Context will often be a better solution for small to medium apps that don’t need the complex overhead of Redux.</p><h4>Basic Concepts</h4><p>There are three elements to Context:</p><ul><li>createContext — Calling this returns a pair of components, Provider and Consumer.</li><li>Provider — a Component that allows for one or more Consumers to subscribe to changes.</li><li>Consumer —a Component subscribed to a Provider</li></ul><h3>Let’s Start Building</h3><p>We’re going to build an app with <strong>two</strong> routes. One is <strong>a landing page</strong> with global access. The other is <strong>a dashboard page</strong> with restricted access for logged in users. You can find the <a href="https://codesandbox.io/s/vy3o1nk21l">final version here</a>.</p><blockquote><em>Try it out: go to /dashboard while logged out. Log in and navigate freely between routes. From the dashboard, log out and it’ll kick you out to the landing page.</em></blockquote><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fvy3o1nk21l%3Fview%3Dpreview&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fvy3o1nk21l%3Fview%3Dpreview&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fvy3o1nk21l%2Fscreenshot.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codesandbox" width="1000" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/d8ca38d13aee0fe5f72429f954158fe9/href">https://medium.com/media/d8ca38d13aee0fe5f72429f954158fe9/href</a></iframe><h4>Context Header</h4><p>To demonstrate Context’s basic functionality, let’s start by building a header component that lets us log in and out. First, create our context in a new file.</p><pre>/* AuthContext.js */</pre><pre><strong>import React from &#39;react&#39;;</strong></pre><pre><strong>const AuthContext = React.createContext();</strong></pre><p>Export a component AuthProvider to define our state (whether the user is logged in) and pass its state to the value prop on the Provider. We’ll simply expose AuthConsumer with a meaningful name.</p><pre>/* AuthContext.js */</pre><pre>...</pre><pre><strong>class AuthProvider extends React.Component {<br> state = { isAuth: false }</strong></pre><pre><strong> render() {<br> return (<br> &lt;AuthContext.Provider<br> value={{ isAuth: this.state.isAuth }}<br> &gt;<br> {this.props.children}<br> &lt;/AuthContext.Provider&gt;<br> )<br> }<br>}</strong></pre><pre><strong>const AuthConsumer = AuthContext.Consumer</strong></pre><pre><strong>export { AuthProvider, AuthConsumer }</strong></pre><p>In index.js, wrap our app in AuthProvider.</p><pre>/* index.js */<br>import React from &#39;react&#39;;<br>import { render } from &#39;react-dom&#39;;<br>import { AuthProvider } from &#39;./AuthContext&#39;;<br>import Header from &#39;./Header&#39;;</pre><pre>const App = () =&gt; (<br> &lt;div&gt;<br><strong> &lt;AuthProvider&gt;<br></strong> &lt;Header /&gt;<br><strong> &lt;/AuthProvider&gt;<br></strong> &lt;/div&gt;<br>);</pre><pre>render(&lt;App /&gt;, document.getElementById(&#39;root&#39;));</pre><p>Now create our Header and import our AuthConsumer (I’m leaving styling out for clarity).</p><pre>/* Header.js */<br><strong>import React from &#39;react&#39;<br>import { AuthConsumer } from &#39;./AuthContext&#39;<br>import { Link } from &#39;react-router-dom&#39;</strong></pre><pre><strong>export default () =&gt; (<br> &lt;header&gt;<br> &lt;AuthConsumer&gt;<br><br> &lt;/AuthConsumer&gt;<br> &lt;/header&gt;<br>)</strong></pre><p>Context Consumers must have a <strong>function as their direct child.</strong> This will be passed the value from our Provider.</p><pre>/* Header.js */<br>...<br>export default () =&gt; (<br> &lt;header&gt;<br> &lt;AuthConsumer&gt;</pre><pre><strong> {({ isAuth }) =&gt; (<br> &lt;div&gt;<br> &lt;h3&gt;<br> &lt;Link to=&quot;/&quot;&gt;<br> HOME<br> &lt;/Link&gt;<br> &lt;/h3&gt;</strong></pre><pre><strong> {isAuth ? (<br> &lt;ul&gt;<br> &lt;Link to=&quot;/dashboard&quot;&gt;<br> Dashboard<br> &lt;/Link&gt;<br> &lt;button&gt;<br> logout<br> &lt;/button&gt;<br> &lt;/ul&gt;<br> ) : (<br> &lt;button&gt;login&lt;/button&gt;<br> )}<br> &lt;/div&gt;<br> )}</strong></pre><pre> &lt;/AuthConsumer&gt;<br> &lt;/header&gt;<br>)</pre><p>Because isAuth is set to false, only the login button will be visible. Try changing the value to true (it’ll switch to the logout button).</p><p>Ok, let’s try switching isAuth in code. We’ll pass a login and logout function from our Provider.</p><pre>/* AuthContext.js */<br>...<br>class AuthProvider extends React.Component {<br> state = { isAuth: false }</pre><pre><strong> constructor() {<br> super()<br> this.login = this.login.bind(this)<br> this.logout = this.logout.bind(this)<br> }</strong></pre><pre><strong> login() {<br></strong><em> // setting timeout to mimic an async login<br></em><strong> setTimeout(() =&gt; this.setState({ isAuth: true }), 1000)<br> }</strong></pre><pre><strong> logout() {<br> this.setState({ isAuth: false })<br> }</strong></pre><pre> render() {<br> return (<br> &lt;AuthContext.Provider<br> value={{<br> isAuth: this.state.isAuth,<br><strong> login: this.login,<br> logout: this.logout</strong><br> }}<br> &gt;<br> {this.props.children}<br> &lt;/AuthContext.Provider&gt;<br> )<br> }<br>}</pre><p>These functions will allow us to toggle our auth state in Header.</p><pre>/* Header.js */<br>...<br>export default () =&gt; (<br> &lt;header&gt;<br> &lt;AuthConsumer&gt;<br> {({ isAuth, <strong>login, logout</strong> }) =&gt; (<br> &lt;div&gt;<br> &lt;h3&gt;<br> &lt;Link to=&quot;/&quot;&gt;<br> HOME<br> &lt;/Link&gt;<br> &lt;/h3&gt;</pre><pre> {isAuth ? (<br> &lt;ul&gt;<br> &lt;Link to=&quot;/dashboard&quot;&gt;<br> Dashboard<br> &lt;/Link&gt;<br> &lt;button <strong>onClick={logout}</strong>&gt;<br> logout<br> &lt;/button&gt;<br> &lt;/ul&gt;<br> ) : (<br> &lt;button <strong>onClick={login}</strong>&gt;login&lt;/button&gt;<br> )}<br> &lt;/div&gt;<br> )}<br> &lt;/AuthConsumer&gt;<br> &lt;/header&gt;<br>)</pre><h3>Protected Route With Context</h3><p>Now that we have covered the basics, let’s extend what we’ve learned to create a protected route component.</p><p>First make Landing and Dashboard page components. Our dashboard will only be visible when the user is logged in. Both pages will be as simple, as below:</p><pre>/* Dashboard.js */<br><strong>import React from &#39;react&#39;</strong></pre><pre><strong>const Dashboard = () =&gt; &lt;h2&gt;User Dashboard&lt;/h2&gt;</strong></pre><pre><strong>export default Dashboard</strong></pre><p>Now let’s route to these pages.</p><pre>/* index.js */<br>import React from &#39;react&#39;;<br>import { render } from &#39;react-dom&#39;;<br><strong>import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;</strong><br>import { AuthProvider } from &#39;./AuthContext&#39;;<br><strong>import Landing from &#39;./Landing&#39;;<br>import Dashboard from &#39;./Dashboard&#39;;</strong><br>import Header from &#39;./Header&#39;;</pre><pre>const App = () =&gt; (<br> &lt;div&gt;<br><strong> &lt;Router&gt;</strong><br> &lt;AuthProvider&gt;<br> &lt;Header /&gt;<br><strong> &lt;Switch&gt;<br> &lt;Route path=&quot;/dashboard&quot; component={Dashboard} /&gt;<br> &lt;Route path=&quot;/&quot; component={Landing} /&gt;<br> &lt;/Switch&gt;</strong><br> &lt;/AuthProvider&gt;<br><strong> &lt;/Router&gt;<br></strong> &lt;/div&gt;<br>);</pre><pre>render(&lt;App /&gt;, document.getElementById(&#39;root&#39;));</pre><p>In this current state you can navigate to both / and /dashboard. We’ll make a special route component that checks if a user is logged in called ProtectedRoute. The set up is similar to our Header component.</p><pre>/* ProtectedRoute.js */<br><strong>import React from &#39;react&#39;;<br>import { Route, Redirect } from &#39;react-router-dom&#39;;<br>import { AuthConsumer } from &#39;./AuthContext&#39;;</strong></pre><pre><strong>const ProtectedRoute = () =&gt; (<br> &lt;AuthConsumer&gt;<br> {({ isAuth }) =&gt; (</strong></pre><pre><strong> )}<br> &lt;/AuthConsumer&gt;<br>);</strong></pre><pre><strong>export default ProtectedRoute;</strong></pre><p>The private route will function just like a regular react-router route, so we’ll expose the component and any other props passed to it.</p><pre>const ProtectedRoute = (<strong>{ component: Component, ...rest }</strong>) =&gt; (</pre><p>Now the interesting part: we’ll use the isAuth variable to determine if it should redirect or render the protected route’s component.</p><pre>const ProtectedRoute = ({ component: Component, ...rest }) =&gt; (<br> &lt;AuthConsumer&gt;<br> {({ isAuth }) =&gt; (<br><strong> &lt;Route<br> render={<br> props =&gt;<br> isAuth <br> ? &lt;Component {...props} /&gt; <br> : &lt;Redirect to=&quot;/&quot; /&gt;<br> }<br> {...rest}<br> /&gt;</strong><br> )}<br> &lt;/AuthConsumer&gt;<br>)</pre><p>In our index file let’s import ProtectedRoute and use it on our dashboard route.</p><pre>/* index.js */<br>...</pre><pre><strong> &lt;ProtectedRoute path=&quot;/dashboard&quot; component={Dashboard} /&gt;</strong></pre><p>Awesome, now we have protected routes! Try pointing the browser to /dashboard and watch it kick you back to the landing page.</p><p>Again, here’s the link for the <a href="https://codesandbox.io/s/vy3o1nk21l">working demo</a>. Read more about Context from <a href="https://reactjs.org/docs/context.html">React’s Official Docs</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=717670c4713a" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a">How to protect your routes with React Context</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[How to get started with Databricks]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-get-started-with-databricks-bc8da4ffbccb?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/bc8da4ffbccb</guid>
            <category>
                <![CDATA[python]]>
            </category>
            <category>
                <![CDATA[data-science]]>
            </category>
            <category>
                <![CDATA[machine-learning]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <category>
                <![CDATA[coding]]>
            </category>
            <dc:creator>
                <![CDATA[Shubhi Asthana]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 19:53:22 GMT</pubDate>
            <atom:updated>2018-04-19T19:53:22.061Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*OPxh3toNDYSWa85w1TBXjw.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/tbqRvplP_20?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Aman Bhargava</a> on <a href="https://unsplash.com/search/photos/bricks?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>When I started learning Spark with Pyspark, I came across the Databricks platform and explored it. This platform made it easy to setup an environment to run Spark dataframes and practice coding. This post contains some steps that can help you get started with Databricks.</p><p>Databricks is a platform that runs on top of Apache Spark. It conveniently has a Notebook systems setup. One can easily provision clusters in the cloud, and it also incorporates an integrated workspace for exploration and visualization.</p><p>You can also schedule any existing notebook or locally developed Spark code to go from prototype to production without re-engineering.</p><h4><strong>1.</strong> <strong>Setup a Databricks account</strong></h4><p>To get started with the tutorial, navigate to this <a href="https://databricks.com/try-databricks">link</a> and select the free Community Edition to open your account. This option has single cluster with up to 6 GB free storage. It allows you to create a basic Notebook. You’ll need a valid email address to verify your account.</p><p>You will observe this screen once you successfully log in to your account.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lUuQIivP0nMh5bp4S1cH4w.png" /></figure><h4><strong>2.</strong> <strong>Creating a new Cluster</strong></h4><p>We start with creating a new cluster to run our programs on. Click on “Cluster” on the main page and type in a new name for the cluster.</p><p>Next, you need to select the “Databricks Runtime” version. Databricks Runtime is a set of core components that run on clusters managed by Databricks. It includes Apache Spark, but also adds a number of components and updates to improve the usability and performance of the tool.</p><p>You can select any Databricks Runtime version — I have selected 3.5 LTS (includes Apache Spark 2.2.1, Scala 2.11). You also have a choice between Python 2 and 3.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/964/1*078JKqGKEOC7QAuqPa3-ZQ.png" /></figure><p>It’ll take a few minutes to create the cluster. After some time, you should be able to see an active cluster on the dashboard.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mjmW3frv7WVe1pqZ74NCjQ.png" /></figure><h4><strong>3.</strong> <strong>Creating a new Notebook</strong></h4><p>Let’s go ahead and create a new Notebook on which you can run your program.</p><p>From the main page, hit “New Notebook” and type in a name for the Notebook. Select the language of your choice — I chose Python here. You can see that Databricks supports multiple languages including Scala, R and SQL.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/963/1*VzaqPNJ6hN8ZtylLZC20Gw.png" /></figure><p>Once the details are entered, you will observe that the layout of the notebook is very similar to the Jupyter notebook. To test the notebook, let’s import pyspark.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/620/1*d_uiW9NoJcm2-jbaNs2WKw.png" /></figure><p>The command ran in 0.15 seconds and also gives the cluster name on which it is running. If there are any errors in the code, it would show below the cmd box.</p><p>You can hit the keyboard icon on the top right corner of the page to see operating system-specific shortcuts.</p><p>The most important shortcuts here are:</p><ul><li>Shift+Enter to run a cell</li><li>Ctrl+Enter keeps running the same cell without moving to the next cell</li></ul><p>Note these shortcuts are for Windows. You can check the OS-specific shortcuts for your OS on the keyboard icon.</p><h4><strong>4.</strong> <strong>Uploading data to Databricks</strong></h4><p>Head over to the “Tables” section on the left bar, and hit “Create Table.” You can upload a file, or connect to a Spark data source or some other database.</p><p>Let’s upload the commonly used iris dataset file here (if you don’t have the dataset, use this <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/iris/">link</a> )</p><p>Once you upload the data, create the table with a UI so you can visualize the table, and preview it on your cluster. As you can see, you can observe the attributes of the table. Spark will try to detect the datatype of each of the columns, and lets you edit it too.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*R5Hqu3RcICqvPTVWFn680A.png" /></figure><p>Now I need to put headers for the columns, so I can identify each column by their header instead of _c0, _c1 and so on.</p><p>I put their headers as Sepal Length, Sepal Width, Petal Length, Petal Width and Class. Here, Spark detected the datatype of the first four columns incorrectly as a String, so I changed it to the desired datatype — Float.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zzGvc4mVIVcYov6G6Qvygw.png" /></figure><h4><strong>5.</strong> <strong>How to access data from Notebook</strong></h4><p>Spark is a framework that can be used to analyze big data using SQL, machine learning, graph processing or real-time streaming analysis. We will be working with SparkSQL and Dataframes in this tutorial.</p><p>Let’s get started with working with the data on the Notebook. The data that we have uploaded is now put in tabular format.We require a SQL query to read the data and put it in a dataframe.</p><p>Type df = sqlContext.sql(“SELECT * FROM iris_data”)<em> </em>to read iris data into a dataframe.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yOZjIoEQj2YnFWhFhM2C1w.png" /></figure><p>To view the first five rows in the dataframe, I can simply run the command:</p><p>display(df.limit(5))</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-Lldd8XEp6s54dBWY87GBA.png" /></figure><p>Notice a Bar chart icon at the bottom. Once you click, you can view the data that you have imported into Databricks. To view the bar chart of complete data, rundisplay(df) instead of display(df.limit(5)).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*BOdqsPhuVa07idcljdUfZA.png" /></figure><p>The dropdown button allows you to visualize the data in different charts like bar, pie, scatter, and so on. It also gives you plot options to customize the plot and visualize specific columns only.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Gt8BTeKw-Kmdll-Ucq4wIQ.png" /></figure><p>You can also display matplotlib and ggplot figures in Databricks. For a demonstration, see <a href="https://docs.databricks.com/user-guide/visualizations/matplotlib-and-ggplot.html">Matplotlib and ggplot in Python Notebooks</a>.</p><p>To view all the columns of the data, simply type df.columns</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/931/1*eD7K4M0MYMb7a70-O7DJog.png" /></figure><p>To count how many rows total there are in the Dataframe (and see how long it takes to a full scan from remote disk/S3), run df.count().</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/472/1*I-Q5ejg4NHsGNQTRDPS-HQ.png" /></figure><h4><strong>6. Converting a Spark dataframe to a Pandas dataframe.</strong></h4><p>Now if you are comfortable using pandas dataframes, and want to convert your Spark dataframe to pandas, you can do this by putting the command</p><pre>import pandas as pd<br>pandas_df=df.to_pandas()</pre><p>Now you can use pandas operations on the pandas_df dataframe.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/892/1*wIAq5tYRCWeK8sp2fZdqdg.png" /></figure><h4><strong>7. Viewing the Spark UI</strong></h4><p>The Spark UI contains a wealth of information needed for debugging Spark jobs. There are a bunch of great visualizations, so let’s view them in a gist.</p><p>To go to Spark UI, you need to go to the top of the page where there are some menu options like “File,” “View,” “Code,” “Permissions,” and others. You will find the name of the cluster at the top next to “Attached” and a dropdown button next to it. Hit the dropdown button and select “View Spark UI.” A new tab will open up with the lots of information on your Notebook.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/788/1*7X7gAn7MaR3OzXpdwNiNdQ.png" /></figure><p>The UI view gives plenty of information on each job executed on the cluster, stages, environment, and SQL queries executed. This UI can be helpful for users to debug their applications. Also, this UI gives a good visualization on Spark streaming statistics. To learn in more detail about each aspect of the Spark UI, refer to this <a href="https://databricks.com/blog/2015/06/22/understanding-your-spark-application-through-visualization.html">link</a>.</p><p>Once you are done with the Notebook, you can go ahead and publish it or export the file in different file formats, such that somebody else can use it using a unique link. I have <a href="https://cdn.rawgit.com/sasthan/Tutorial_databricks/7f01b3e1/Notebook_1.html">attached my Notebook in HTML format</a>.</p><h4>Wrapping up</h4><p>This is a short overview on how you can get started with Databricks quickly and run your programs. The advantage of using Databricks is that it offers an end-to-end service for building analytics, data warehousing, and machine learning applications. The entire Spark cluster can be managed, monitored, and secured using a self-service model of Databricks.</p><p>Here are some interesting links for <a href="https://docs.databricks.com/spark/latest/gentle-introduction/for-data-scientists.html">Data Scientists</a> and for <a href="https://docs.databricks.com/spark/latest/gentle-introduction/for-data-engineers.html">Data Engineers</a>. Also, here is a <a href="https://www.youtube.com/watch?v=K14plpZgy_c">tutorial </a>which I found very useful and is great for beginners.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bc8da4ffbccb" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-get-started-with-databricks-bc8da4ffbccb">How to get started with Databricks</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[Cracking the System Design interview: tips from a Twitter software engineer]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-system-design-dda63ed27e26?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/dda63ed27e26</guid>
            <category>
                <![CDATA[software-development]]>
            </category>
            <category>
                <![CDATA[education]]>
            </category>
            <category>
                <![CDATA[computer-science]]>
            </category>
            <category>
                <![CDATA[interview]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <dc:creator>
                <![CDATA[Zhia Hwa Chong]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 19:40:57 GMT</pubDate>
            <atom:updated>2018-04-19T19:40:57.672Z</atom:updated>
            <content:encoded>
                <![CDATA[<p>I recently wrote about <a href="https://medium.freecodecamp.org/how-i-landed-offers-from-microsoft-amazon-and-twitter-without-an-ivy-league-degree-d62cfe286eb8">how I landed offers from multiple top-tier tech companies</a>. During my interview preparation process, I read up on a lot of material and prepared a set of notes on how to tackle system design problems. In this article, I’d like to share those tips with you all.</p><p>If you’re a fresh graduate with no experience in large-scale distributed systems, or even a seasoned engineer with years of experience under your belt, this article will be useful for you.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*BP4Kem7C3Sxd7xWWXkbypA.png" /><figcaption>How to System Design: Tips from a Twitter software engineer</figcaption></figure><p>This article is broken down into the following four sections:</p><ul><li>Ask clarification questions</li><li>Use your background</li><li>Tackle a problem systematically</li><li>Keep your own notes</li></ul><h3>Ask clarification questions</h3><p>A core aim of a systems design interview is to <strong>give the candidate an opportunity to demonstrate their knowledge.</strong></p><p>There are no strictly right or wrong answers. A good system design question usually sounds very ambiguous, and the reason for that is it’s supposed to give you a chance to demonstrate the following:</p><ul><li>How you would think about the problem space</li><li>How you think about bottlenecks</li><li>What you can do to remove these bottlenecks.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*QC4epiS4zYnZu4VxAMlNQg.png" /><figcaption>How to design this black box</figcaption></figure><p>Imagine that you’re being asked to design a black box. How would you tackle the problem? There are no clear directions on what you need to build here, aside from the box being able to hold some items within it.</p><p>One of the most useful strategies I personally employ is <strong>to ask clarification questions. </strong>What are “good” clarification questions, you ask?</p><p>A good clarification question helps you achieve one, or more, of several things:</p><ol><li>Helps you narrow the scope of what you’re supposed to do</li><li>Helps clarify what the user expectation of the system is</li><li>Gives you direction about where to proceed</li><li>Informs you of possible bottlenecks/problem areas</li></ol><p>In the black box example, you might ask, “well, what does the box hold? How many items does it hold? And who is the intended user?”</p><p>To that I might say, let’s build a yellow box with a smiley on it that should hold at most 1 tennis ball. This is not an ordinary tennis ball, however. It will be at least 0.5m in radius and weighs about 1kg. It is meant to be hugged, not held, so I don’t want any handle on it.</p><p>There you go, this is the box.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*c27cLjwKB1VJZYtsT_kAYw.png" /><figcaption>My ideal box with a smiley face</figcaption></figure><p><strong>Always ask clarification questions.</strong> You are not being judged on whether or not you asked a specific question during the interview, but you are judged on how you think about the problem space.</p><p>For example, if I were to ask you to design Twitter right now, how would you do it? Take a few minutes to think about it, and maybe even sketch it out on a piece of paper. Go as deeply and widely as you can, and then come back to this article. Better yet, you can <strong>leave your notes in the comments below</strong> and we can discuss further.</p><p>If you haven’t realized it yet, the end result of the exercise above would yield significantly different results. For my own specific background, I might delve really deeply into API design and backend infrastructure. I’d probably explore iPhone-specific problems as well, due to my experience. I’ll talk about how the client interacts with the middle-tier endpoints, how logging would work, how I’d design the backend to ensure uptime, and so on.</p><p>These are quite interesting discussions that you can have with a colleague, and that is a very strong signal an interviewer is looking for.</p><h3>Use your background to your advantage</h3><p>Often times I see engineers trying to figure out what the interviewer is trying to ask, and then catering their responses to fit the expectations.</p><p>I actually highly discourage anyone from doing this for several reasons:</p><ol><li>Everyone has a unique background. In a systems design interview, it’s an opportunity for you to demonstrate what your strengths are. Don’t waste the opporunity trying to figure out what someone else might expect of you.</li><li>The interviewer might have been nodding along to your answers, but they might’ve known that you’re just bluffing your way through and not actually thinking about the problem.</li></ol><p>Your experience and background can vary widely from the next candidate. You bring a set of values and expertise to the table that no one else can. <strong>That is what makes you valuable and irreplaceable. </strong>Regardless of what field you’re in, people care about what <strong>you </strong>can bring to the table.</p><h3>Tackle the problem systematically</h3><p>Now, with my expertise in mind, there are several things that I think about when I’m tackling a new system. I highly recommend that you formulate a set of criteria or steps for yourself as well.</p><p>Some of the things in my mind when I work on a new system are:</p><ul><li>What is the goal of the system?</li><li>Who are the users of the system?</li><li>What is the scale we’re working with?</li><li>Is this a new/old system? How do we handle versioning?</li></ul><p>Among others…</p><p>See, my set of criteria will be different from a front-end engineer’s set of criteria. I use these criteria to formulate a picture in my head, and these will guide my decision-making process.</p><p>Armed with answers to those questions, I can start to tackle the problem at hand and then systematically break it down into individual components.</p><p>A good exercise I like to do is <strong>how to design a coffee-ordering system</strong>. I thought of this while I was sitting at Starbucks one day, and realized that it would be nice if I could order a smoothie on my phone and pick it up at my local Starbucks.</p><p>My mind started going in various directions:</p><ul><li>What does this coffee-ordering machine do?</li><li>If I build one, can I sell it to Starbucks, or do I white-label it and sell it as a service?</li><li>How many users do I need to support if I sell it to Starbucks?</li><li>Alternatively, if I white-label it, can I sell the interface to my coffee-ordering service, and then help the customers build out a backend so that they can store the orders on their local machines?</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*znYqOI_0aRoTtPYb3ElD9A.png" /><figcaption>How to approach this problem</figcaption></figure><p>Once I get answers to these questions, I can finally form a full picture of what my coffee-ordering service does. Here’s what <strong>my version</strong> of the coffee-ordering service would look like:</p><p>My coffee-ordering service is a software as a service (<a href="https://en.wikipedia.org/wiki/Software_as_a_service">SAAS</a>). It offers an interface for various partners to plug into.</p><ul><li>It has an API, called <em>addCoffeeForMerchant</em>, that inserts coffee name, coffee price, and coffee ingredients.</li><li>It has a GET API, called <em>getCoffeesForMerchant</em>, that returns a list of coffees for a given merchant ID.</li><li>The merchant ID is a unique identifier (UUID) that is generated using some hashing mechanism, which can be further clarified with the customer.</li><li>The software is optimized for read-only operations, because most of my customers create their menu once and read it multiple times throughout the day.</li><li>It has a caching mechanism that uses <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least-Recently-Used (LRU) </a>eviction strategy, because if the menu item hasn’t been ordered in a while, my customer doesn’t care if it’s slightly slower in showing up on the menu.</li><li>In case one of the data stores self-erupts, my coffee-ordering service will replicate data across different clusters across US west and US east coast because I am targeting the US market only for now.</li></ul><p>Alternatively, any other coffee-ordering service that you can think of would be highly probable as well. It’s just a matter of what you’re optimizing for. I think these are very interesting problems, and it’s a great mental exercise to keep your mind engaged.</p><h3>Keep your own notes</h3><p>As a software engineer, it’s a never-ending process of learning. I highly recommend that you use either Evernote or a <a href="https://amzn.to/2IuEiPw">Moleskin</a> to keep notes. I personally carry a small notebook for quick ideas I need to jot down, and I keep various other things on Evernote whenever I can.</p><p>I have a Notebook named “Programming” in my Evernote. Whenever I run into something new, or something interesting, I jot it down within my notebook for further reference.</p><p>I go through and assign labels to these new notes on a monthly or quarterly basis to make sure the notes are organized. For example, I have a “Design” label for anything that has to do with system design. It could be something like a link to a YouTube video that I found interesting, or an interesting argument my coworker put forth that I hadn’t thought about.</p><p>This is a sample of what one of my notes looks like:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/562/1*eyukklMJSTLFKkZWg7H_2w.png" /><figcaption>Sorry for the bad grammar and typos :p</figcaption></figure><p>One of the things I learned recently from a coworker is that NoSQL is great for prototyping, because there’s no need to undergo schema discussions with other teams. If I wanted to change the schema, I can do that really quickly with a NoSQL database. That was a key learning from work that I inserted into my “Programming” notebook.</p><p>I break down my notes into:</p><ol><li>Systems designs</li><li>Interviewing (experience + review of different interviews I’ve had in the past, grouped by company name)</li><li>Random tid-bits, CS good-to-know, like useful bash scripts or command-line tricks</li><li>Readings / YouTube videos</li></ol><p>All of the notes above go under “Programming”. Over time, I find that I have a pseudo-organized collection of things I’ve either read or explored in the past.</p><p>As anyone who knows me on a personal level, I’m not a very organized person. Thus, I’ve only collected maybe 10 - 15% of things, so there’s much more left to do there.</p><p>Knowledge and practice go hand-in-hand in getting better at systems designs. If you feel that your current work doesn’t afford you the opportunity to do systems designs, then you should either find one that does, or try to design one small part of an existing architecture such that it’s either faster, cheaper, more robust, or easier to modify in the future.</p><h3>Resources I recommend</h3><p><a href="https://www.youtube.com/watch?v=ZgdS0EUmn70">Intro to: Architecture and Systems Designs</a> - Great Youtube tutorial from an ex-Facebook-engineer about how to approach systems design problems.</p><p><a href="https://amzn.to/2H1ULel">Designing data-intensive applications</a> - Another good resource for learning how to design for scale. It talks about various things a typical software engineer takes for granted — how databases (mySQL and noSQL) work, when to use each, pros and cons of various techniques for handling scale etc. I highly recommend it 👍</p><p><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">What every software engineer should know about real-time data’s unifying abstraction</a> - A very lengthy and technical discussion about logs, trade-offs. I haven’t finished it yet, but it comes highly recommended from a coworker.</p><p><a href="https://www.evernote.com/referral/Registration.action?sig=3dbd8660e92a8ca68faeb24c552fd32a492c1e620fe4c77e45844685fed05492&amp;uid=18085328">Evernote</a> - The best 🔥 note-keeping app I’ve used. There are many tutorials on how to best utilize Evernote. I haven’t gone through them yet, simply because I use it as just a notebook. I log everything I learn on there, and then occasionally go through and reorganize them.</p><p><a href="https://amzn.to/2IuEiPw">Moleskin notebook</a> - I really enjoy this one. The quality of it is extremely high. The price is slightly higher, but since I use it on a daily basis, I consider it a good investment. Holding a beautiful notebook in my hands everyday makes me more excited to write more notes.</p><p><a href="https://amzn.to/2Gwb9qj">Pilot G2 (Black)</a> - Easily the best pens I’ve ever used, and the only pens I’ll use. I buy them in bulk from Amazon and keep them around everywhere I go. I have one in my backpack, one in the office, and one in my home office so that I always have a pen around. It writes great, the ink flows smoothly, and I just love the feel of writing with it. Coupled with the Moleskin, sometimes I just want to pick up the G2 to jot random things on there because these two are so perfect together.</p><p><a href="https://www.educative.io/collection/5668639101419520/5649050225344512">Grokking the System Design Interview</a> — This one comes as a recommendation from friends. It’s an online course that teaches how to design distributed system in detail. It’s a $79 course, however. There’s a team-pricing. If there’s any interest, I’ll check with them to see if it’s possible to form a group for group-discount.</p><p><em>Follow me on </em><a href="https://twitter.com/zhiachong"><em>Twitter</em></a><em>, </em><a href="https://www.facebook.com/zhiachong.tech"><em>Facebook</em></a><em>, and </em><a href="https://www.linkedin.com/in/zhiachong/"><em>LinkedIn</em></a><em>. Sign up for </em><a href="http://eepurl.com/dnt9Sf"><em>my mailing list</em></a><em> where I regularly send tips, tricks and industry learnings.</em></p><p><em>If you enjoyed this article, comment below: </em><strong><em>what is your tip for building a scalable, reliable system?</em></strong></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dda63ed27e26" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-system-design-dda63ed27e26">Cracking the System Design interview: tips from a Twitter software engineer</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[How to handle monetary values in JavaScript]]>
            </title>
            <link>https://medium.freecodecamp.org/how-to-handle-monetary-values-in-javascript-3fef5eeb3eda?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/3fef5eeb3eda</guid>
            <category>
                <![CDATA[technology]]>
            </category>
            <category>
                <![CDATA[startup]]>
            </category>
            <category>
                <![CDATA[javascript]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[tech]]>
            </category>
            <dc:creator>
                <![CDATA[Sarah Dayan]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 17:00:32 GMT</pubDate>
            <atom:updated>2018-04-19T20:55:52.469Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*q76Xol7zRdld3s-BbFrB_Q.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/gbQ3EsFSdG8?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Thought Catalog</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>Money is everywhere.</p><p>Banking apps, e-commerce websites, stock exchange platforms — we interact with money daily. We also increasingly rely on technology to handle ours.</p><p>Yet, there’s no consensus around how to programmatically handle monetary values. It’s a prevalent concept in modern societies, yet it’s not a first-class data type in any mainstream language, while things like date and time are. As a result, <strong>every piece of software comes up with its own way of handling money, with all the pitfalls that come with it</strong>.</p><h4>Pitfall #1: Money as a Number</h4><p>Your first instinct when you need to represent money might be to use a Number.</p><p>Money is nothing more than a numeric value, right? Wrong.</p><p>The amount part of a monetary value is only relative to another aspect: its currency. There’s no such thing as 10 “money.” It’s 10 dollars, 10 euros, 10 bitcoins… If you want to add two monetary values with different currencies, you need to convert them first. Same if you want to compare them: if all you have is an amount, you can’t make an accurate comparison. <strong>Amount and currency can’t go without one another</strong>.</p><h4>Pitfall #2: Floating point math</h4><p>Most contemporary currencies are either decimal or have no sub-units at all. This means that when money has sub-units, the number of these in a main unit is a power of 10. For example, there are 100 cents in a dollar, being 10 to the power of 2.</p><p>Using a decimal system has advantages, but raises a major issue when it comes to programming. Computers use a binary system, so <a href="http://0.30000000000000004.com/">they can’t natively represent decimal numbers</a>. Some languages have come up with their own solutions like the <a href="https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html">BigDecimal</a> type in Java or the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/decimal">decimal</a> type in C#. JavaScript only has the Number type, which can be used as an integer or a <a href="https://en.wikipedia.org/wiki/IEEE_754">double precision float</a>. Because it’s a binary representation of a base 10 system, <strong>you end up with inaccurate results when you try to do math</strong>.</p><pre>0.1 + 0.2 // returns 0.30000000000000004 😧</pre><p><strong>Using floats to store monetary values is a bad idea</strong>.</p><p>As you calculate more values, the imperceptible precision errors lead to larger gaps. This inevitably ends up causing rounding issues.</p><h4>Pitfall #3: Percentage vs. allocation</h4><p>Sometimes you need to split money, but <strong>percentages can’t cut it without adding or losing pennies</strong>.</p><p>Imagine you need to bill $999.99 with a 50% downpayment. This can be done with some simple math. Half is $499.995, but you can’t split a penny so you’ll likely round the result to $500. Problem is, as you charge the second half, you end up with the same result and charge a penny extra.</p><p>You can’t solely rely on percentages or divisions to split money because <strong>it’s not divisible to infinity</strong>. Gas price may show more than two fraction digits, but it’s only symbolic: you always end up paying a rounded price.</p><h4>Engineering to the rescue</h4><p>As you can see, there is much more to money than meets the eye, and it’s more than simple Number data types can take.</p><p>Fortunately, <strong>software engineer </strong><a href="https://martinfowler.com/"><strong>Martin Fowler</strong></a><strong> came up with a solution</strong>. In <a href="https://martinfowler.com/books/eaa.html"><em>Patterns of Enterprise Application Architecture</em></a>, he describes <a href="https://martinfowler.com/eaaCatalog/money.html">a pattern for monetary values</a>:</p><h4>Properties</h4><p>Methods</p><ul><li>Math: add, subtract, multiply, allocate</li><li>Comparison: equals to, greater than, greater than or equal, lesser than, lesser than or equal.</li></ul><p><strong>From this, you can create value objects that fulfill most of your monetary needs</strong>.</p><h4>Money as a data structure</h4><p>Money behaves differently from a simple number, and thus should be treated differently. The first and most important thing is that <strong>it should always be composed of an amount and a currency</strong>.</p><p>You can do everything from an amount and a currency. You can add monetary amounts together, check if they’re equal or not, and format them into whatever you need. This can be done through an object’s methods. <strong>In JavaScript, any kind of function that returns an object will do the trick</strong>.</p><h4>Amounts in cents</h4><p>There are several ways you can solve the floating point issue in JavaScript.</p><p>You can use libraries like <a href="https://mikemcl.github.io/decimal.js">Decimal.js</a> that will handle your floats as strings. This isn’t a bad solution, and even comes in handy when you have to handle <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Number/MAX_SAFE_INTEGER">big numbers</a>. <strong>Yet, it comes at the expense of adding a (heavy) dependency, resulting in slower performance</strong>.</p><p>You can multiply floats into integers before you calculate, then divide them back.</p><pre>(0.2 * 100 + 0.01 * 100) / 100 // returns 0.21 🎉</pre><p>It’s a fine solution, but requires extra calculations either on object construction or on each manipulation. This isn’t necessarily draining on performance, but is still more process work than necessary.</p><p>A third alternative is to directly store values in cents, relative to the unit. If you need to store 10 cents, you won’t store 0.1 nor 10, but 100. This allows you to work with integers only, which means safe calculations (until you hit <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Number/MAX_SAFE_INTEGER">big numbers</a>) and great performance.</p><h4>Dinero.js, an immutable library to create, calculate, and format monetary values</h4><p>From these observations, I made a JavaScript library: <a href="https://github.com/sarahdayan/dinero.js"><strong>Dinero.js</strong></a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*cen7L63Ka4n0WA5T.png" /></figure><p>Dinero.js follows Fowler’s pattern and more. It lets you create, calculate, and format monetary values in JavaScript. You can do math, parse and format your objects, ask them questions, and make your development process easier.</p><p>The library was designed to be immutable and chainable. It supports global settings, has extended formatting options, and provides native internationalization support.</p><h4>Why immutable?</h4><p>An immutable library is safer and more predictable. Mutable operations and reference copies are the sources of many bugs. Opting for immutability avoids them altogether.</p><p>With Dinero.js, you can perform calculations without worrying about altering original instances. In the following Vue.js example, price won’t be altered when priceWithTax is called. If the instance was mutable, it would.</p><pre>const vm = new Vue({<br> data: {<br> price: Dinero({ amount: 500 })<br> },<br> computed: {<br> priceWithTax() {<br> return this.price.add(this.price.percentage(10))<br> }<br> }<br>})</pre><h4>Chainability</h4><p>Good developers strive to make their code more concise and easier to read. When you want to successively perform several operations on a single object, chaining provides an elegant notation and concise syntax.</p><pre>Dinero({ amount: 500 })<br> .add(Dinero({ amount: 200 }))<br> .multiply(4)<br> .setLocale(&#39;fr-FR&#39;)<br> .toFormat() // returns &quot;28,00 US$&quot;</pre><h4>Global settings</h4><p>When you’re handling lots of monetary values, chances are you want some of them to share some attributes. If you’re making a website in German, you’ll likely want to show amounts with the German currency format.</p><p>This is where global settings come in handy. Instead of passing them to every instance, you can declare options that will apply to all new objects.</p><pre>Dinero.globalLocale = &#39;de-DE&#39;<br>Dinero({ amount: 500 }).toFormat() // returns &quot;5,00 $&quot;</pre><h4>Native Internationalization support</h4><p>Traditionally, libraries use locale files for internationalization. If you’re exhaustive, they tend to make libraries much heavier.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/0*C5q7okNXFZ0FD5Op.png" /><figcaption>Moment.js is four times heavier with locale files.</figcaption></figure><p>Locale files are also hard to maintain. The Internationalization API is native and <a href="https://caniuse.com/#feat=internationalization">pretty well supported</a>. Unless you have to work with outdated and/or marginal browsers, toFormat is safe to use.</p><h4>Formatting</h4><p>An object is great to store data, but not so helpful when it comes to displaying it. Dinero.js comes with various formatting methods, including toFormat. It provides intuitive and concise syntactic sugar over Number.prototype.toLocaleString. Pair it with setLocale and you’ll be able to display any Dinero object into the proper format, in any language. This is particularly helpful for multi-lingual e-commerce websites.</p><h4>What’s next?</h4><p>Fowler’s money pattern is widely recognized as a great solution. It has inspired many implementations in many languages. If you’re into DIY, I recommend it and the observations from this article as a starting point. Or you can pick <a href="https://github.com/sarahdayan/dinero.js">Dinero.js</a>: a modern, reliable, fully tested solution that already works.</p><p>Have fun!</p><p><em>Any questions about Dinero.js? Or on how to make your own money data structure? Let’s chat on </em><a href="https://twitter.com/frontstuff_io"><em>Twitter</em></a><em>!</em></p><p><em>Originally published at </em><a href="https://frontstuff.io/how-to-handle-monetary-values-in-javascript"><em>frontstuff.io</em></a><em>.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3fef5eeb3eda" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-handle-monetary-values-in-javascript-3fef5eeb3eda">How to handle monetary values in JavaScript</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[TC39 and its contributions to ECMAScript]]>
            </title>
            <link>https://medium.freecodecamp.org/tc39-and-its-contributions-to-ecmascript-c178b77f32e1?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/c178b77f32e1</guid>
            <category>
                <![CDATA[javascript]]>
            </category>
            <category>
                <![CDATA[education]]>
            </category>
            <category>
                <![CDATA[startup]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[technology]]>
            </category>
            <dc:creator>
                <![CDATA[Parth Shandilya]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 16:47:50 GMT</pubDate>
            <atom:updated>2018-04-19T16:47:50.934Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/820/1*kc4kfzVBQMBGRd8QmiJiDg.png" /></figure><p>Many people get confused about what is JavaScript and what is ECMAScript. Sometimes it’s hard to tell how they are connected with each other and what role ECMA International and TC39 play in the standardization of JavaScript.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*7nwB8rIP-_3fGKpRsKiBwQ.png" /><figcaption>Source : Warosu.org</figcaption></figure><p>In this blog post, I am going to discuss TC39 and its contributions to ECMAScript.</p><p>Let’s start with all the basic terminologies used when talking about JavaScript and ECMAScript.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*v1EQ_NwVW_A6YseGNXPsZQ.png" /><figcaption>Source : <a href="https://github.com/exercism/meta/issues/39">GitHub</a></figcaption></figure><h3>What is ECMAScript?</h3><p>ECMAScript is a standard script language, developed with the cooperation of Netscape and Microsoft and mainly derived from Netscape’s JavaScript. JavaScript is a widely-used scripting language that is used in Web pages to affect how they look or behave for the user.</p><p>ECMA-262 is a standard published by ECMA International. It contains the specification for a general purpose scripting language which is known as ECMAScript.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*JUgQFAnHBvOX_251sKuPNg.png" /><figcaption>Source : <a href="https://my.wikipedia.org/wiki/File:Javascript-736400_960_720.png">my.wikipedia.org</a></figcaption></figure><h4>A bit more about JavaScript</h4><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript">JavaScript</a> is a scripting language that enables you to create dynamically updating content, to control multimedia, to animate images, and to do pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</p><h4>What is ECMA?</h4><p>ECMA is a standards organization for information and communication systems. ECMA aims to develop<a href="https://en.wikipedia.org/wiki/Standardization"> standards</a> and technical reports to facilitate and standardize the use of information communication technology and consumer electronics. It encourages the correct use of standards by influencing the environment in which they are applied, and it publishes these standards and reports in electronic and printed form.</p><p>And now, let’s introduce the hard working people behind ECMAScript: TC39.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/280/1*zM9bqqV7r9AsC7jBOAZ0VQ.png" /><figcaption>Source : <a href="https://github.com/tc39">GitHub</a></figcaption></figure><h3>What is TC 39?</h3><p>TC39 means Technical Committee number 39. It is part of ECMA, the institution which standardizes the JavaScript language under the “ECMAScript” specification. It works on the standardization of the general purpose, cross platform, vendor-neutral programming language that is ECMAScript. This includes the language syntax, semantics, libraries, and complementary technologies that support the language.</p><h4><strong>TC 39 works on</strong>:</h4><ul><li>Maintaining and updating the standard for the ECMAScript programming language.</li><li>Identifying, developing and maintaining standards for libraries that extend the capabilities of ECMAScript.</li><li>Developing test suites that may be used to verify correct implementation of these standards.</li><li>Contributing with selected standards to the <a href="https://www.iso.org/isoiec-jtc-1.html">ISO/IEC JTC 1</a> committee.</li><li>Evaluating and considering proposals for complementary or additional technologies.</li></ul><p>Since ES6 came out, TC 39 streamlined the proposal previsioning process to meet modern expectations. The new process uses a superset of HTML to format the proposals. They use GitHub pull requests, which helped boost participation from the community. The number of proposals being made also increased.</p><p>The specification is now more of a<a href="https://tc39.github.io/ecma262"> living standard</a>, meaning that proposals see adoption faster, and we don’t spend years waiting for a new edition of the specification to come out.</p><h4>A more general view</h4><p>By reading the<a href="https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf"> ECMAScript specification</a>, you learn how to create<em> </em>a scripting language. By reading the<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"> JavaScript documentation</a>, you learn how to use that scripting language.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/496/1*kFqqaEsoMYkPiPMkFES_rw.png" /><figcaption>Source : <a href="https://tc39.github.io/ecma262/">tc39/ecma262</a></figcaption></figure><h3>Proposal Processing</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/910/1*L7T3_NHRe1p9fUl4XGpKhA.jpeg" /><figcaption>Source : pyrus.com</figcaption></figure><h4>Stage 0: Strawman</h4><p>Any discussion, idea, change, or addition which has not yet been submitted as a formal proposal is considered to be a “strawman” proposal at this stage. Only members of TC39 can create these proposals, and there’s over a dozen active strawman proposals today.</p><h4>Stage 1: Proposal</h4><p>At this stage, a proposal is formalized and expected to address cross-cutting concerns, interactions with other proposals, and implementation concerns. Proposals in this stage identify a discrete problem and offer a concrete solution to that problem.</p><p>At this stage, proposal often includes a high level API description, usage examples, and a discussion of internal semantics and algorithms. These proposals are likely to change significantly as they make their way through the process.</p><h4>Stage 2: Draft</h4><p>Proposals in this stage should offer an initial draft of the specification.</p><p>At this point, it’s reasonable for implementers to begin experimenting with actual implementations in runtime. The implementation could come in many forms: a polyfill, user code that mangles the runtime into adhering to the proposal, an engine implementation (which natively provides support for the proposal), or it could be support by a build-time compiler like Babel.</p><h4>Stage 3: Candidate</h4><p>Proposals in this stage are candidate recommendations. At this advanced stage, the specification editor and designated reviewers must have signed off on the final specification. A Stage 3 proposal is unlikely to change beyond fixes to issues identified in the wild.</p><p>Implementers should have expressed interest in the proposal as well — a proposal without support from implementers is dead in the water. In practice, proposals move to this level with at least one browser implementation, a high-fidelity polyfill, or when supported by a build-time transpiler like Babel.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*Wy89M4VvEaOlMhOz7S359A.jpeg" /><figcaption>Source : <a href="https://expertelevation.com/how-may-project-not-finished">Expert Elevation</a></figcaption></figure><h4>Stage 4: Finished</h4><p>Finally, proposals get to this stage when there are at least two independent implementations that pass acceptance tests.</p><h4>What’s Next?</h4><p>Proposals that make their way through to stage 4 will be included in the next revision of ECMAScript. When the spec goes through its yearly ratification as a standard, the proposal is ratified as part of it.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/571/1*tRpro0GB-EELF3vnaQs9Jg.jpeg" /><figcaption>Source : <a href="http://get-it-done.co.za/">get-it-done.co.za</a></figcaption></figure><p>This is how ideas for evolving the ECMAScript language are accepted and added to next revision of ECMAScript. And we are all thankful for the work done by TC39, which is invaluable.</p><p>With that, we have reached the end of our discussion on TC39 and its contributions to ECMAScript.</p><p>Thanks for reading.</p><p>Sources: <a href="https://tc39.github.io/process-document/">TC 39 Process</a>, <a href="https://www.ecma-international.org/memento/TC39.htm">ECMA International</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c178b77f32e1" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/tc39-and-its-contributions-to-ecmascript-c178b77f32e1">TC39 and its contributions to ECMAScript</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[Force-refreshing a React child component: the easy way]]>
            </title>
            <link>https://medium.freecodecamp.org/force-refreshing-a-react-child-component-the-easy-way-6cdbb9e6d99c?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/6cdbb9e6d99c</guid>
            <category>
                <![CDATA[web-development]]>
            </category>
            <category>
                <![CDATA[react]]>
            </category>
            <category>
                <![CDATA[javascript]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[tutorial]]>
            </category>
            <dc:creator>
                <![CDATA[Amber Wilkie]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 16:26:31 GMT</pubDate>
            <atom:updated>2018-04-19T16:26:31.168Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5GipOUpmtMBQf3pOTcJ1YQ.jpeg" /></figure><p>In the React world, forcing a re-render is frowned upon. You should let the DOM take care of itself when React perceives changes to state or props. In order to follow these patterns, we sometimes have to do stuff that seems a little silly. Consider this scenario:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4y0iCPmTIuOufQgg4YsRig.png" /><figcaption>Silly simple example of a child component who manages their own state</figcaption></figure><p>We’ve got two components — a parent and a child. The parent makes an API call to fetch the user. From that, we get things like name, age, favorite color. We also get an id from our database. We’ll pass that to our child component, which is also going to make an API call, with the user id. Awesome — lots of data coming into our app.</p><p>Let’s say we are storing a list of shoes in the database. When the user changes their color preference, the server writes new data to the user’s shoe list. Great! Except, we aren’t seeing the new shoe list in our child component. What gives?</p><p><strong>Side note</strong>: Of course we should just get the shoes from the call for the user — this is just a simplified explanation.</p><h3>React rerendering basics</h3><p>The short of it is that React will only update parts of the DOM that have changed. In this case, the props we pass to the shoe component ( userId) haven’t changed, so nothing changes in our child component.</p><p>The color preference for the user will update when we get back new information from the API — assuming we are doing something with the response after we update a user.</p><p>But as React sees no reason to update the shoe list, it won’t — even though on our server, the shoes are now different.</p><h3>The starting code</h3><pre>const UserShow extends Component {<br> state = {<br> user: {}<br> }<br> <br> componentDidMount() {<br> this.fetchUser().then(this.refreshUser)<br> }<br> <br> setNewColor = color =&gt; {<br> this.updateUser({color}).then(this.refreshUser)<br> }<br> <br> refreshUser = res =&gt; this.setState({user: res.data.user})<br> <br> render() {<br> const { user } = this.state;<br> <br> return (<br> &lt;div&gt;<br> User name: {user.name}<br> Pick color: <br> &lt;div&gt;<br> {colors.map(color =&gt; <br> &lt;div className={color} <br> onClick={() =&gt; this.setNewColor(color)} /&gt;)}<br> )}<br> &lt;/div&gt;<br> &lt;ShoeList id={user.id} /&gt;<br> &lt;/div&gt;<br> )<br> }<br>}</pre><p>Our ShoeList is just going to be a list of shoes, which we’ll fetch from the server with the user’s id:</p><pre>const ShoeList extends Component {<br> state = {<br> shoes: []<br> }<br> <br> componentDidMount() {<br> this.fetchShoes(this.props.id)<br> .then(this.refreshShoeList)<br> }<br><br> refreshShoeList = res =&gt; this.setState({ shoes: res.data.shoes })<br> <br> render() {<br> // some list of shoes<br> }<br>}</pre><p>If we want the shoe component to grab the new list of shoes, we need to update the props we send to it. Otherwise it will see no need to refresh.</p><p>In fact, the way this is written, the ShoeList would never refresh, as we are not dependent on props for rendering. Let’s fix that.</p><h3>Triggering a child component to re-render</h3><p>To force the child component to re-render — and make a new API call — we’ll need to pass a prop that will change if the user’s color preference has changed.</p><p>To do this, we’ll add a method into setNewColor:</p><pre>[...]</pre><pre>setNewColor = color =&gt; {<br> this.updateUser({color}).then(res =&gt; {<br> this.refreshUser(res);<br> this.refreshShoeList();<br> })<br>}<br><br>refreshShoeList = () =&gt; <br> this.setState({refreshShoeList: !this.state.refreshShoeList})</pre><pre>[...]</pre><pre>&lt;ShoeList id={user.id} refresh={refreshShoeList}</pre><p>This is a simple switch we can flip. I’ve kept things as simple as possible, but in production we’d want to make sure that the color we’re setting is different than the color we had before. Otherwise, there will be nothing to update.</p><p>Now in the ShoeList:</p><pre>componentWillReceiveProps(props) {<br> const { refresh, id } = this.props;<br> if (props.refresh !== refresh) {<br> this.fetchShoes(id)<br> .then(this.refreshShoeList)<br> }<br>}</pre><p>If you pass only refreshShoeList and then toggle based on that boolean, the component will just update forever and ever and ever.</p><p>We need to make sure the switch has flipped only once — so we’ll just check that the props coming in are different than the props we had before. If they are different, we’ll make a new API call to get the new list of shoes.</p><p>And boom — our child component has been “forced” to update.</p><h4>componentWillReceiveProps</h4><p>It’s worth taking just one more minute to review what’s going on in that last piece of code. In componentWillReceiveProps we have our only opportunity to view new props as they are coming in and compare them with previous props.</p><p>Here we can detect changes (like in refresh) and we can also make checks for new props (note, for instance, that refresh is initially undefined).</p><p>This React method is a very powerful way to manipulate and examine props.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6cdbb9e6d99c" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/force-refreshing-a-react-child-component-the-easy-way-6cdbb9e6d99c">Force-refreshing a React child component: the easy way</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
        <item>
            <title>
                <![CDATA[Want to learn JavaScript? Here’s a free 24-part course to get you started.]]>
            </title>
            <link>https://medium.freecodecamp.org/want-to-learn-javascript-heres-a-free-24-part-course-to-get-you-started-e7777baf86fb?source=rss----336d898217ee---4</link>
            <guid isPermaLink="false">https://medium.com/p/e7777baf86fb</guid>
            <category>
                <![CDATA[productivity]]>
            </category>
            <category>
                <![CDATA[self-improvement]]>
            </category>
            <category>
                <![CDATA[programming]]>
            </category>
            <category>
                <![CDATA[startup]]>
            </category>
            <category>
                <![CDATA[learning-to-code]]>
            </category>
            <dc:creator>
                <![CDATA[Per Harald Borgen]]>
            </dc:creator>
            <pubDate>Thu, 19 Apr 2018 14:30:48 GMT</pubDate>
            <atom:updated>2018-04-19T15:15:43.514Z</atom:updated>
            <content:encoded>
                <![CDATA[<figure><a href="https://scrimba.com/g/gintrotojavascript"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qwstevkkpIh4WQeO0503aw.png" /></a><figcaption>A breakdown of the course. You can click the image to jump directly to the course.</figcaption></figure><p>JavaScript is the most popular programming language on the web. You can use it to create websites, servers, games and even native apps. So no wonder it’s such a valuable skill in today’s job market.</p><p>So I reached out to <a href="https://medium.com/u/7f21f9c02e5b">Dylan C. Israel</a> — a <a href="http://www.youtube.com/CodingTutorials360">programming YouTuber</a> and freeCodeCamp grad — and asked him to created a <a href="https://scrimba.com/g/gintrotojavascript">free JavaScript course on Scrimba</a>.</p><p>The course contains 15 lectures and 7 interactive challenges, and is suitable for beginners. It will give you a quick intro to the most important JavaScript concepts.</p><style>body[data-twttr-rendered="true"] {background-color: transparent;}.twitter-tweet {margin: auto !important;}</style><blockquote class="twitter-tweet" data-conversation="none" data-align="center" data-dnt="true"><p>Do you want to learn JavaScript? Then today&#39;s your lucky day! The eminent <a href="http://twitter.com/PizzaPokerGuy" target="_blank" title="Twitter profile for @PizzaPokerGuy">@PizzaPokerGuy</a> just launched a 🆓 24-part JavaScript course at <a href="http://twitter.com/scrimba_com" target="_blank" title="Twitter profile for @scrimba_com">@scrimba_com</a> 🔥🔥 So check it out if you&#39;re interested or RT if your followers might be! <a rel="nofollow" href="https://t.co/vMet2T8RUh">https://t.co/vMet2T8RUh</a></p><p>&#x200a;&mdash;&#x200a;<a href="https://twitter.com/perborgen/status/986986381997215747">@perborgen</a></p></blockquote><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script><script>function notifyResize(height) {height = height ? height : document.documentElement.offsetHeight; var resized = false; if (window.donkey && donkey.resize) {donkey.resize(height); resized = true;}if (parent && parent._resizeIframe) {var obj = {iframe: window.frameElement, height: height}; parent._resizeIframe(obj); resized = true;}if (window.location && window.location.hash === "#amp=1" && window.parent && window.parent.postMessage) {window.parent.postMessage({sentinel: "amp", type: "embed-size", height: height}, "*");}if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.resize) {window.webkit.messageHandlers.resize.postMessage(height); resized = true;}return resized;}twttr.events.bind('rendered', function (event) {notifyResize();}); twttr.events.bind('resize', function (event) {notifyResize();});</script><script>if (parent && parent._resizeIframe) {var maxWidth = parseInt(window.frameElement.getAttribute("width")); if ( 500 < maxWidth) {window.frameElement.setAttribute("width", "500");}}</script><p>Here’s how the course is laid out.</p><h3>Part #1: Introduction</h3><figure><a href="https://scrimba.com/g/gintrotojavascript"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Gpj7-WF-Esr45IoY8TPjyg.png" /></a></figure><p>As always, the course begins with a screencast about the subject in general and an overview over the course structure. Dylan will also tell you a little bit about himself, so that you’ll get to know him before you dive into the coding.</p><h3>Part #2: Variables</h3><p>The first concept you’ll need to learn is <em>variables, </em>which are for storing values. In modern JavaScript there are two keywords for doing that: let and const.</p><p>Let’s store the name <em>Dylan</em> in a let which we’ll call name.</p><pre>let name = &#39;Dylan&#39;;<br>console.log(name);</pre><pre>--&gt; &#39;Dylan&#39;</pre><p>As you can see, we can then refer to that variable later on in order to fetch out the value, for example to log it out to the console, using the console.log() method.</p><h3>Part #3: Strings</h3><p>In the second lesson you’ll learn about your first data type: <em>strings</em>. A string simply stores a sequence of characters wrapped in quotes. So whenever you wrap something inside single or double quotes, it’s turned into a string in JavaScript, like this:</p><pre>let name = &quot;Dylan&quot;;</pre><h3>Part #4: Strings challenge</h3><p>It’s time for the first challenge of the course! In this one you’re going to try and combine two variables into one.</p><pre>let firstName = &quot;Dylan&quot;;<br>let lastName = &quot;Israel&quot;;</pre><pre>console.log(fullName);</pre><pre>--&gt; ReferenceError: fullName is not defined</pre><p>If this is your very first introduction to JavaScript you’ll need to use your freshly acquired knowledge of both <em>variables</em> and <em>strings</em> in order to solve this problem. You also might have to do a little code experimentation. Luckily, this is possible in the Scrimba platform.</p><h3>Part #5: Numbers</h3><p>Next up is the second data type you’ll need to learn: <em>numbers</em>. Other languages often have multiple data types for numbers, like <em>floats </em>for decimal numbers and <em>integers </em>for whole numbers<em>. </em>However, in JavaScript they’re both <em>numbers</em>.</p><p>We can use the typeof to check the data type:</p><pre>let example1 = 7;<br>let example2 = 7.77;</pre><pre>console.log(typeof example1);<br>console.log(typeof example2);</pre><pre>--&gt; &quot;number&quot;<br>--&gt; &quot;number&quot;</pre><p>In this lecture you’ll also learn how to convert values between strings and number using parseInt() and parseFloat() methods.</p><h3>Part #6: Numbers challenge</h3><p>In the numbers challenge you’ll be exposed to a few different strings and numbers combined with the methods you’ve learned so far. Your job is to guess which values these expressions end up as.</p><pre>let example1 = parseInt(&quot;33 World 22&quot;);<br>let example2 = parseFloat(&#39;44 Dylan 33&#39;);<br>let example3 = 55.3333.toFixed(0);<br>let example4 = 200.0.toFixed(2);</pre><p>It might be a bit tricky, so don’t be discouraged if you do mistakes!</p><h3>Part #7: Booleans</h3><p>Booleans are simple, they’re either <em>true </em>or <em>false. </em>Here’s how you create a boolean value:</p><pre>let example = true;</pre><p>The fact that example now is set to <em>true </em>can come in handy when you’re programming, as you sometimes want to take actions based upon conditions like this one.</p><p>You’ll also learn about <em>truthy </em>or <em>falsy</em> values in this lecture, which are other data types, like strings or numbers, but which has a <em>truthy </em>or <em>falsy</em> side to them.</p><h3>Part #8: Booleans challenge</h3><p>In the booleans challenge, Dylan follows the same pattern as the numbers one, where you are to guess a bunch of values. Your job is to guess whether or not these variables are <em>truthy </em>or <em>falsy:</em></p><pre>let example1 = false;<br>let example2 = true;<br>let example3 = null;<br>let example4 = undefined;<br>let example5 = &#39;&#39;;<br>let example6 = NaN;<br>let example7 = -5;<br>let example8 = 0;</pre><h3>Part #9: Arrays</h3><p>The data types you’ve learned up until now, are so-called <em>primitive </em>values. Now it’s about time to learn about the array, which is a <em>non-primitive</em> value.</p><p>An array is simply a list of values, like this:</p><pre>let example = [&#39;programming&#39;, &#39;design&#39;, &#39;art&#39;];</pre><p>You’ll learn how to create arrays, how to add and remove items and even how to loop through the entire array using the forEach() method.</p><h3>Part #10: Arrays challenge</h3><p>In the arrays challenge you’ll be introduced to the concept of padding by <em>reference </em>or <em>value</em>, which is important in order to understand JavaScript properly. We’ll also revisit this concept later on, as repetition will help the knowledge stick.</p><pre>let example1 = [&#39;Dylan&#39;, 5, true];<br>let example2 = example1;</pre><pre>example2.push(11);</pre><pre>console.log(example1);<br>console.log(example2);</pre><p>The results that are logged above might surprise you if you’re not aware of the <em>passing by reference </em>concept.</p><h3>Part #11: Objects</h3><p>From arrays we’ll continue to its close relatives called <em>objects. </em>Objects are like arrays in the sense that they can store multiple values. However, instead of consisting of a list of values, object consists of so-called key-value pairs. We create an object using curly brackets:</p><pre>let example = {<br> firstName: &#39;Dylan&#39;;<br> lastName: &#39;Israel&#39;<br>};</pre><p>In this lecture, you’ll learn both how to populate objects and fetch their values.</p><h3>Part #12: Objects challenge</h3><p>In this challenge we’ll revisit the concept of passing by <em>reference </em>or <em>value</em>. You’ll also learn about the Object.assign() method, which allows you to create copies of objects.</p><pre>let example1 = {<br> firstName: &#39;Dylan&#39;<br>};<br>let example2 = example1;<br>example2.lastName = &#39;Israel&#39;;</pre><pre>console.log(example1);<br>console.log(example2);</pre><h3>Part #13: Arithmetic operators</h3><p>A programming language would be almost useless if it didn’t know how to do arithmetic operations. Doing it in JavaScript is pretty straight-forward:</p><pre>let example = 5 + 5;</pre><pre>console.log(example)</pre><pre>--&gt; 10</pre><p>In this lecture you’ll also experience how JavaScript handles expressions where multiple operations are combined.</p><h3>Part #14: Relational operators</h3><p>When programming we often have to compare values, to see if they’re equal to each other, or if one of them is larger than the other, so in this lecture you’ll learn how to do that,.</p><pre>let example1 = 10;<br>let example2 = 15;</pre><pre>console.log(example1 &gt; example2)</pre><pre>--&gt; false</pre><p>And real-world example of this would be when you want to check if a user has got enough credit to purchase an item. If the credit is above the price, then they’re allowed to buy, otherwise they’re not.</p><h3>Part #15: Relational operators challenge</h3><p>In this challenge you’ll be able to test how well you understand relational operators, through guessing the boolean value of these variables:</p><pre>let example1 = 5 === 5;<br>let example2 = 5 == &#39;5&#39;;<br>let example3 = 6 != &#39;6&#39;;<br>let example4 = 7 !== &#39;7&#39;;</pre><h3>Part #16: Increment &amp; decrement</h3><p>Making values grow or shrink is very often done in programming, for example when you’re counting. It can be done in a few different ways, tough, so it deserves its own lecture.</p><pre>let example = 1;<br>example = example + 1;</pre><pre>console.log(example);</pre><pre>--&gt; 2</pre><h3>Part #17: Increment &amp; decrement challenge</h3><p>This challenge will look at the difference between doing example++ and ++example.</p><p>This might require you to experiment a bit in order to understand it, or even googling, which also is a critical skills for any developer.</p><h3>Part #18: If, else if, else</h3><p>Conditional statements like if, if else and else are critical when programming. It’s what allows you to have logic in your application. So in this lecture you’ll learn how to work with all three of them.</p><pre>let example = 5;</pre><pre>if (example === 5) {<br> console.log(&#39;Runs&#39;);<br>} else if ( true ) {<br> console.log(&#39;else if&#39;);<br>} else {<br> console.log(&#39;else&#39;);<br>}</pre><p>You’ll also learn about how to combine these conditionals with relational operators to make complex logic.</p><h3>Part #19: If, else if, else challenge</h3><p>In this challenge you’ll try to guess what the following expressions evaluate to. This builds upon both what you’ve learned in the relational operators lecture and in the previous one.</p><pre>console.log(10 === 10 &amp;&amp; 5 &lt; 4);<br>console.log(10 === 10 || 5 &lt; 4);<br>console.log((5 &gt;= 5 || 4 &gt; 4) &amp;&amp; 3 + 2 === 5);</pre><p>Again, don’t loose the courage if you don’t manage to guess correctly. This stuff is tricky for a beginner!</p><h3>Part #20: Switch</h3><p>In this lecture you’ll learn about so-called switch statements, which are really handy if you have many conditions to check between. Here’s an example of that:</p><pre>let studentAnswer = &#39;D&#39;;</pre><pre>switch(studentAnswer) {<br> case &#39;A&#39;:<br> console.log(&#39;A is wrong.&#39;);<br> break;<br> case &#39;B&#39; :<br> console.log(&#39;B is wrong.&#39;);<br> break;<br> case &#39;C&#39;:<br> console.log(&#39;C is correct.&#39;);<br> break;<br> default:<br> console.log(&#39;Not a real answer.&#39;);<br>}</pre><h3>Part #21: For loop</h3><p>For loops allow you to execute a block of code a number of times. The amount is dictated by you through setting three conditionals. Here’s an example of a simple for loop:</p><pre>for (let i = 0; i &lt; 5; i++) {<br> console.log(i);<br>}</pre><pre>--&gt;<br>0<br>1<br>2<br>3<br>4</pre><p>In this lecture you’ll see how you can calculate the total sum of an array of numbers using a for loop.</p><h3>Part #22: While &amp; do while</h3><p>If you want to execute a piece of code multiple times but don’t know <em>how</em> many times, then a while loop might be exactly what you need. It allows you to execute a block of code as long as a certain condition is met.</p><pre>let count = 0;</pre><pre>while (count &lt; 20) {<br> count++;<br>}</pre><pre>console.log(count);</pre><p>You’ll also learn about the do/while statement.</p><h3>Part #23: Functions</h3><p>Finally, you’ll need to learn about functions, as it’s critical for any application. You’ll learn the syntax of functions, how they’re called and how you can add parameters to them.</p><pre>function add() {<br> console.log(&#39;add&#39;);<br>}</pre><pre>add();</pre><pre>--&gt; &#39;add&#39;</pre><p>And when you’ve finished this lecture you’re done with the syllabus for this course, as you know have an understanding of the code concepts in JavaScript.</p><h4>Part #24: What’s next?</h4><figure><a href="https://scrimba.com/g/gintrotojavascript"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*H3vOeCjQV7IlHFqbjLmm_A.png" /></a></figure><p>Dylan ends the course with telling you a little bit about what you can do next in order to further improve your JavaScript skills! Remember, this course was just the beginning.</p><p>Once you’ve reached this far, I’d strongly encourage you to continue, as you’re on track to gain a highly valuable skill in todays society.</p><p>Not only can JavaScript help you improve your career, but you’ll also be able to build products on your own!</p><p>So be sure to <a href="https://scrimba.com/g/gintrotojavascript">take this free course today</a>. You’ll be able to build projects in JavaScript on your own before you know it!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e7777baf86fb" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/want-to-learn-javascript-heres-a-free-24-part-course-to-get-you-started-e7777baf86fb">Want to learn JavaScript? Here’s a free 24-part course to get you started.</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]>
            </content:encoded>
        </item>
    </channel>
</rss>