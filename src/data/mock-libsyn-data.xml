<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<channel>
		<atom:link href="https://freecodecamp.libsyn.com/rss" rel="self" type="application/rss+xml"/>
		<title>The freeCodeCamp Podcast</title>
		<pubDate>Mon, 30 Apr 2018 09:00:00 +0000</pubDate>
		<lastBuildDate>Mon, 30 Apr 2018 09:16:58 +0000</lastBuildDate>
		<generator>Libsyn WebEngine 2.0</generator>
		<link>https://www.freecodecamp.org</link>
		<language>en</language>
		<copyright><![CDATA[https://terms-of-service.freecodecamp.org/]]></copyright>
		<docs>https://www.freecodecamp.org</docs>
		<managingEditor>quincy@freecodecamp.org (quincy@freecodecamp.org)</managingEditor>
		<itunes:summary><![CDATA[The official podcast of the freeCodeCamp open source community.

Learn to code with free online courses, programming projects, and interview preparation for developer jobs.]]></itunes:summary>
		<image>
			<url>https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg</url>
			<title>The freeCodeCamp Podcast</title>
			<link><![CDATA[https://www.freecodecamp.org]]></link>
		</image>
		<itunes:author>freeCodeCamp</itunes:author>
		<itunes:keywords>technology</itunes:keywords>
		<itunes:category text="Technology"></itunes:category>
		<itunes:category text="Education">
			<itunes:category text="Training"/>
		</itunes:category>
		<itunes:category text="Technology">
			<itunes:category text="Software How-To"/>
		</itunes:category>
		<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
		<itunes:explicit>clean</itunes:explicit>
		<itunes:owner>
			<itunes:name><![CDATA[Quincy Larson]]></itunes:name>
			<itunes:email>quincy@freecodecamp.org</itunes:email>
		</itunes:owner>
		<description><![CDATA[The official podcast of the freeCodeCamp open source community.

Learn to code with free online courses, programming projects, and interview preparation for developer jobs.

]]></description>
		<itunes:subtitle><![CDATA[]]></itunes:subtitle>
		<itunes:type>episodic</itunes:type>
				<item>
			<title>Ep. 28 - How to land a six figure job in tech with no connections</title>
			<itunes:title>How to land a six figure job in tech with no connections</itunes:title>
			<pubDate>Mon, 30 Apr 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[4cd2a7b16521c0233cc2d14c52787a23]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-28-how-to-land-a-six-figure-job-in-tech-with-no-connections]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Austin was stuck in a job he hated. But given his non-traditional background and lack of Silicon Valley network, he knew he'd have to work extra hard to launch a career in tech. In this podcast, he details the steps he took to land interviews at Google, Twitter, and other prestigious companies that led to his dream job.</p> <p>Written by Austin Belcak: <a href= "https://twitter.com/janephilipps">https://twitter.com/abelcak</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2F8uE2H">https://fcc.im/2F8uE2H</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Shortly after college, I began chasing something many people want but few ever get: a job they love.</p> <p>I left school with a biology degree and a job in the medical field. It took me about two weeks to realize I absolutely hated it.</p> <p>I was working 6 days a week, waking up at 3:30am in order to be at the hospital by 5:30. Making next to nothing, I quickly racked up $10,000 in credit card debt. I knew I deserved more, but I had no idea how to get it.</p> <p>I saw people in my graduating class living in New York or San Francisco, making six figure salaries and going on exotic trips. I often wondered what they had figured out that I hadn’t. What was their secret?</p> <p>I dedicated the next 12 months of my life to finding the answer. In this article I’m going to share everything I learned along the way.</p> <p>First, I’ll walk you through the exact process you can use to get a job interview at your dream company even if you don’t know a single person there — you won’t even need to apply online.</p> <p>Next, I’ll teach you how to ace the interview process, get the offer, and land a salary you deserve.</p> <p>I personally used these exact strategies to get interviews and offers at companies like Google, Uber and Twitter. They are also the same tactics that my students have used to land interviews and offers at Google, Microsoft, Slack, Deloitte, PWC, American Express, ESPN and more.</p> <p>Referrals Are The Most Effective Way To Get Hired<br /> A recent LinkedIn survey on talent trends showed that 1 in 3 people were actively looking for new work. As of January 2017, the population of employed people in the United States was 123 million. This means that, at any given time, 41 million people are looking for work.</p> <p>On average, an open role at a well known company gets ~250 resumes. 75% of these resumes came from some sort of online portal (like the company’s online application, or a career aggregator site like Indeed.com).</p> <p>Once submitted, these applications are screened by Applicant Tracking software that scans them for keywords. At the end of the process, ~5 resumes make it into the hands of a recruiter. That’s 2% at best.</p> <p>Additionally, The Wall Street Journal published an article stating that 80% of jobs aren’t advertised online.</p> <p>That means that 75% of people applying for jobs are all competing for 20% of the opportunities!</p> <p>Oops.</p> <p>When it comes to getting hired, referrals are the most effective way to secure an interview and land the offer. Here are some stats from a recent Jobvite survey:</p> <p>40% of hires come from referrals, the next largest channel is via career sites at 21% (almost half as many)</p> <p>Referrals get hired in an average of 3 weeks while other applicants take up to 7 weeks</p> <p>Referrals get paid more on average than cold applicants</p> <p>40% of hires come from referrals (courtesy of Jobvite.com)</p> <p>Finally, over 50% of six figure jobs are filled via referral.</p> <p>Moral of the story? If we want to get hired at our dream job, we need to find another way to get a referral from an insider.</p> <p>The problem is, many of us don’t happen to have friends or family working at places like Google.</p> <p>Part 1: How To Get A Job Interview When You Don’t Know A Single Person At The Company</p> <p>Know Your Role (And Find It)</p> <p>The first step is having a solid idea of the specific role you are looking for, down to the company and title if possible.</p> <p>Next, you need to make sure that role is available. For today, let’s assume that you want to be an Account Manager in the Technology B2B vertical at Google. Looks like a spot is open in New York:</p> <p>Locate Potential Influencers</p> <p>Next, you are going to find someone who not only knows about the role, but could potentially have an impact on hiring for it. Time to fire up LinkedIn.</p> <p>In the search bar, plug in the company name + all of the information I highlighted above (title, vertical/industry, preferred city). However, before you hit “Search,” we need to remember that you are looking for someone who can influence the hiring process.</p> <p>With that in mind, I usually use a title that is one level up from the position that I’m looking for.</p> <p>If you’re not familiar with title hierarchy structures in the corporate world, here is a quick guide (if you are already familiar with how titles are structured, feel free to skip this section):</p> <p>Side Note: A Brief Guide To Company Organizational Structures By Title</p> <p>Every company has a hierarchy starting at the top with the CEO/Founder all the way down to the entry level employees. When researching companies, especially people to speak to within those companies, it helps to know where certain titles fit in the food chain. That way you can ensure you are talking to the right person.</p> <p>Here is a general list of titles that fits almost any company, starting at the top:</p> <p>C-­Level (CEO, CTO, CFO, COO, etc.)<br /> Vice President (VP)<br /> Director<br /> Senior Manager<br /> Manager<br /> Coordinator (Entry Level)<br /> Associates, Executives, and Seniors</p> <p>In many companies, the above titles have some sort of variation that allows for greater segmentation within that level. The most common forms of this are Associate, Executive, and Senior. Here is what those mean:</p> <p>Associate: this title is usually given to someone who is halfway between positions for some reason (maybe there is typically a 4 year gap between levels and they are 2 years in). A person with Associate in their title is usually one notch below a person with the original title.</p> <p>For example, an Associate Account Manager would most likely be one level below an Account Manager.</p> <p>Senior: ­this title is the more experienced version of an Associate. People with Senior in their title are usually one notch above the original title. For example, a Senior Account Manager would be one notch above an Account Manager.</p> <p>Executive: ­this title is usually given to people who are very senior, or around the level of Vice President. The two most common cases are</p> <p>Sales Executive/Account Executive (synonymous terms for a senior salesperson) or Executive Vice President who is two notches above a Vice</p> <p>President and one notch above a Senior Vice President. That should be all the info you need to make an educated decision around where people stand within the company you are researching.</p> <p>Now that you’re familiar with the company structure, let’s get back to finding that influencer who can help you land this job.</p> <p>Since we are looking for an Account Manager role, the next step up would be Senior Account Manager so your LinkedIn search would look like this:</p> <p>Our first result? A Senior Account Manager who works in B2B at Google:</p> <p>Obtaining Contact Info</p> <p>Now we’re going to reach out and set up a meeting. It’s best to do these in person but over the phone can work well if you’re dream job is in another state or country.</p> <p>In order to get in touch with our influencer, we’re going to need their contact info. Here are 3 strategies you can use to find almost anyone’s corporate email address:</p> <p>LinkedIn</p> <p>This one is obvious but it’s a big time saver and definitely worth the 10 seconds it takes to check.</p> <p>On the person’s profile, right under their picture, there can be a button labeled “Contact Info” (I say “can be” because people have the option to remove it). Occasionally, people will have their email address listed right there — voila!</p> <p>If not, let’s move right along…</p> <p>Reverse Lookup</p> <p>Head over to Voila Norbert and enter the first and last name of the person you are searching for, as well as their company’s website. For example, if we were trying to find Larry Page’s email, our form would look like this:</p> <p>Once it spits out their email you can confirm it using MailTester.</p> <p>Matching Formats</p> <p>If that doesn’t work, you can try finding someone else’s email at the company and use that format reverse engineering your target email address.</p> <p>For example, using Larry Page again, if I know that my buddy John Smith’s email is john at google.com then I can assume that Larry’s email is larry at google.com.</p> <p>The easiest way to get a hold of a company email address is to reach out to someone in sales or media because both of these departments usually have inbound lead forms and people on the other end ready to pounce on those leads.</p> <p>We can also use our LinkedIn method here and target salespeople.</p> <p>Salespeople almost always have their corporate email listed on their LinkedIn because it’s a free win for them. If someone is looking for their product and then finds them on LinkedIn, boom — they just got an effortless inbound lead.</p> <p>Once you have the format, you can use MailTester to confirm your target email address.</p> <p>Research, Research, Research</p> <p>Now that you have your potential influencer, it’s time to do some research so you can effectively reach out and build that relationship.</p> <p>Start with the usual suspects — LinkedIn, Facebook, Twitter, Instagram, etc. and look for common points of interest. To be honest, most people are better at this online research thing than I am, so I’ll get back to the meat here.</p> <p>One thing I will say is, don’t skimp. The more you get to know this person beforehand, the better your chances of landing a referral from them.</p> <p>Some people have said to me, “Austin, isn’t this a little weird? I feel like I’m kind of stalking this person.” I totally get it. However, this information is critical for quickly building a strong relationship and getting that referral.</p> <p>Also, in my experience, people tend to expect that you’ve done some research on them. The key is to understand what is kosher to bring up out of the blue and what isn’t.</p> <p>People are OK with you checking out their LinkedIn, but they may be a little weirded out if you mention that picture from Saturday’s Bar Crawl you saw on Facebook.</p> <p>My general rule of thumb is this: if it exists on LinkedIn, it’s fair game to bring up. If you found it somewhere else (Twitter, Facebook, etc.) use a different method. For example, if I see that my influencer is a skiing fanatic, I may bring up that I went on a ski trip a few weeks beforehand.</p> <p>Sending The Email</p> <p>Now that you have your potential influencer and their contact info, it’s time to reach out. Not only is this one of the scarier parts of this process, it is also the most pivotal.</p> <p>To help you get past that hump, I’ve included the exact email script that I used to reach out to people. In this case, I’m reaching out to<br /> Tim who works at Google:</p> <p>Subject: Quick Question</p> <p>Hi Tim,</p> <p>My name is Austin and I currently work at Cultivated Culture. I was browsing through LinkedIn and came across your information — I hope you don’t mind me reaching out of the blue here.</p> <p>I saw that you have extensive experience in Google’s Technology B2B vertical and I’m very interested in learning more about that space. I would love to have the opportunity to run some questions by you, as well as tap into any advice you may have given your knowledge of the industry.</p> <p>I know that your time is extremely valuable so please don’t feel to need to respond in depth. If you do have 5 minutes to chat, I would really appreciate it.</p> <p>Best,</p> <p>Austin</p> <p>There are a few key points to the email above:</p> <p>Address the person you are emailing by name</p> <p>State who you are and make it personable</p> <p>Include some flattery that positions the person as an “expert”</p> <p>As for the subject, Fast Company did a study where they emailed 1,000 C-level executives from Fortune & Inc 500 companies. They found that the subject line “Quick Question” made up 66.7% of total replies. I saw similar results.</p> <p>All of that said, this script is just a framework. You will most likely need to tweak your emails to fit the situation.</p> <p>When that time comes, I recommend checking out Sam Parr’s incredible guide on how to cold email like a boss (Sam has started conversations with Jeff Bezos and Brian Lee (aka Jessica Alba’s Honest co-founder) via cold email). It’s the same guide I used to help craft my email templates.</p> <p>Now hit Send!</p> <p>Prepare For Your Meeting</p> <p>In order to prepare, we have to know what we’re preparing for. The goal of your meeting is to position your influencer as an expert, make them feel special, and build a relationship.</p> <p>You should not and will not mention anything about the opening at their company. People innately enjoy helping others and if you follow the steps above, they will bring this up naturally.</p> <p>You will want to prepare a list of questions that gets them to open up about themselves and the company. I like to ask them several softballs to get things warmed up and then hit them with a few questions they are guaranteed to remember.</p> <p>Here is a quick set that I’ve had success with in the past (I’ve found the last one really seems to stick):</p> <p>I saw you worked at [Previous Companies]. How did you end up going from [First Industry] to becoming interested in [Current Company]?</p> <p>You hear a lot about [Current Company] in the news, but I’d love to hear more about why you love working there. What’s your favorite part?</p> <p>What is one totally unexpected lesson you’ve learned from working at [Current Company]?</p> <p>The “Million Dollar” Question</p> <p>Regardless of the questions you choose, there is one that you must always be sure to ask:</p> <p>“What is the biggest challenge your team is facing right now?”</p> <p>Really dig in here, get them to be specific. This information is going to be critical in helping you land a referral from this person, as well as getting the offer farther down the road.</p> <p>Your Homework: Adding Value (In A Big Way)</p> <p>Okay, so you met with your influencer, things went great, and you identified a major pain point that the team is having. Now we’re going to focus on that last piece.</p> <p>Over the next week you are going to research the crap out of your influencer’s problem. Then you are going to come up with a solution and draft up a proposal for how you would solve it. Your proposal should include:</p> <p>A summary of the problem (to illustrate that you understand their pain)</p> <p>A step-by-step framework of how you would solve this problem</p> <p>A brief outline of how your skill set positions you as an asset to implement that solution</p> <p>Truthfully, this process deserves a post of its own but this should give you a good idea of what you need to do. If you’re the type of person that likes concrete examples, check out this guerrilla usability test that Raghav Haran ran for Airbnb.</p> <p>Once you have all of this information, consolidate it into a Word document, head over to Upwork, and hire a graphic designer to make your proposal look amazing. If you’ve never hired on Upwork before, here is an amazing guide by Dave Nevogt on how to do it right.</p> <p>Following Up With Your Proposal</p> <p>Now we’re going to reach back out to our influencer with the proposal. Here’s the template I used:</p> <p>Hi [Influencer],</p> <p>Thanks again for taking the time out to chat last week.</p> <p>I spent a lot of time thinking about what you said regarding [team’s biggest challenge]. In fact, I created a short framework that should help you solve it. Please find that attached.</p> <p>If you have some time, I would love to chat about it in more detail.</p> <p>Please let me know if you have any questions, I’m looking forward to hearing your thoughts!</p> <p>Best,</p> <p>Austin</p> <p>It’s very important that you do not mention the open position in any of your emails or the proposal. Be patient and wait for their response. When they do get back to you, they will not only bring up the opening but they will ask you if you’re interested.</p> <p>Kindly accept and play it cool. You’re in!</p> <p>Part 2: How To Breeze Through The Interview Process</p> <p>Fast forward — our influencer passed along our resume to HR and they have reached out to set up a phone screen. Once we get past that, we’ll be on to interviewing with the team, and then getting the job.</p> <p>A note to developers: The advice below does not cover technical interviews, which are typically required for developer/software roles.</p> <p>However, the advice below will help create more time to prepare for technical interviews by minimizing the amount of preparation needed for other parts of the interview process. If you are applying for a development role, I suggest you read Cracking The Coding Interview by Gayle Laakmann McDowell.</p> <p>Interviews can be daunting, especially at companies like Google, Amazon, or Uber. I’m sure you’ve read the horror stories about crazy questions they ask people like “Quick — How many golf balls can fit inside a school bus,” or, “how many gas stations are there in Manhattan?”</p> <p>The truth is, most of these companies have done away with those questions. They crunched the numbers and found that the answers didn’t correlate with high employee performance (shocker, I know). In fact, Google’s own Senior Vice President of People Operations called them a “complete waste of time.”</p> <p>These companies have since reverted back to the standard style of interviews, which is great for us because it makes it much easier to identify patterns. We can essentially “guess” what questions will be on the test and prepare answers that will blow our interviewers away (it works way better than it did in college, I swear).</p> <p>Here is the process I used to prepare for each one.</p> <p>Nailing The Basics: Questions You’ll Get In Every Interview</p> <p>According to renowned career guru Penelope Trunk, one of the easiest ways to be a better interviewer is to prepare for the most obvious questions. You may be saying “well duh,” but you’d be surprised by how many people spread themselves too thin by trying to prepare answers to every possible question.</p> <p>99% of the interviews you go on will follow the exact same template. If you can master the format, your confidence will skyrocket and you’ll be prepared for almost any situation you get thrown into.</p> <p>The Universal Job Interview Format:</p> <p>Tell me about yourself (your experience, why you are interested in this role, etc.)<br /> A mix of behavioral questions, which we’ll dive into shortly<br /> What questions do you have for me (the interviewer)?<br /> Let’s tackle each individually.</p> <p>Tell Me About Yourself</p> <p>This is your first impression. More importantly, it’s the only part of the interview that you totally control. Do NOT rattle off your resume like a grocery list.</p> <p>In order to nail this part you need to craft an interesting story — your story. You want it to be concise (around 2–3 minutes) and you need to think about what you want to convey. I recommend:</p> <p>Choosing 2–3 themes to build your story around (for me, those themes were Persistence, Agility, and Success)</p> <p>Including quantitative metrics whenever possible</p> <p>Addressing the question of why you want to leave your current position (they are going to ask you this anyways, addressing it early shows that you’re aware it’s a concern of theirs and helps put them at ease)</p> <p>To help get you started, here is what my story looked like. To give you some context, I was a biology major who was interested in landing a job in digital marketing:</p> <p>Growing up, like most people, I wanted to be a doctor. I went to [college] where I majored in biology and planned my course to medical school. Not long after, I decided that pre-med wasn’t for me. I wanted to get into digital marketing, and I wanted to be in New York. I set my sights on this goal and created a plan that would get me there.</p> <p>In 2013, I graduated with my biology degree and took a job in medical device sales where I worked from 5:30am — 12:30pm covering surgical cases in the operating room. Then, every day, I would come home and study digital marketing until 8:00pm. In order to gain relevant experience, I got certified in Google Analytics & AdWords and created my own consulting firm that focused on using search engine marketing to generate leads for private golf communities. We were able to increase home sales by an average of 20% while reducing the cost per lead by around 10%. Armed with my new credentials, I began to look for positions in New York.</p> <p>Eventually, I was offered a position at my current company (a promotional analytics company in New York). During my tenure there I have grown my book of business by 467%, spearheaded the creation of an internal group dedicated to marketing the company on the internet, and helped close the second largest deal in company history.</p> <p>However, the company has restructured several times since I was brought on. I’ve had 3 different managers over the past year, as well as 3 titles with different sets of responsibilities. I’m looking for something a bit more stable and [company I am interviewing at] has been somewhere that I have wanted to work since I got into this industry. I’m really excited to have this opportunity.</p> <p>Pro Tip: You are telling a story. Don’t be afraid to embellish a bit. I’m not saying you should lie or make up stories, but you want to sell yourself and you can bet your butt that your competition isn’t afraid to inflate their credentials.</p> <p>Behavioral Questions</p> <p>Next up is the dreaded set of behavioral questions. The ones meant to tease out your thought process and your ability to be a “team player.” This is the part where our educated “guesses” are going to come in handy.</p> <p>The behavioral section is broken down into two parts that I call Standard Questions and Company Specific Questions. Let’s start with the former.</p> <p>Standard Questions</p> <p>You are going to be asked a variation of one, if not all, of these questions in every single interview you go to:</p> <p>Why do you want to work for us?</p> <p>Tell me about a time you exhibited leadership</p> <p>Tell me about a time where you had to work as a team</p> <p>Tell me about a time you’ve had to work with a difficult person, or difficult people</p> <p>Tell me about a time you failed</p> <p>Tell me about a time you overcame an obstacle</p> <p>Tell me about a time when you had success</p> <p>If you can answer these 6 questions, you can handle 9 out of 10 interviews with no other preparation and be totally fine. Just follow the same set of rules I mentioned above in the Tell Me About Yourself section:</p> <p>Craft a concise story</p> <p>Make sure to include quantitative metrics that illustrate your success</p> <p>Anticipate and address objections</p> <p>Company Specific Questions</p> <p>These are questions that fall in the middle of the 7 listed above and “why are man hole covers round?” Never fear though, we can anticipate these too.</p> <p>Head over to GlassDoor. If you’ve never heard of GlassDoor, it’s a great resource for any job seeker that includes salaries, reviews, and interview information for almost any company in the world.</p> <p>First, you are going to search for the position you’re applying for. In keeping with our theme, we’ll search for “Google” under Companies & Reviews:</p> <p>Next, we’re going to click on the “Interviews” Tab:</p> <p>Then scroll down and click on “Filter Interviews” which will bring up some advanced settings. Here we’ll type in the title of the job we want (Account Manager, in this case) and the location (New York, NY). We’ll also select “Received Offer” because the people who didn’t receive offers tend to be slightly, ahem, biased:</p> <p>This will pull up a list of reviews from everyone who interviewed and received an offer for that position. The general comments are really helpful, but we want to focus on a section called Interview Questions towards the bottom. I usually comb through 10–15 of these and add all of the interview questions into a Word doc so I can answer them later:</p> <p>Now you have your second set of questions to prepare for.</p> <p>What Questions Do You Have For Me?</p> <p>Finally, once they are done peppering you with questions, your interviewer will ask if you have any questions for them. This is the most crucial part of the interview.</p> <p>Why? Because so many people neglect it. If you can ask some questions that are even slightly outside of the box, I’ve found that really sticks with the interviewer more than any other part of the meeting.</p> <p>After every interview I’ve been on, I asked for feedback. Without fail, the interviewer made a positive comment about the questions I asked. The good news for you is that I asked the same exact questions in every single one. Here they are:</p> <p>What is your favorite part about working here?</p> <p>What is the biggest challenge you are facing right now?</p> <p>Let’s say that, in one year, you are looking back on this hire. What has that person done to exceed expectations on every level?</p> <p>Ask about a current event (for example — I saw that [Competitor X] came out with this product. How do you see that affecting your business?)</p> <p>What is the most unexpected lesson you’ve learned while working at [company]?</p> <p>Tell me a little bit more about you, what do you like to do outside of work?</p> <p>These questions work because they are based on specific principles of behavioral psychology. They break down barriers and help build a positive association in your interviewer’s mind. If you’re interested in the details, you can read more about it here.</p> <p>Say Thank You</p> <p>While we’re on the subject, be absolutely sure to send a thank you note to everyone you interviewed with. Also include a personal touch to each one (something that you gained from that last question).</p> <p>Many people I talk to say “but I don’t have their email.” Ask for it! At the end of every interview always, always ask for a business card or write down the person’s email in your notebook.</p> <p>If you forget, try using the techniques I outlined above for finding people’s emails and you should be fine.</p> <p>Part 3 — Following Up & What To Do If They Say No</p> <p>This is one of the most common mistakes I see from job applicants. I understand how nerve wracking it is to sit there and wait while everything is completely out of your hands.</p> <p>One of the toughest things I had to learn throughout my interview process was that, while this is a HUGE deal to you, it’s really just another agenda item on the hiring manager’s schedule.</p> <p>They will get back to you, and if they don’t? You don’t want to work for someone who doesn’t have the courtesy of replying to the people they do business with.</p> <p>When Can I Send Them A Reminder?</p> <p>The rule of thumb is one business week. If you interviewed on a Tuesday, wait until the next Tuesday to email them (as J.T. O'Donnell says, never send a nudge on a Monday). When you do, don’t push or be blunt. Keep it short and sweet:</p> <p>Hi [Interviewer],</p> <p>I hope you had a great week!</p> <p>I wanted to quickly follow up and see if there was anything else I could help with regarding the application process. If so, please let me know.</p> <p>Best,</p> <p>Austin</p> <p>That’s it. If they don’t respond to that after another 3–4 days, you have your answer and it’s time to move on.</p> <p>What Happens If They Say No?</p> <p>Ugh. The worst case scenario. Don’t get down just yet though, we’re not done here.</p> <p>I have this quality where I have trouble taking “no” as an answer. When I was interviewing with Google, the initial screener told me that she wasn’t going to put me through because she “didn’t think I was qualified, and didn’t want to waste the team’s time.”</p> <p>I was not happy. So I sent her this:</p> <p>Hi [Recruiter],</p> <p>Thank you again for carving out the time to speak this afternoon. I really appreciate your feedback, and I wanted to add one final note:<br /> <br /> I completely understand your concerns regarding my experience with [skill]. You are correct that I didn’t have much experience with that at [previous company]. That said, this doesn’t stem from an inability to produce results, but rather a lack of opportunity to do so.</p> <p>While my experience on paper may not match up to the initial expectations of the position’s description, I have do have two qualities that work in my favor: I am an extremely efficient learner, and am also very effective at translating those learnings into practice. Second, I’m much more tenacious than your average individual. My career has hinged on these two qualities.<br /> <br /> I left college with no digital experience and a biology degree — all of my digital knowledge was obtained through self study. I spent 8 months selling myself without the on-paper experience to back it up. When I was finally given the opportunity to apply my knowledge in a business setting, I playing a critical role in landing the company’s 2nd largest deal in history. I am confident that I can have the same success in this role. I have the resources necessary to learn what I need in order to be successful at [company], and am prepared to do whatever it takes to make that happen.<br /> <br /> I understand that [company’s] interview process is extremely challenging, and that only the top talent ends up with an offer letter at the end. I also believe that I am worthy of a shot at that letter. [Company] is known for hiring people who excel at the intangibles, as well the ability to learn new things and apply them to existing knowledge. That is my forte.<br /> <br /> I am not asking for an offer. I am simply asking for the opportunity to speak with the hiring manager to make my case for the position. I’m sure you will find the best person for the position, I would just like to have a legitimate shot at being that person. If you give me that chance, my next set of answers will not disappoint.<br /> <br /> Thank you again for your continued consideration.<br /> Best,</p> <p>Austin</p> <p>Now that may be a little aggressive…</p> <p>Ok, it was pretty aggressive. But she wrote me back an hour later and pushed me through to the next round! Mission accomplished.</p> <p>The moral of the story here is, don’t give up if you get a “No.” Try to identify why you were turned down and then send a note to hiring manager addressing those items (feel free to copy mine).</p> <p>Taking Action</p> <p>There you have it. The exhaustive, step-by-step guide to landing an interview and then getting an offer from the company of your dreams. What are you waiting for? Get out there and start researching!</p>]]></description>
			<content:encoded><![CDATA[<p>Austin was stuck in a job he hated. But given his non-traditional background and lack of Silicon Valley network, he knew he'd have to work extra hard to launch a career in tech. In this podcast, he details the steps he took to land interviews at Google, Twitter, and other prestigious companies that led to his dream job.</p> <p>Written by Austin Belcak: <a href= "https://twitter.com/janephilipps">https://twitter.com/abelcak</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2F8uE2H">https://fcc.im/2F8uE2H</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Shortly after college, I began chasing something many people want but few ever get: a job they love.</p> <p>I left school with a biology degree and a job in the medical field. It took me about two weeks to realize I absolutely hated it.</p> <p>I was working 6 days a week, waking up at 3:30am in order to be at the hospital by 5:30. Making next to nothing, I quickly racked up $10,000 in credit card debt. I knew I deserved more, but I had no idea how to get it.</p> <p>I saw people in my graduating class living in New York or San Francisco, making six figure salaries and going on exotic trips. I often wondered what they had figured out that I hadn’t. What was their secret?</p> <p>I dedicated the next 12 months of my life to finding the answer. In this article I’m going to share everything I learned along the way.</p> <p>First, I’ll walk you through the exact process you can use to get a job interview at your dream company even if you don’t know a single person there — you won’t even need to apply online.</p> <p>Next, I’ll teach you how to ace the interview process, get the offer, and land a salary you deserve.</p> <p>I personally used these exact strategies to get interviews and offers at companies like Google, Uber and Twitter. They are also the same tactics that my students have used to land interviews and offers at Google, Microsoft, Slack, Deloitte, PWC, American Express, ESPN and more.</p> <p>Referrals Are The Most Effective Way To Get Hired A recent LinkedIn survey on talent trends showed that 1 in 3 people were actively looking for new work. As of January 2017, the population of employed people in the United States was 123 million. This means that, at any given time, 41 million people are looking for work.</p> <p>On average, an open role at a well known company gets ~250 resumes. 75% of these resumes came from some sort of online portal (like the company’s online application, or a career aggregator site like Indeed.com).</p> <p>Once submitted, these applications are screened by Applicant Tracking software that scans them for keywords. At the end of the process, ~5 resumes make it into the hands of a recruiter. That’s 2% at best.</p> <p>Additionally, The Wall Street Journal published an article stating that 80% of jobs aren’t advertised online.</p> <p>That means that 75% of people applying for jobs are all competing for 20% of the opportunities!</p> <p>Oops.</p> <p>When it comes to getting hired, referrals are the most effective way to secure an interview and land the offer. Here are some stats from a recent Jobvite survey:</p> <p>40% of hires come from referrals, the next largest channel is via career sites at 21% (almost half as many)</p> <p>Referrals get hired in an average of 3 weeks while other applicants take up to 7 weeks</p> <p>Referrals get paid more on average than cold applicants</p> <p>40% of hires come from referrals (courtesy of Jobvite.com)</p> <p>Finally, over 50% of six figure jobs are filled via referral.</p> <p>Moral of the story? If we want to get hired at our dream job, we need to find another way to get a referral from an insider.</p> <p>The problem is, many of us don’t happen to have friends or family working at places like Google.</p> <p>Part 1: How To Get A Job Interview When You Don’t Know A Single Person At The Company</p> <p>Know Your Role (And Find It)</p> <p>The first step is having a solid idea of the specific role you are looking for, down to the company and title if possible.</p> <p>Next, you need to make sure that role is available. For today, let’s assume that you want to be an Account Manager in the Technology B2B vertical at Google. Looks like a spot is open in New York:</p> <p>Locate Potential Influencers</p> <p>Next, you are going to find someone who not only knows about the role, but could potentially have an impact on hiring for it. Time to fire up LinkedIn.</p> <p>In the search bar, plug in the company name + all of the information I highlighted above (title, vertical/industry, preferred city). However, before you hit “Search,” we need to remember that you are looking for someone who can influence the hiring process.</p> <p>With that in mind, I usually use a title that is one level up from the position that I’m looking for.</p> <p>If you’re not familiar with title hierarchy structures in the corporate world, here is a quick guide (if you are already familiar with how titles are structured, feel free to skip this section):</p> <p>Side Note: A Brief Guide To Company Organizational Structures By Title</p> <p>Every company has a hierarchy starting at the top with the CEO/Founder all the way down to the entry level employees. When researching companies, especially people to speak to within those companies, it helps to know where certain titles fit in the food chain. That way you can ensure you are talking to the right person.</p> <p>Here is a general list of titles that fits almost any company, starting at the top:</p> <p>C-­Level (CEO, CTO, CFO, COO, etc.) Vice President (VP) Director Senior Manager Manager Coordinator (Entry Level) Associates, Executives, and Seniors</p> <p>In many companies, the above titles have some sort of variation that allows for greater segmentation within that level. The most common forms of this are Associate, Executive, and Senior. Here is what those mean:</p> <p>Associate: this title is usually given to someone who is halfway between positions for some reason (maybe there is typically a 4 year gap between levels and they are 2 years in). A person with Associate in their title is usually one notch below a person with the original title.</p> <p>For example, an Associate Account Manager would most likely be one level below an Account Manager.</p> <p>Senior: ­this title is the more experienced version of an Associate. People with Senior in their title are usually one notch above the original title. For example, a Senior Account Manager would be one notch above an Account Manager.</p> <p>Executive: ­this title is usually given to people who are very senior, or around the level of Vice President. The two most common cases are</p> <p>Sales Executive/Account Executive (synonymous terms for a senior salesperson) or Executive Vice President who is two notches above a Vice</p> <p>President and one notch above a Senior Vice President. That should be all the info you need to make an educated decision around where people stand within the company you are researching.</p> <p>Now that you’re familiar with the company structure, let’s get back to finding that influencer who can help you land this job.</p> <p>Since we are looking for an Account Manager role, the next step up would be Senior Account Manager so your LinkedIn search would look like this:</p> <p>Our first result? A Senior Account Manager who works in B2B at Google:</p> <p>Obtaining Contact Info</p> <p>Now we’re going to reach out and set up a meeting. It’s best to do these in person but over the phone can work well if you’re dream job is in another state or country.</p> <p>In order to get in touch with our influencer, we’re going to need their contact info. Here are 3 strategies you can use to find almost anyone’s corporate email address:</p> <p>LinkedIn</p> <p>This one is obvious but it’s a big time saver and definitely worth the 10 seconds it takes to check.</p> <p>On the person’s profile, right under their picture, there can be a button labeled “Contact Info” (I say “can be” because people have the option to remove it). Occasionally, people will have their email address listed right there — voila!</p> <p>If not, let’s move right along…</p> <p>Reverse Lookup</p> <p>Head over to Voila Norbert and enter the first and last name of the person you are searching for, as well as their company’s website. For example, if we were trying to find Larry Page’s email, our form would look like this:</p> <p>Once it spits out their email you can confirm it using MailTester.</p> <p>Matching Formats</p> <p>If that doesn’t work, you can try finding someone else’s email at the company and use that format reverse engineering your target email address.</p> <p>For example, using Larry Page again, if I know that my buddy John Smith’s email is john at google.com then I can assume that Larry’s email is larry at google.com.</p> <p>The easiest way to get a hold of a company email address is to reach out to someone in sales or media because both of these departments usually have inbound lead forms and people on the other end ready to pounce on those leads.</p> <p>We can also use our LinkedIn method here and target salespeople.</p> <p>Salespeople almost always have their corporate email listed on their LinkedIn because it’s a free win for them. If someone is looking for their product and then finds them on LinkedIn, boom — they just got an effortless inbound lead.</p> <p>Once you have the format, you can use MailTester to confirm your target email address.</p> <p>Research, Research, Research</p> <p>Now that you have your potential influencer, it’s time to do some research so you can effectively reach out and build that relationship.</p> <p>Start with the usual suspects — LinkedIn, Facebook, Twitter, Instagram, etc. and look for common points of interest. To be honest, most people are better at this online research thing than I am, so I’ll get back to the meat here.</p> <p>One thing I will say is, don’t skimp. The more you get to know this person beforehand, the better your chances of landing a referral from them.</p> <p>Some people have said to me, “Austin, isn’t this a little weird? I feel like I’m kind of stalking this person.” I totally get it. However, this information is critical for quickly building a strong relationship and getting that referral.</p> <p>Also, in my experience, people tend to expect that you’ve done some research on them. The key is to understand what is kosher to bring up out of the blue and what isn’t.</p> <p>People are OK with you checking out their LinkedIn, but they may be a little weirded out if you mention that picture from Saturday’s Bar Crawl you saw on Facebook.</p> <p>My general rule of thumb is this: if it exists on LinkedIn, it’s fair game to bring up. If you found it somewhere else (Twitter, Facebook, etc.) use a different method. For example, if I see that my influencer is a skiing fanatic, I may bring up that I went on a ski trip a few weeks beforehand.</p> <p>Sending The Email</p> <p>Now that you have your potential influencer and their contact info, it’s time to reach out. Not only is this one of the scarier parts of this process, it is also the most pivotal.</p> <p>To help you get past that hump, I’ve included the exact email script that I used to reach out to people. In this case, I’m reaching out to Tim who works at Google:</p> <p>Subject: Quick Question</p> <p>Hi Tim,</p> <p>My name is Austin and I currently work at Cultivated Culture. I was browsing through LinkedIn and came across your information — I hope you don’t mind me reaching out of the blue here.</p> <p>I saw that you have extensive experience in Google’s Technology B2B vertical and I’m very interested in learning more about that space. I would love to have the opportunity to run some questions by you, as well as tap into any advice you may have given your knowledge of the industry.</p> <p>I know that your time is extremely valuable so please don’t feel to need to respond in depth. If you do have 5 minutes to chat, I would really appreciate it.</p> <p>Best,</p> <p>Austin</p> <p>There are a few key points to the email above:</p> <p>Address the person you are emailing by name</p> <p>State who you are and make it personable</p> <p>Include some flattery that positions the person as an “expert”</p> <p>As for the subject, Fast Company did a study where they emailed 1,000 C-level executives from Fortune & Inc 500 companies. They found that the subject line “Quick Question” made up 66.7% of total replies. I saw similar results.</p> <p>All of that said, this script is just a framework. You will most likely need to tweak your emails to fit the situation.</p> <p>When that time comes, I recommend checking out Sam Parr’s incredible guide on how to cold email like a boss (Sam has started conversations with Jeff Bezos and Brian Lee (aka Jessica Alba’s Honest co-founder) via cold email). It’s the same guide I used to help craft my email templates.</p> <p>Now hit Send!</p> <p>Prepare For Your Meeting</p> <p>In order to prepare, we have to know what we’re preparing for. The goal of your meeting is to position your influencer as an expert, make them feel special, and build a relationship.</p> <p>You should not and will not mention anything about the opening at their company. People innately enjoy helping others and if you follow the steps above, they will bring this up naturally.</p> <p>You will want to prepare a list of questions that gets them to open up about themselves and the company. I like to ask them several softballs to get things warmed up and then hit them with a few questions they are guaranteed to remember.</p> <p>Here is a quick set that I’ve had success with in the past (I’ve found the last one really seems to stick):</p> <p>I saw you worked at [Previous Companies]. How did you end up going from [First Industry] to becoming interested in [Current Company]?</p> <p>You hear a lot about [Current Company] in the news, but I’d love to hear more about why you love working there. What’s your favorite part?</p> <p>What is one totally unexpected lesson you’ve learned from working at [Current Company]?</p> <p>The “Million Dollar” Question</p> <p>Regardless of the questions you choose, there is one that you must always be sure to ask:</p> <p>“What is the biggest challenge your team is facing right now?”</p> <p>Really dig in here, get them to be specific. This information is going to be critical in helping you land a referral from this person, as well as getting the offer farther down the road.</p> <p>Your Homework: Adding Value (In A Big Way)</p> <p>Okay, so you met with your influencer, things went great, and you identified a major pain point that the team is having. Now we’re going to focus on that last piece.</p> <p>Over the next week you are going to research the crap out of your influencer’s problem. Then you are going to come up with a solution and draft up a proposal for how you would solve it. Your proposal should include:</p> <p>A summary of the problem (to illustrate that you understand their pain)</p> <p>A step-by-step framework of how you would solve this problem</p> <p>A brief outline of how your skill set positions you as an asset to implement that solution</p> <p>Truthfully, this process deserves a post of its own but this should give you a good idea of what you need to do. If you’re the type of person that likes concrete examples, check out this guerrilla usability test that Raghav Haran ran for Airbnb.</p> <p>Once you have all of this information, consolidate it into a Word document, head over to Upwork, and hire a graphic designer to make your proposal look amazing. If you’ve never hired on Upwork before, here is an amazing guide by Dave Nevogt on how to do it right.</p> <p>Following Up With Your Proposal</p> <p>Now we’re going to reach back out to our influencer with the proposal. Here’s the template I used:</p> <p>Hi [Influencer],</p> <p>Thanks again for taking the time out to chat last week.</p> <p>I spent a lot of time thinking about what you said regarding [team’s biggest challenge]. In fact, I created a short framework that should help you solve it. Please find that attached.</p> <p>If you have some time, I would love to chat about it in more detail.</p> <p>Please let me know if you have any questions, I’m looking forward to hearing your thoughts!</p> <p>Best,</p> <p>Austin</p> <p>It’s very important that you do not mention the open position in any of your emails or the proposal. Be patient and wait for their response. When they do get back to you, they will not only bring up the opening but they will ask you if you’re interested.</p> <p>Kindly accept and play it cool. You’re in!</p> <p>Part 2: How To Breeze Through The Interview Process</p> <p>Fast forward — our influencer passed along our resume to HR and they have reached out to set up a phone screen. Once we get past that, we’ll be on to interviewing with the team, and then getting the job.</p> <p>A note to developers: The advice below does not cover technical interviews, which are typically required for developer/software roles.</p> <p>However, the advice below will help create more time to prepare for technical interviews by minimizing the amount of preparation needed for other parts of the interview process. If you are applying for a development role, I suggest you read Cracking The Coding Interview by Gayle Laakmann McDowell.</p> <p>Interviews can be daunting, especially at companies like Google, Amazon, or Uber. I’m sure you’ve read the horror stories about crazy questions they ask people like “Quick — How many golf balls can fit inside a school bus,” or, “how many gas stations are there in Manhattan?”</p> <p>The truth is, most of these companies have done away with those questions. They crunched the numbers and found that the answers didn’t correlate with high employee performance (shocker, I know). In fact, Google’s own Senior Vice President of People Operations called them a “complete waste of time.”</p> <p>These companies have since reverted back to the standard style of interviews, which is great for us because it makes it much easier to identify patterns. We can essentially “guess” what questions will be on the test and prepare answers that will blow our interviewers away (it works way better than it did in college, I swear).</p> <p>Here is the process I used to prepare for each one.</p> <p>Nailing The Basics: Questions You’ll Get In Every Interview</p> <p>According to renowned career guru Penelope Trunk, one of the easiest ways to be a better interviewer is to prepare for the most obvious questions. You may be saying “well duh,” but you’d be surprised by how many people spread themselves too thin by trying to prepare answers to every possible question.</p> <p>99% of the interviews you go on will follow the exact same template. If you can master the format, your confidence will skyrocket and you’ll be prepared for almost any situation you get thrown into.</p> <p>The Universal Job Interview Format:</p> <p>Tell me about yourself (your experience, why you are interested in this role, etc.) A mix of behavioral questions, which we’ll dive into shortly What questions do you have for me (the interviewer)? Let’s tackle each individually.</p> <p>Tell Me About Yourself</p> <p>This is your first impression. More importantly, it’s the only part of the interview that you totally control. Do NOT rattle off your resume like a grocery list.</p> <p>In order to nail this part you need to craft an interesting story — your story. You want it to be concise (around 2–3 minutes) and you need to think about what you want to convey. I recommend:</p> <p>Choosing 2–3 themes to build your story around (for me, those themes were Persistence, Agility, and Success)</p> <p>Including quantitative metrics whenever possible</p> <p>Addressing the question of why you want to leave your current position (they are going to ask you this anyways, addressing it early shows that you’re aware it’s a concern of theirs and helps put them at ease)</p> <p>To help get you started, here is what my story looked like. To give you some context, I was a biology major who was interested in landing a job in digital marketing:</p> <p>Growing up, like most people, I wanted to be a doctor. I went to [college] where I majored in biology and planned my course to medical school. Not long after, I decided that pre-med wasn’t for me. I wanted to get into digital marketing, and I wanted to be in New York. I set my sights on this goal and created a plan that would get me there.</p> <p>In 2013, I graduated with my biology degree and took a job in medical device sales where I worked from 5:30am — 12:30pm covering surgical cases in the operating room. Then, every day, I would come home and study digital marketing until 8:00pm. In order to gain relevant experience, I got certified in Google Analytics & AdWords and created my own consulting firm that focused on using search engine marketing to generate leads for private golf communities. We were able to increase home sales by an average of 20% while reducing the cost per lead by around 10%. Armed with my new credentials, I began to look for positions in New York.</p> <p>Eventually, I was offered a position at my current company (a promotional analytics company in New York). During my tenure there I have grown my book of business by 467%, spearheaded the creation of an internal group dedicated to marketing the company on the internet, and helped close the second largest deal in company history.</p> <p>However, the company has restructured several times since I was brought on. I’ve had 3 different managers over the past year, as well as 3 titles with different sets of responsibilities. I’m looking for something a bit more stable and [company I am interviewing at] has been somewhere that I have wanted to work since I got into this industry. I’m really excited to have this opportunity.</p> <p>Pro Tip: You are telling a story. Don’t be afraid to embellish a bit. I’m not saying you should lie or make up stories, but you want to sell yourself and you can bet your butt that your competition isn’t afraid to inflate their credentials.</p> <p>Behavioral Questions</p> <p>Next up is the dreaded set of behavioral questions. The ones meant to tease out your thought process and your ability to be a “team player.” This is the part where our educated “guesses” are going to come in handy.</p> <p>The behavioral section is broken down into two parts that I call Standard Questions and Company Specific Questions. Let’s start with the former.</p> <p>Standard Questions</p> <p>You are going to be asked a variation of one, if not all, of these questions in every single interview you go to:</p> <p>Why do you want to work for us?</p> <p>Tell me about a time you exhibited leadership</p> <p>Tell me about a time where you had to work as a team</p> <p>Tell me about a time you’ve had to work with a difficult person, or difficult people</p> <p>Tell me about a time you failed</p> <p>Tell me about a time you overcame an obstacle</p> <p>Tell me about a time when you had success</p> <p>If you can answer these 6 questions, you can handle 9 out of 10 interviews with no other preparation and be totally fine. Just follow the same set of rules I mentioned above in the Tell Me About Yourself section:</p> <p>Craft a concise story</p> <p>Make sure to include quantitative metrics that illustrate your success</p> <p>Anticipate and address objections</p> <p>Company Specific Questions</p> <p>These are questions that fall in the middle of the 7 listed above and “why are man hole covers round?” Never fear though, we can anticipate these too.</p> <p>Head over to GlassDoor. If you’ve never heard of GlassDoor, it’s a great resource for any job seeker that includes salaries, reviews, and interview information for almost any company in the world.</p> <p>First, you are going to search for the position you’re applying for. In keeping with our theme, we’ll search for “Google” under Companies & Reviews:</p> <p>Next, we’re going to click on the “Interviews” Tab:</p> <p>Then scroll down and click on “Filter Interviews” which will bring up some advanced settings. Here we’ll type in the title of the job we want (Account Manager, in this case) and the location (New York, NY). We’ll also select “Received Offer” because the people who didn’t receive offers tend to be slightly, ahem, biased:</p> <p>This will pull up a list of reviews from everyone who interviewed and received an offer for that position. The general comments are really helpful, but we want to focus on a section called Interview Questions towards the bottom. I usually comb through 10–15 of these and add all of the interview questions into a Word doc so I can answer them later:</p> <p>Now you have your second set of questions to prepare for.</p> <p>What Questions Do You Have For Me?</p> <p>Finally, once they are done peppering you with questions, your interviewer will ask if you have any questions for them. This is the most crucial part of the interview.</p> <p>Why? Because so many people neglect it. If you can ask some questions that are even slightly outside of the box, I’ve found that really sticks with the interviewer more than any other part of the meeting.</p> <p>After every interview I’ve been on, I asked for feedback. Without fail, the interviewer made a positive comment about the questions I asked. The good news for you is that I asked the same exact questions in every single one. Here they are:</p> <p>What is your favorite part about working here?</p> <p>What is the biggest challenge you are facing right now?</p> <p>Let’s say that, in one year, you are looking back on this hire. What has that person done to exceed expectations on every level?</p> <p>Ask about a current event (for example — I saw that [Competitor X] came out with this product. How do you see that affecting your business?)</p> <p>What is the most unexpected lesson you’ve learned while working at [company]?</p> <p>Tell me a little bit more about you, what do you like to do outside of work?</p> <p>These questions work because they are based on specific principles of behavioral psychology. They break down barriers and help build a positive association in your interviewer’s mind. If you’re interested in the details, you can read more about it here.</p> <p>Say Thank You</p> <p>While we’re on the subject, be absolutely sure to send a thank you note to everyone you interviewed with. Also include a personal touch to each one (something that you gained from that last question).</p> <p>Many people I talk to say “but I don’t have their email.” Ask for it! At the end of every interview always, always ask for a business card or write down the person’s email in your notebook.</p> <p>If you forget, try using the techniques I outlined above for finding people’s emails and you should be fine.</p> <p>Part 3 — Following Up & What To Do If They Say No</p> <p>This is one of the most common mistakes I see from job applicants. I understand how nerve wracking it is to sit there and wait while everything is completely out of your hands.</p> <p>One of the toughest things I had to learn throughout my interview process was that, while this is a HUGE deal to you, it’s really just another agenda item on the hiring manager’s schedule.</p> <p>They will get back to you, and if they don’t? You don’t want to work for someone who doesn’t have the courtesy of replying to the people they do business with.</p> <p>When Can I Send Them A Reminder?</p> <p>The rule of thumb is one business week. If you interviewed on a Tuesday, wait until the next Tuesday to email them (as J.T. O'Donnell says, never send a nudge on a Monday). When you do, don’t push or be blunt. Keep it short and sweet:</p> <p>Hi [Interviewer],</p> <p>I hope you had a great week!</p> <p>I wanted to quickly follow up and see if there was anything else I could help with regarding the application process. If so, please let me know.</p> <p>Best,</p> <p>Austin</p> <p>That’s it. If they don’t respond to that after another 3–4 days, you have your answer and it’s time to move on.</p> <p>What Happens If They Say No?</p> <p>Ugh. The worst case scenario. Don’t get down just yet though, we’re not done here.</p> <p>I have this quality where I have trouble taking “no” as an answer. When I was interviewing with Google, the initial screener told me that she wasn’t going to put me through because she “didn’t think I was qualified, and didn’t want to waste the team’s time.”</p> <p>I was not happy. So I sent her this:</p> <p>Hi [Recruiter],</p> <p>Thank you again for carving out the time to speak this afternoon. I really appreciate your feedback, and I wanted to add one final note:  I completely understand your concerns regarding my experience with [skill]. You are correct that I didn’t have much experience with that at [previous company]. That said, this doesn’t stem from an inability to produce results, but rather a lack of opportunity to do so.</p> <p>While my experience on paper may not match up to the initial expectations of the position’s description, I have do have two qualities that work in my favor: I am an extremely efficient learner, and am also very effective at translating those learnings into practice. Second, I’m much more tenacious than your average individual. My career has hinged on these two qualities.  I left college with no digital experience and a biology degree — all of my digital knowledge was obtained through self study. I spent 8 months selling myself without the on-paper experience to back it up. When I was finally given the opportunity to apply my knowledge in a business setting, I playing a critical role in landing the company’s 2nd largest deal in history. I am confident that I can have the same success in this role. I have the resources necessary to learn what I need in order to be successful at [company], and am prepared to do whatever it takes to make that happen.  I understand that [company’s] interview process is extremely challenging, and that only the top talent ends up with an offer letter at the end. I also believe that I am worthy of a shot at that letter. [Company] is known for hiring people who excel at the intangibles, as well the ability to learn new things and apply them to existing knowledge. That is my forte.  I am not asking for an offer. I am simply asking for the opportunity to speak with the hiring manager to make my case for the position. I’m sure you will find the best person for the position, I would just like to have a legitimate shot at being that person. If you give me that chance, my next set of answers will not disappoint.  Thank you again for your continued consideration. Best,</p> <p>Austin</p> <p>Now that may be a little aggressive…</p> <p>Ok, it was pretty aggressive. But she wrote me back an hour later and pushed me through to the next round! Mission accomplished.</p> <p>The moral of the story here is, don’t give up if you get a “No.” Try to identify why you were turned down and then send a note to hiring manager addressing those items (feel free to copy mine).</p> <p>Taking Action</p> <p>There you have it. The exhaustive, step-by-step guide to landing an interview and then getting an offer from the company of your dreams. What are you waiting for? Get out there and start researching!</p>]]></content:encoded>
			<enclosure length="58763008" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._28_-_How_to_land_a_six_figure_job_in_tech_with_no_connections_final_edit.mp3?dest-id=603849" />
			<itunes:duration>01:01:09</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Austin was stuck in a job he hated. But given his non-traditional background and lack of Silicon Valley network, he knew he'd have to work extra hard to launch a career in tech. In this podcast, he details the steps he took to land interviews at...]]></itunes:subtitle>
			<itunes:summary>Austin was stuck in a job he hated. But given his non-traditional background and lack of Silicon Valley network, he knew he'd have to work extra hard to launch a career in tech. In this podcast, he details the steps he took to land interviews at Google, Twitter, and other prestigious companies that led to his dream job.

</itunes:summary>
			<itunes:episode>28</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 27 - Hackers stole my website...and I pulled off a $30,000 sting operation to get it back</title>
			<itunes:title>Hackers stole my website...and I pulled off a $30,000 sting operation to get it back</itunes:title>
			<pubDate>Mon, 23 Apr 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[5feb5929405b67bb13dcd6426a1b3e72]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-27-hackers-stole-my-websiteand-i-pulled-off-a-30000-sting-operation-to-get-it-back]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>For several days not that long ago, Jordan Reid's site, ramshackleglam.com, did not belong to her. She got it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI intervention, and what amounted to a massive sting operation. Here's her story. </p> <p>Written by Jordan Reid: <a href= "https://twitter.com/vmvaughn">https://twitter.com/ramshackleglam</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2EA3OjL">https://fcc.im/2EA3OjL</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>For several days not so long ago, RamshackleGlam.com — the domain name that I have owned and operated since March of 2010 — did not belong to me, but rather to a man who goes by the name “bahbouh” on an auction website called Flippa, and who was attempting to sell off the site to the highest bidder (with a “Buy It Now” price of $30,000.00). He promised the winner my traffic, my files, and my data, and suggested that I was available “for hire” to continue writing posts (alternatively, he was willing to provide the winner with “high-quality articles” and “SEO advice” to maintain the site’s traffic post-sale).</p> <p>I learned that my site was stolen on a Saturday. Three days later I had it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI intervention, and what amounted to a sting operation that probably should have starred Sandra Bullock instead of…well…me.</p> <p>Of course I’ve heard of identity theft, and of cyber hacking, but honestly, my attitude towards these things was very much “it could never happen to me.” And even if it did…I didn’t exactly understand why it was such a huge deal. Couldn’t you just explain to people what had happened, prove who you were, and sort it all out? We live in such a highly documented world, it seemed completely impossible to me that someone could actually get away with pretending to be someone else with any real consequences beyond a few phone calls and some irritation.</p> <p>It’s much, much worse — more threatening, more upsetting, and more difficult (if not impossible) to fix — than I’d ever imagined.</p> <p>I found out about the hacking from my father. His friend Anthony (who runs a web development and consulting company called ThoughtBox) had been surfing around on Flippa and had — in an impossibly lucky coincidence — noticed that my site was up for auction, with what appeared to be a highly suspicious listing. Suddenly, I remembered the email I had gotten the day before — an email that I had disregarded as spam — from someone “interested in the purchase” of my “weblog.” I remembered the notification from YouTube that someone had accessed my account from a different location — a notification I had ignored, assuming that I had logged in on a mobile device or that my husband had accidentally logged into my account instead of his own.</p> <p>But even after I saw the listing, I didn’t panic: this seemed like something that could be fixed with a couple of emails. Except the auction site was located in Australia and didn’t appear to have a phone number, and when I sent an email with a scanned ID and proof of ownership what I got back was a form letter. And when I called HostMonster, the site I pay to operate my website, I discovered that I was no longer the owner of my site: someone had used their email confirmation system to authorize the transfer of my domain name into a private account at GoDaddy (another web registrar service of whom I’m also a client).</p> <p>Why is this a big deal?</p> <p>If you have a business that depends on a URL, you understand why this was such upsetting news: With control over my website’s domain name, a hacker would be able to take the site down, or redirect it elsewhere. Further, it was later verified that the hacker had control over all of the site’s content, as well; he could have just rerouted everything I’ve ever written to any location he wanted.</p> <p>Ramshackle Glam may be “just” a lifestyle blog about things like parenting and fashion and decor…but it’s also a site that I’ve spent five years of my life building, and the idea of it falling into the hands of someone with malicious intent was heartbreaking. I could switch to a new URL and export a copy of my content (which I do back up), but that would result in the loss of a substantial amount of traffic. The website is my primary source of income, and with a house, two children, a book coming out, and a husband in business school, this was not a joke. The loss of my URL had the potential to be devastating for my business and for my family in a very real way.</p> <p>So what did I do?</p> <p>The events of the next few days were complicated, so rather than go through them chronologically I’m going to explain how each path I took ended up panning out (I’m going into detail so that I can be as much help as possible to anyone who goes through this themselves).</p> <p>1. I tried to resolve the situation directly with GoDaddy and HostMonster. This did not work.</p> <p>From Sunday through Tuesday, I spent most of the day (and much of the night) on the phone with GoDaddy, HostMonster, or both at the same time, and nearly every person I spoke with gave me the same response: “Sorry, can’t help you.”</p> <p>HostMonster maintained that because they no longer controlled the domain name, there was nothing they could do. GoDaddy maintained that because the account was private and the person had obtained ownership of the domain through a transfer from HostMonster, there was nothing they could do.</p> <p>What finally made a difference: I cited ICANN’s policy on Domain Name Dispute Resolution.* This got my case upgraded, but it did not result in action.</p> <p>Here’s why: the legal department at HostMonster informed me that in order for them to initiate a transfer dispute that would result in GoDaddy releasing the domain back to me, their “internal investigation” would have to turn up evidence that they had done something wrong in releasing the site. In other words, they would have to admit that they had screwed up…which would in turn open them up to a lawsuit.</p> <p>Needless to say, I never heard from the legal department again. Despite the fact that everyone seemed clear on the fact that I owned my website and that it had been transferred without my authorization, nothing was going to be done unless I initiated a time-consuming and costly lawsuit that, in any case, would not result in action quick enough to save my domain name from being sold.</p> <p>So that avenue came to an end.</p> <p>2. I called the FBI. This was a major step in the right direction.</p> <p>The morning after I found out about the unauthorized transfer, I also called the FBI. I felt silly and dramatic making the phone call, but the reality is that this is an international cyber crime issue, and that’s FBI territory. And this is my business. It’s how I support my family, and it may be a “small matter” in the grand scheme of things, but it is not a small matter to me.</p> <p>And let me tell you: of all the surprises I’ve had over the past week or so, most surprising of all has been the FBI. They responded immediately, with follow-up phone calls and emails, an in-person interview with two special agents at my own home within 24 hours, and a follow-up visit from two agents yesterday. Beyond that, each and every agent I have interacted with over the past week has been, without fail, compassionate, thoughtful, invested, respectful, and committed to action…in addition to treating me not like a case number, but like a human.</p> <p>What I expected was to leave a message with a general mailbox and at some point receive a form letter; I certainly did not expect to see an active investigation opened immediately. I’m not going to write more about the investigation because it’s still ongoing (although I did ask for and receive permission to write about this), but I think it’s important to say how absolutely blown away I have been by the FBI’s response.</p> <p>3. I tried to regain control by dealing directly with the “seller”. This worked, but not without considerable drama.</p> <p>While all of the above was going on, I was also working to regain control over the site directly from the individual who was trying to sell it.</p> <p>I didn’t want to contact the “seller” directly, because I felt that if he thought the “real” owner of the site was aware of the sale, he would try to extort more money. So I asked Anthony — the person who had found the original listing, and who had an active account with a positive history on Flippa — to DM “bahbouh” to see if he was interested in a “private sale”. After some back-and-forth we reached an agreement, and it was decided that a third-party money-transfer website (Escrow.com) would be used to make the sale: the money would only be released to the seller upon confirmation that the domain name had been transferred.</p> <p>This appeared to be going smoothly until Tuesday night, when the seller suddenly demanded that the funds be released immediately (prior to receipt of the website). When we pushed back, he announced that he was selling it to someone else: “Sorry, bye.”</p> <p>So here was my thought process: if we did not release the money to the seller, we were guaranteed to not get the website. If we did release the money to him, there was a possibility that he would take the money and run, and also a possibility that he would deliver the site as promised. It wasn’t a gamble I wanted to take…but I didn’t see any option. And so I authorized the wire transfer.</p> <p>I spent twenty minutes sitting in front of the dummy GoDaddy account I had created to receive the domain name from the seller, waiting to see whether I was out thousands of dollars and a domain name, or just thousands of dollars.</p> <p>And then it came through.</p> <p>I immediately transferred the domain into a different account and placed it (and all of my other domain names) on what amounted to lockdown. And then I called the wire transfer company and placed a stop on the payment.</p> <p>The end result</p> <p>RamshackleGlam.com is back in my possession, thanks to a number of people who dedicated hours (in some cases days) out of their lives to doing whatever they could to help me. My other accounts — bank accounts, et cetera — have been secured. I don’t have my money back yet, but the man who stole my site from me doesn’t have it, either, and won’t be getting it, ever.</p> <p>And that’s an ending I’m pretty damn thrilled with.</p> <p>So why am I still angry?</p> <p>Of course I’m angry with the person or people who stole the site, but that’s out of my hands. The reason I’m writing this post is to let people know that this really can happen — to anyone — and to offer suggestions for how to minimize the chances that it will happen to you (below), but beyond that, I’m writing this post because this incident made me very, very angry at GoDaddy and HostMonster. And I want you to know why.</p> <p>No one at either company questioned my statement (supported by written proof) that the website belonged to me. No one doubted that it had been transferred without my authority. And yet I had to spend days — days during which the hacker could have done virtually anything he wanted — trying to reach one single person who was able to do anything, because the support staff and supervisors I spoke with (who had to have numbered fifty or more) were completely uninformed as to how to handle this situation beyond saying, “Jeez, that sucks. Can’t help you.”</p> <p>And once I reached people who could help me — who could literally make a single phone call or push a single button and return my property to me (or simply freeze it so that it could not be sold or destroyed) — they would not. They hid behind their legal departments and refused to do anything, knowing full well that their inaction would force me to either interact with and pay off a criminal, or lose an essential component of my business.</p> <p>And hackers know that these companies will do this.</p> <p>They rely on it.</p> <p>There is a serious problem when a criminal enterprise not only exists “despite” a company’s policies, but actually thrives as a direct result of that company’s prioritization of their own interests over the security of the clients they allegedly “protect”. Do I understand why companies like HostMonster and GoDaddy are focused on protecting themselves against lawsuits? Of course I do. But the fact is that they not only do not “help” their customers, but actively contribute to creating situations that threaten small businesses and the families that they support.</p> <p>And these companies know that when they stonewall clients whose property has obviously been stolen that these clients will have no other recourse than to pay off criminals or watch their businesses — sometimes their very lives — collapse. They know that by standing in the way of immediate action they create the very environment that these criminals depend upon to perpetuate their business model. And they do nothing.</p> <p>This has to change.</p> <p>My opinion, for what it’s worth</p> <p>Support personnel at hosting companies should be made intimately familiar with ICANN regulations involving domain disputes, and should be able to initiate a plan of action the first time a client makes them aware of a situation, not after hours and hours of repeated calls.</p> <p>Further, the establishment of a TEAC** should result in an immediate freeze on the account in dispute until the situation has been resolved. This should not require an admission of culpability on the part of any parties; simply an acknowledgement that a dispute exists and an awareness that while the dispute exists the domain must be held safe from sale or transfer.</p> <p>What you can do to reduce the chances that this will happen to you:</p> <p>Have a really, really good password, and change it often. Your password should not contain “real” words (and definitely not more than one real word in immediate proximity, like “whitecat” or “angrybird”), and should contain capital letters, numbers and symbols. The best passwords of all look like total nonsense.</p> <p>If possible, use a separate computer (an old one or a cheap one purchased for this purpose) for things like banking; if your family computer is the same one that you use for bank transactions you risk having your kids click on a bad link that results in a hacking.</p> <p>Turn off your computer and personal devices when they’re not in use.<br /> Have antivirus software on your computer (but remember that virus scans only catch 30–40% of viruses, so unfortunately a “clean” check doesn’t necessarily mean that you’re safe).</p> <p>Purchase CyberRisk Insurance (learn more about it here; it basically protects businesses from cyber attacks and data breaches.</p> <p>But if it does happen to you, here’s what to do:</p> <p>Begin taking careful notes (and screenshots) immediately. Don’t delete any emails or other information; it could all be important later on.</p> <p>Immediately change all of your passwords (including — but not limited to — domain registrar, website hosting, website login information, email, bank accounts, wireless home electronics, and Apple ID) according to the rules stated below. I changed mine every few hours while this situation was still up in the air, and am continuing to change them every few days for the time being.</p> <p>Contact the registrar(s), citing the ICANN policy below, and see if together you can arrive at a speedy resolution. Don’t be surprised if you find yourself running into dead ends.</p> <p>Make sure to inquire about “filters” and “rules” that may have been placed on your email (basically, any kind of device that the hackers may have placed to forward emails, et cetera).</p> <p>Contact appropriate law enforcement (I contacted the FBI because it appeared to be an international issue, and was at the very least an interstate issue because Escrow.com is located in California, and I’m in New York).</p> <p>Note: Every situation is different, and I can’t wholeheartedly recommend the steps that I took that ultimately resulted in me regaining control over my domain name largely because they involved interacting with criminals. Obviously that isn’t ideal, and can have unpredictable consequences. (Although my husband says that he would like it to be known that he thinks I’m a huge badass. While this is ordinarily very far from the truth, in this specific instance…I’ll take it.)</p> <p>The End. (That was long. Thanks for reading.)</p> <p>*ICann.Org is the Internet Corporation for Assigned Names and Numbers (ICANN) is responsible for managing and coordinating the Domain Name System (DNS). ICANN’s policy on Domain Name Dispute Resolution essentially states that in the case of a domain dispute, the Losing Registrar (the registrar that maintained possession of the domain name pre-transfer, as opposed to the “Winning Registrar”, who maintains possession of the domain name post-transfer). must immediately establish a Transfer Emergency Action Contact (“TEAC“) in an effort to get the ball rolling in the direction of resolution right away). Once I had this information, my case was immediately upgraded.</p> <p>**TEAC: A contact that is established by ICANN and used by other registrars and ICANN if there is a need to quickly address issues with domain transfers between two registrars. The contact must respond to inquiries within four hours, though final resolution may take longer.</p>]]></description>
			<content:encoded><![CDATA[<p>For several days not that long ago, Jordan Reid's site, ramshackleglam.com, did not belong to her. She got it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI intervention, and what amounted to a massive sting operation. Here's her story. </p> <p>Written by Jordan Reid: <a href= "https://twitter.com/vmvaughn">https://twitter.com/ramshackleglam</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2EA3OjL">https://fcc.im/2EA3OjL</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>For several days not so long ago, RamshackleGlam.com — the domain name that I have owned and operated since March of 2010 — did not belong to me, but rather to a man who goes by the name “bahbouh” on an auction website called Flippa, and who was attempting to sell off the site to the highest bidder (with a “Buy It Now” price of $30,000.00). He promised the winner my traffic, my files, and my data, and suggested that I was available “for hire” to continue writing posts (alternatively, he was willing to provide the winner with “high-quality articles” and “SEO advice” to maintain the site’s traffic post-sale).</p> <p>I learned that my site was stolen on a Saturday. Three days later I had it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI intervention, and what amounted to a sting operation that probably should have starred Sandra Bullock instead of…well…me.</p> <p>Of course I’ve heard of identity theft, and of cyber hacking, but honestly, my attitude towards these things was very much “it could never happen to me.” And even if it did…I didn’t exactly understand why it was such a huge deal. Couldn’t you just explain to people what had happened, prove who you were, and sort it all out? We live in such a highly documented world, it seemed completely impossible to me that someone could actually get away with pretending to be someone else with any real consequences beyond a few phone calls and some irritation.</p> <p>It’s much, much worse — more threatening, more upsetting, and more difficult (if not impossible) to fix — than I’d ever imagined.</p> <p>I found out about the hacking from my father. His friend Anthony (who runs a web development and consulting company called ThoughtBox) had been surfing around on Flippa and had — in an impossibly lucky coincidence — noticed that my site was up for auction, with what appeared to be a highly suspicious listing. Suddenly, I remembered the email I had gotten the day before — an email that I had disregarded as spam — from someone “interested in the purchase” of my “weblog.” I remembered the notification from YouTube that someone had accessed my account from a different location — a notification I had ignored, assuming that I had logged in on a mobile device or that my husband had accidentally logged into my account instead of his own.</p> <p>But even after I saw the listing, I didn’t panic: this seemed like something that could be fixed with a couple of emails. Except the auction site was located in Australia and didn’t appear to have a phone number, and when I sent an email with a scanned ID and proof of ownership what I got back was a form letter. And when I called HostMonster, the site I pay to operate my website, I discovered that I was no longer the owner of my site: someone had used their email confirmation system to authorize the transfer of my domain name into a private account at GoDaddy (another web registrar service of whom I’m also a client).</p> <p>Why is this a big deal?</p> <p>If you have a business that depends on a URL, you understand why this was such upsetting news: With control over my website’s domain name, a hacker would be able to take the site down, or redirect it elsewhere. Further, it was later verified that the hacker had control over all of the site’s content, as well; he could have just rerouted everything I’ve ever written to any location he wanted.</p> <p>Ramshackle Glam may be “just” a lifestyle blog about things like parenting and fashion and decor…but it’s also a site that I’ve spent five years of my life building, and the idea of it falling into the hands of someone with malicious intent was heartbreaking. I could switch to a new URL and export a copy of my content (which I do back up), but that would result in the loss of a substantial amount of traffic. The website is my primary source of income, and with a house, two children, a book coming out, and a husband in business school, this was not a joke. The loss of my URL had the potential to be devastating for my business and for my family in a very real way.</p> <p>So what did I do?</p> <p>The events of the next few days were complicated, so rather than go through them chronologically I’m going to explain how each path I took ended up panning out (I’m going into detail so that I can be as much help as possible to anyone who goes through this themselves).</p> <p>1. I tried to resolve the situation directly with GoDaddy and HostMonster. This did not work.</p> <p>From Sunday through Tuesday, I spent most of the day (and much of the night) on the phone with GoDaddy, HostMonster, or both at the same time, and nearly every person I spoke with gave me the same response: “Sorry, can’t help you.”</p> <p>HostMonster maintained that because they no longer controlled the domain name, there was nothing they could do. GoDaddy maintained that because the account was private and the person had obtained ownership of the domain through a transfer from HostMonster, there was nothing they could do.</p> <p>What finally made a difference: I cited ICANN’s policy on Domain Name Dispute Resolution.* This got my case upgraded, but it did not result in action.</p> <p>Here’s why: the legal department at HostMonster informed me that in order for them to initiate a transfer dispute that would result in GoDaddy releasing the domain back to me, their “internal investigation” would have to turn up evidence that they had done something wrong in releasing the site. In other words, they would have to admit that they had screwed up…which would in turn open them up to a lawsuit.</p> <p>Needless to say, I never heard from the legal department again. Despite the fact that everyone seemed clear on the fact that I owned my website and that it had been transferred without my authorization, nothing was going to be done unless I initiated a time-consuming and costly lawsuit that, in any case, would not result in action quick enough to save my domain name from being sold.</p> <p>So that avenue came to an end.</p> <p>2. I called the FBI. This was a major step in the right direction.</p> <p>The morning after I found out about the unauthorized transfer, I also called the FBI. I felt silly and dramatic making the phone call, but the reality is that this is an international cyber crime issue, and that’s FBI territory. And this is my business. It’s how I support my family, and it may be a “small matter” in the grand scheme of things, but it is not a small matter to me.</p> <p>And let me tell you: of all the surprises I’ve had over the past week or so, most surprising of all has been the FBI. They responded immediately, with follow-up phone calls and emails, an in-person interview with two special agents at my own home within 24 hours, and a follow-up visit from two agents yesterday. Beyond that, each and every agent I have interacted with over the past week has been, without fail, compassionate, thoughtful, invested, respectful, and committed to action…in addition to treating me not like a case number, but like a human.</p> <p>What I expected was to leave a message with a general mailbox and at some point receive a form letter; I certainly did not expect to see an active investigation opened immediately. I’m not going to write more about the investigation because it’s still ongoing (although I did ask for and receive permission to write about this), but I think it’s important to say how absolutely blown away I have been by the FBI’s response.</p> <p>3. I tried to regain control by dealing directly with the “seller”. This worked, but not without considerable drama.</p> <p>While all of the above was going on, I was also working to regain control over the site directly from the individual who was trying to sell it.</p> <p>I didn’t want to contact the “seller” directly, because I felt that if he thought the “real” owner of the site was aware of the sale, he would try to extort more money. So I asked Anthony — the person who had found the original listing, and who had an active account with a positive history on Flippa — to DM “bahbouh” to see if he was interested in a “private sale”. After some back-and-forth we reached an agreement, and it was decided that a third-party money-transfer website (Escrow.com) would be used to make the sale: the money would only be released to the seller upon confirmation that the domain name had been transferred.</p> <p>This appeared to be going smoothly until Tuesday night, when the seller suddenly demanded that the funds be released immediately (prior to receipt of the website). When we pushed back, he announced that he was selling it to someone else: “Sorry, bye.”</p> <p>So here was my thought process: if we did not release the money to the seller, we were guaranteed to not get the website. If we did release the money to him, there was a possibility that he would take the money and run, and also a possibility that he would deliver the site as promised. It wasn’t a gamble I wanted to take…but I didn’t see any option. And so I authorized the wire transfer.</p> <p>I spent twenty minutes sitting in front of the dummy GoDaddy account I had created to receive the domain name from the seller, waiting to see whether I was out thousands of dollars and a domain name, or just thousands of dollars.</p> <p>And then it came through.</p> <p>I immediately transferred the domain into a different account and placed it (and all of my other domain names) on what amounted to lockdown. And then I called the wire transfer company and placed a stop on the payment.</p> <p>The end result</p> <p>RamshackleGlam.com is back in my possession, thanks to a number of people who dedicated hours (in some cases days) out of their lives to doing whatever they could to help me. My other accounts — bank accounts, et cetera — have been secured. I don’t have my money back yet, but the man who stole my site from me doesn’t have it, either, and won’t be getting it, ever.</p> <p>And that’s an ending I’m pretty damn thrilled with.</p> <p>So why am I still angry?</p> <p>Of course I’m angry with the person or people who stole the site, but that’s out of my hands. The reason I’m writing this post is to let people know that this really can happen — to anyone — and to offer suggestions for how to minimize the chances that it will happen to you (below), but beyond that, I’m writing this post because this incident made me very, very angry at GoDaddy and HostMonster. And I want you to know why.</p> <p>No one at either company questioned my statement (supported by written proof) that the website belonged to me. No one doubted that it had been transferred without my authority. And yet I had to spend days — days during which the hacker could have done virtually anything he wanted — trying to reach one single person who was able to do anything, because the support staff and supervisors I spoke with (who had to have numbered fifty or more) were completely uninformed as to how to handle this situation beyond saying, “Jeez, that sucks. Can’t help you.”</p> <p>And once I reached people who could help me — who could literally make a single phone call or push a single button and return my property to me (or simply freeze it so that it could not be sold or destroyed) — they would not. They hid behind their legal departments and refused to do anything, knowing full well that their inaction would force me to either interact with and pay off a criminal, or lose an essential component of my business.</p> <p>And hackers know that these companies will do this.</p> <p>They rely on it.</p> <p>There is a serious problem when a criminal enterprise not only exists “despite” a company’s policies, but actually thrives as a direct result of that company’s prioritization of their own interests over the security of the clients they allegedly “protect”. Do I understand why companies like HostMonster and GoDaddy are focused on protecting themselves against lawsuits? Of course I do. But the fact is that they not only do not “help” their customers, but actively contribute to creating situations that threaten small businesses and the families that they support.</p> <p>And these companies know that when they stonewall clients whose property has obviously been stolen that these clients will have no other recourse than to pay off criminals or watch their businesses — sometimes their very lives — collapse. They know that by standing in the way of immediate action they create the very environment that these criminals depend upon to perpetuate their business model. And they do nothing.</p> <p>This has to change.</p> <p>My opinion, for what it’s worth</p> <p>Support personnel at hosting companies should be made intimately familiar with ICANN regulations involving domain disputes, and should be able to initiate a plan of action the first time a client makes them aware of a situation, not after hours and hours of repeated calls.</p> <p>Further, the establishment of a TEAC** should result in an immediate freeze on the account in dispute until the situation has been resolved. This should not require an admission of culpability on the part of any parties; simply an acknowledgement that a dispute exists and an awareness that while the dispute exists the domain must be held safe from sale or transfer.</p> <p>What you can do to reduce the chances that this will happen to you:</p> <p>Have a really, really good password, and change it often. Your password should not contain “real” words (and definitely not more than one real word in immediate proximity, like “whitecat” or “angrybird”), and should contain capital letters, numbers and symbols. The best passwords of all look like total nonsense.</p> <p>If possible, use a separate computer (an old one or a cheap one purchased for this purpose) for things like banking; if your family computer is the same one that you use for bank transactions you risk having your kids click on a bad link that results in a hacking.</p> <p>Turn off your computer and personal devices when they’re not in use. Have antivirus software on your computer (but remember that virus scans only catch 30–40% of viruses, so unfortunately a “clean” check doesn’t necessarily mean that you’re safe).</p> <p>Purchase CyberRisk Insurance (learn more about it here; it basically protects businesses from cyber attacks and data breaches.</p> <p>But if it does happen to you, here’s what to do:</p> <p>Begin taking careful notes (and screenshots) immediately. Don’t delete any emails or other information; it could all be important later on.</p> <p>Immediately change all of your passwords (including — but not limited to — domain registrar, website hosting, website login information, email, bank accounts, wireless home electronics, and Apple ID) according to the rules stated below. I changed mine every few hours while this situation was still up in the air, and am continuing to change them every few days for the time being.</p> <p>Contact the registrar(s), citing the ICANN policy below, and see if together you can arrive at a speedy resolution. Don’t be surprised if you find yourself running into dead ends.</p> <p>Make sure to inquire about “filters” and “rules” that may have been placed on your email (basically, any kind of device that the hackers may have placed to forward emails, et cetera).</p> <p>Contact appropriate law enforcement (I contacted the FBI because it appeared to be an international issue, and was at the very least an interstate issue because Escrow.com is located in California, and I’m in New York).</p> <p>Note: Every situation is different, and I can’t wholeheartedly recommend the steps that I took that ultimately resulted in me regaining control over my domain name largely because they involved interacting with criminals. Obviously that isn’t ideal, and can have unpredictable consequences. (Although my husband says that he would like it to be known that he thinks I’m a huge badass. While this is ordinarily very far from the truth, in this specific instance…I’ll take it.)</p> <p>The End. (That was long. Thanks for reading.)</p> <p>*ICann.Org is the Internet Corporation for Assigned Names and Numbers (ICANN) is responsible for managing and coordinating the Domain Name System (DNS). ICANN’s policy on Domain Name Dispute Resolution essentially states that in the case of a domain dispute, the Losing Registrar (the registrar that maintained possession of the domain name pre-transfer, as opposed to the “Winning Registrar”, who maintains possession of the domain name post-transfer). must immediately establish a Transfer Emergency Action Contact (“TEAC“) in an effort to get the ball rolling in the direction of resolution right away). Once I had this information, my case was immediately upgraded.</p> <p>**TEAC: A contact that is established by ICANN and used by other registrars and ICANN if there is a need to quickly address issues with domain transfers between two registrars. The contact must respond to inquiries within four hours, though final resolution may take longer.</p>]]></content:encoded>
			<enclosure length="15385938" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Hackers_stole_my_website_-_and_I_pulled_off_a_30000_sting_operation_to_get_it_back.mp3?dest-id=603849" />
			<itunes:duration>16:00</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[For several days not that long ago, Jordan Reid's site, ramshackleglam.com, did not belong to her. She got it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI...]]></itunes:subtitle>
			<itunes:summary>For several days not that long ago, Jordan Reid's site, ramshackleglam.com, did not belong to her. She got it back, but only after the involvement of fifty or so employees of six different companies, middle-of-the-night conferences with lawyers, FBI intervention, and what amounted to a massive sting operation. Here's her story.</itunes:summary>
			<itunes:episode>27</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 26 - The Essential Guide to Take-Home Coding Challenges</title>
			<itunes:title>The Essential Guide to Take-Home Coding Challenges</itunes:title>
			<pubDate>Mon, 16 Apr 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[4e08bf8fd89217a2b9f4fddbb839de4c]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-26-the-essential-guide-to-take-home-coding-challenges]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Jane wanted to help others with non-traditional backgrounds succeed on take-home coding challenges. So she wrote an extensive guide for anyone who has received such a challenge and wants to attack it in the best possible way. She divulges mistakes to avoid, how to get organized, and how to go above and beyond.</p> <p>Written by Jane Philipps: <a href= "https://twitter.com/janephilipps">https://twitter.com/janephilipps</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2t5215F">https://fcc.im/2t5215F</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Introduction</p> <p>Hi, I’m Jane. I wrote this guide because I want to help others with non-traditional backgrounds succeed on take-home coding challenges. Please read it, take notes, apply the material, and let me know about your results. You can reach me via email at jane@fullstackinterviewing.com.</p> <p>This guide is intended for anyone who has received a take-home coding challenge as part of the technical interview process and wants to attack it in the best way. This Essential Guide is a distilled version of a longer Ultimate Guide to Take-home Coding Challenges, which goes into much more detail and walks through an example challenge from start to finish.</p> <p>So, if you’ve just received a challenge and are anxious to get started, start here, and then check out the full guide when you want to learn the material more deeply. Good luck!</p> <p>Mistakes to avoid making when working on a take-home coding challenge</p> <p>There are several mistakes you can make with take-home challenges. Some of these are small mistakes that are easily correctable, while others will leave you frustrated and unable to finish your assignment. I want to address these mistakes first, so when you’re given a take-home challenge, you know exactly what not to do.</p> <p>Here are four mistakes you can make:</p> <p>1. Time management and scope creep</p> <p>2. Trying to learn too many new things at once</p> <p>3. Making too many assumptions</p> <p>4. Starting to code right away</p> <p>Let’s look at each one in detail.</p> <p>1. Time management and scope creep</p> <p>Time estimation is one of the hardest problems in programming, and even experienced engineers struggle with it. This plays into take-home challenges in a couple of ways.</p> <p>First, some challenges come with “estimated time.” I usually ignore these, as they are rarely based in reality. Second, some challenges are open-ended. Many people, especially newer developers, will want to add tons of features because they think it will be impressive. Actually, it’s more impressive if you keep the scope relatively narrow, but finish everything you set out to do. In this situation, it’s better to do one thing really well than to do a million things poorly.</p> <p>A good question would be: what counts as “going above and beyond” versus what counts as “scope creep?” My rule of thumb would be if your idea accomplishes or improves on the requirements of the assignment, that is likely a good idea, but if it seems tangentially related or “just cool,” it’s probably scope creep. But, as I describe later, always make it work first.</p> <p>2. Trying to learn too many new things at once</p> <p>While a take-home coding challenge can be an excellent opportunity for learning, it is possible to take on too much learning. If you’re given a challenge where you must use a specific language or framework, but you’re not familiar with it, don’t add additional complexity by setting out to learn something new on top of that. For example, if you are using a new backend framework for a full stack app, stick to a frontend framework that you’re already comfortable with.</p> <p>If your challenge is language/framework agnostic, but you’ve been itching to try out some new technology, pick JUST ONE to experiment with. Between reading the docs, getting your challenge properly set up, and getting used to any new syntax, you will have your hands full. Even learning one thing will eat up a lot of your time, so I would highly suggest limiting yourself to one new piece of technology per challenge.</p> <p>3. Making too many assumptions</p> <p>As a developer, if you make too many assumptions, you are bound to build an application where the requirements are off, or the user experience is bad. When given a set of requirements for a take-home challenge, ALWAYS take the time to review the requirements and make sure you fully understand them. And, if you have any questions at all, always ask.</p> <p>First, this shows that you are willing to ask for help when you don’t quite understand something, an important trait for a developer to demonstrate. Second, many companies will intentionally give you product requirements that are vague or not fully fleshed out in order to see how you react in these situations. They are actually testing your ability to make sense of requirements that may have gaps in them.</p> <p>So, when in doubt, ask questions. Asking questions is also a signal that you are engaged and interested in the challenge.</p> <p>4. Starting to code right away</p> <p>One last mistake you can make is to jump in and start coding right away. I guarantee if you do this, you will regret it. Why? Two reasons:</p> <p>Without proper planning, your code will suffer</p> <p>Without first getting organized and making sure you fully understand ALL of the technical requirements, you may find yourself missing edge cases or rewriting parts of the functionality. I know it seems counter-intuitive, but you will actually SAVE yourself time if you plan ahead.</p> <p>You will spin your wheels trying to get your app set up properly</p> <p>Especially for newer developers, initial app setup can be one of the hardest parts of a take-home coding challenge. It’s not something you do every day, so it often takes some research and reading documentation to get reacquainted with the process and ensure you’re going about it in the best way.</p> <p>So, there you have it — a summary of mistakes to avoid making. You’ll find that a lot of these are also applicable to your day to day work as a developer. In the next section, we’ll dive into further detail on how to get organized before you write a single line of code.</p> <p>Get organized: how to plan before you write a line of code</p> <p>Now it’s time to get to work! But, it’s NOT time to write any code YET.</p> <p>Why?</p> <p>Because, as you’ll see, a lot of the work actually happens before you write a single line of code. This may seem counterintuitive, but again — the more time you spend up front planning, the less time you will spend writing code.</p> <p>So, now you have your coding challenge in hand and you are ready to get started with the planning process. Here are my six suggested steps:</p> <p>1. Understand the requirements and ask any questions</p> <p>2. Identify technical decisions you need to make</p> <p>3. Technical design & whiteboarding</p> <p>4. Test plan</p> <p>5. App setup plan</p> <p>6. Organize your tasks</p> <p>1. Understand the requirements and ask any questions</p> <p>First, you need to make sure you completely, absolutely, 100% understand the requirements of the project. If any part of the requirements are unclear, it is up to you to reach out to your contact and ask questions.</p> <p>Sometimes companies will purposefully make their requirements vague, in order to see how you approach the problem. In these cases, it is always best to ask questions as it shows you are thinking about the problem and not just making assumptions and building an app to a vague spec.</p> <p>2. Identify technical decisions you need to make</p> <p>Your next step will be to identify the technical decisions that you need to make. Making a list of all of your technical decisions up front and thinking about them before you’re in the middle of building your app will help you immensely. Not only will it cut down on time figuring things out later, but it will allow you to make big picture decisions up front, as opposed to trying to focus on both the big picture and the small details at the same time.</p> <p>3. Technical design & whiteboarding</p> <p>Now it’s time to plan out the rest of your app. For anything that you need to draw out, now is the perfect time to do that. Thinking through these decisions at the start serves two purposes:</p> <p>You’ll be able to reference these drawings and your original plan while you’re building your app. Then if you get stuck at any point, you can always come back to your notes.</p> <p>Later, when you are having a discussion with an engineer about your coding challenge, you can use these notes as a reference when they ask you why you made certain design or architecture decisions.</p> <p>Once you’ve thought through and answered some of the bigger design and architecture questions for your challenge, the next step is research. If you’re planning to use a new technology or something you’re a bit rusty with, use this time to search for documentation and other resources.</p> <p>4. Test plan</p> <p>Another very important step to take before writing a line of code is developing a test plan. Although you won’t get peer feedback on this test plan, it will help you look at the challenge from a different angle, making sure you’re meeting all of the requirements. By thinking through and writing out a test plan before you start coding, you are able to brainstorm possible edge cases that you should account for in your code and you will use this as a basis for testing your app later.</p> <p>5. App setup plan</p> <p>If you’re starting an app from scratch, figure out if there are any generators you can use to make your app setup easier and faster. Application setup is one of the hardest parts of take-home coding challenges, because it’s something that developers do rather infrequently. Best practices are always changing, so it’s easy to forget how to do. Also, when setting up an app with a specific combination of technologies for the first time, it can be challenging to get everything configured and working together properly.</p> <p>If you are not using a generator, reading documentation and finding working examples are the two most important steps you can take. Being able to play with a working example and compare it to your own app will help you if you get stuck.</p> <p>6. Organize your tasks</p> <p>The last step before you start coding is to break down and organize your tasks. Breaking down your tasks is essential because it will help you stay on track as you’re working on your challenge, and it will give you a game plan for execution. Note that you shouldn’t be a perfectionist here, because there will always be unexpected bumps in the road.</p> <p>Here is an example task list for a classic Tic Tac Toe app:</p> <p>- Understand requirements<br /> - Choose technologies<br /> - Brainstorm test plan<br /> - Hello World app setup<br /> - Build board with HTML/CSS<br /> - Implement Tic Tac Toe gameplay with Javascript<br /> - Add reset button<br /> - Make board responsive<br /> - Add ability to add additional boards<br /> - Error handling & tests<br /> - Code cleanup<br /> - README</p> <p>Some of these tasks can be broken down even further into smaller steps. For example, in order to implement the Tic Tac Toe gameplay with Javascript, here are some smaller tasks:</p> <p>- Add a click handler to each square that logs a message<br /> - Get click handler to add an X to the square that is clicked<br /> - Get clicks to alternate between X and O<br /> - Don’t allow a square to be clicked more than once<br /> - Implement a function to find the winner and end the game<br /> - Handle a tie game</p> <p>3. Writing tests: just do it!</p> <p>Testing can be overwhelming, because there are so many different types of tests: acceptance tests, integration tests, and unit tests, not to mention test driven development vs. ad hoc testing.</p> <p>Why should you include tests in your take-home coding challenge? It’s simple: your tests will make your submission shine.</p> <p>First, adding tests shows that you know or are willing to learn another technology/framework. It also demonstrates that you take ownership of what you’re building, because you are taking responsibility to make sure it works. Testing also shows that you’ve considered edge cases, which many newer engineers often overlook.</p> <p>Many companies take tests very seriously. Some will not tell you that they expect tests for your coding challenge, but will automatically reject you if you leave them out. Therefore, my recommendation is to write tests no matter what when given a take-home challenge. Not only will it make you a better developer, but for companies that were not expecting tests, you will stand out even more!</p> <p>How do you go about writing a tests? First, create a plan. Here’s my 80/20 suggestion for how to come up with the right test cases:</p> <p>1. Test the happy path</p> <p>For the classic Tic Tac Toe example, the happy path is starting with an empty board and playing a game until X wins.</p> <p>2. Think about variations on the happy path</p> <p>A variation on the happy path would be if O wins, or if there is a tie game.</p> <p>3. Think of edge cases</p> <p>An edge case would be if a player tries to play a move in the same square more than once.</p> <p>4. Test anything that is complex</p> <p>The algorithm to find the winner is the most complex part of this example.</p> <p>Here’s a sample test plan:</p> <p>- Test that the initial state of the board is correct (i.e. board is<br /> visible and empty)<br /> - Test that a move can be played<br /> - Test that moves alternate between X and O<br /> - Test that a move can be played to a square only once<br /> - Test that a winner can be found in a row<br /> - Test that a winner can be found in a column<br /> - Test that a winner can be found in a diagonal<br /> - Test that a draw can be found</p> <p>So, now it’s your turn. Think about your app and, as a baseline, think of 5–10 tests that you can write.</p> <p>4. Make it work, then make it pretty, then make it fast</p> <p>The title of this section sums it up pretty well, but when you’re working on building out your challenge, you should follow these 3 steps IN THIS ORDER:</p> <p>1. Make it work</p> <p>2. Make it pretty</p> <p>3. Make it fast</p> <p>1. Make it work</p> <p>When you’re given a take-home coding challenge, no matter what you do, the most crucial part of the challenge is to make it work. If you submit an app that has a nice UI, that will not matter if your app does not work or meet all of the requirements. Because building features to spec is a key aspect of your future job as a developer, you first and foremost need to focus on the functionality of your app and prioritize that above all else.</p> <p>This is also key if you are low on or run out of time. Coding challenges can be a lot of work, especially if you want to go above and beyond to ensure that you make it to the next interview round. But, I can guarantee that you will not make it to the next round if your app doesn’t function properly or is missing some key components.</p> <p>So, if you’re building a front-end app, this means focusing on making it work first, and styling/UI last. If you are building a back-end or full-stack app, focus on making it work before trying to refactor your code into the most elegant solution, and only then worry about optimization.</p> <p>Even if you end up without any time to go back and refactor your code or style your UI, having a working app to present is more important. You can always talk to the interviewer about how you would improve your app, and refactoring some of your code might even be part of the next round of interviewing.</p> <p>2. Make it pretty</p> <p>Make it pretty has two interpretations here. One is making the code pretty, and the other is making the UI pretty. Making the code pretty can be done in several ways. First, ensure indentation is consistent and your code is readable. Second, if you got something to work in a quick, hacky way, think about how you can refactor it to be a more elegant solution without overcomplicating it.</p> <p>If you’re doing a front-end or full-stack challenge, you can also make the UI pretty as part of this step. Whether you use a library or write your own custom styles for your app, making the UI look good will show your interviewer that you’re taking the user experience into consideration when building a feature.</p> <p>For some more front-end-focused challenges, you’ll be given a specific mockup to match. In these cases, making sure you’re detail oriented down to the last pixel is incredibly important. Part of your role may involve translating mockups from designers into user interfaces, so companies want to get a sense of how you approach those types of tasks.</p> <p>3. Make it fast</p> <p>Once you’ve made your app work, made it pretty (in the code, UI, or both), it may be time to make it fast! This is where understanding performance and BigO notation comes in handy.</p> <p>You should take a look at your code and see if there are any areas where increasing the scale might be an issue. For example, are you using a double for loop somewhere? What if the arrays you’re looping over become super long?</p> <p>If you think about these kinds of edge cases, you can then come up with plan to improve your code. Taking something that would have been running O(n) and making it O(1) will show that you’re thinking about performance when you’re building things.</p> <p>How to make your code shine</p> <p>When given a take-home coding challenge, many people think about how to build an app that works, but stop there. In this section, I’ll go over things an engineer reviewing your code will look for, so you can take your challenge to the next level and make your code shine.</p> <p>When an engineer is reviewing your code, they will look for several different things. They will likely try to run your app to play around with it and see it working. After that, they will delve into the actual code, looking to see how you organized your app architecture and reading code in individual files.</p> <p>There are several things you can do to make your code stand out. You want your code to be:</p> <p>Readable<br /> Easy to follow<br /> Well organized<br /> Clean (properly indented, free of syntax errors and unnecessary whitespace)</p> <p>These are the basics that don’t take much effort outside of mindfulness to get right. Now let’s talk about three of the more involved code style considerations:</p> <p>1. How to name things</p> <p>2. How to use comments effectively</p> <p>3. How to format your code as you write it</p> <p>1. How to name things</p> <p>Naming is one of the hardest problems in programming. One of the keys to naming things is to make sure you’re naming them in a way that another developer who is unfamiliar with the code can easily jump in and understand.</p> <p>For functions, think about what exactly the function is doing. Is the function checking whether there is a winner on a row of a Tic Tac Toe board? Then a great name would be checkRow. Is your function handling a click on a square of the Tic Tac Toe board? Then a great name would be handleClick.</p> <p>One quick tip: if you find yourself losing your flow because you keep stopping to think of the perfect name, split your process into two steps. First, write working code with any names (like foo, bar, and baz). Then take a second pass through to improve them.</p> <p>2. How to use comments effectively</p> <p>Adding comments can be a great way to capture what you were thinking at the time you wrote a specific piece of code. This can be useful to you, or anyone else who comes across your code in the future and needs to understand it, tweak it, or rewrite it.</p> <p>Think of comments as adding clarity to your code. But, pay attention, because there is such a thing as too many comments.</p> <p>Here is where you most likely do not need comments:</p> <p>When you declare a variable<br /> When you declare a function</p> <p>The variable or function name should be enough to explain exactly what it does. If you need a comment to explain it, then you need to give it a better name!</p> <p>Here are some examples of where comments can be useful:</p> <p>HTML<br /> CSS<br /> Technically tricky lines of code</p> <p>First, let’s talk about HTML. Markup seems pretty self-explanatory, right? So, why would you need comments? Let’s say you have a really long HTML file with A LOT of <div>s. Comments can be a good way to signal which </div> tags close which sections.</p> <p>In CSS, comments are a good way to divide up your styles if you have a lot of styles in one file. This way, when you come back to the code later and want to make a change, it’s easier to find the styles for that one section you need to update.</p> <p>Comments in CSS are also very useful whenever you are hard-coding any math or adding an arbitrary number of pixels as margin, padding, and so on. Comments can be useful to explain things like this that are specific to your application.</p> <p>One of the best uses for comments is when you’ve written code that is technically difficult or just not intuitive. You should always strive for simple, understandable code as much as possible. However, sometimes you will have confusing code — maybe you’ve chained a bunch of methods together or are using a complex regular expression — and it would help to explain what is happening in a comment.</p> <p>You are almost done learning how to make your code shine! Just one more step.</p> <p>3. How to format your code as you write it</p> <p>I’m a STICKLER about formatting when it comes to code. And, it’s not just me. You’ll find that the best engineers also care about well-formatted, clean code. Why? First, it’s much easier to read! Coding can be really challenging, so when code is easier to read, it makes our jobs as developers that much easier. Also, writing clean code sends a message to your interviewers that you take pride in the craft of writing code, and for many teams, this is a big deal.</p> <p>So, how do you make sure the code style sticklers will approve of your code? There are a few simple tricks you can use as you’re working through your coding challenge to ensure the end result comes out clean and you don’t have to spend time at the end reformatting everything.</p> <p>Choose tabs or spaces and be consistent across your entire application (i.e. no 2 spaces in some files, 4 spaces in others)</p> <p>Indent your code properly as you go so that it stays readable and isn’t all over the place</p> <p>Get rid of trailing whitespace! Whitespace can sometimes wreck havoc, so it’s best to just get rid of it as you write your code.</p> <p>Keep your syntax consistent throughout your entire app. If you’re using a linter, this will be easier, but requires setting one up. If you don’t have time to set one up, pay attention. Don’t use ES5 in some places in your app and ES6 in others. Pick one and stick with it!</p> <p>Remove unnecessary logging and debug statements when you’re done using them! Unless logging is part of your application, you’ll want to remove any temporary statements you were using while building your app.</p> <p>Always leave a newline at the end of every file</p> <p>That’s it! It’s pretty simple, and once you’re in the habit of doing this, not only will your code be easier for you to read, but it will also be easier for others to read and maintain. Many new developers haven’t been exposed to very much code maintenance, but trust me, when you have to clean up code someone else has written, you will be more thankful if it was neatly organized to start. Pay it forward!</p> <p>How to take your challenge to the next level</p> <p>Here are 3 ideas for how you can take your coding challenge to the next level:</p> <p>1. Bonuses</p> <p>2. UI/UX design (for front-end or full-stack challenges)</p> <p>3. Data validation and error handling</p> <p>1. Bonuses</p> <p>Not all coding challenges come with bonuses, but if yours does and your goal is to get a job offer, do them! Why? It’s pretty simple. If you go above and beyond in your coding challenge, it will show that you will go above and beyond once you’re hired at this company. Completing bonus requirements is a high competence trigger for the interviewer.</p> <p>2. UI/UX design (for front-end or full-stack challenges)</p> <p>Some front-end or full-stack challenges will mention UI/UX design as a bonus, but if they don’t, putting in some effort to make the UI look nice and be easy to use will go a long way. You can either go the route of adding your own custom CSS or plugging in a library or two to help make your styling even more painless. If you use a library, just make sure that you understand how it works enough to explain how you’ve used it.</p> <p>3. Data validation and error handling</p> <p>Data validation and error handling are key components in production apps. Adding either one of these (or both!) to your challenge will help make it stand out. Many developers who are new to coding and haven’t worked in a production codebase before don’t have a ton of exposure to either of these, so if you add error handling for edge cases it will show that you thought through a lot of different situations.</p> <p>How to write an awesome README</p> <p>You may be done writing code, but you’re not done writing yet — it’s time to write your README.</p> <p>Why you should include a README</p> <p>READMEs are incredibly important, both for professional developers and for job seekers working on take-home challenges. Including a README shows that you care about documentation.</p> <p>Documentation helps spread knowledge across teams and serves as a supplement to your code. Having documentation for your take-home challenge ensures that anyone else (or future you) can jump into your code with a clear understanding of what you’ve built without any guessing games.</p> <p>Your README is also the KEY to making sure that everyone reviewing your challenge has the most painless experience possible. Finally, your README is a way of proving to your reviewer that you successfully met the requirements of the challenge.</p> <p>How to write your README</p> <p>Writing a great README is not hard, and you will stand out a great deal from the other applicants with one. Here are the five sections I’d recommend you include:</p> <p>1. Installation instructions</p> <p>2. Discussion of technologies used</p> <p>3. A section demonstrating that you met the requirements</p> <p>4. If there are bonuses, a section demonstrating that you met them</p> <p>5. For algorithms and data structures, time and space complexity</p> <p>1. Installation instructions</p> <p>When writing your README, don’t make any assumptions. Write out all of the steps to run your app locally and test them yourself. This includes cloning the repo from Github, running installation commands, and starting up a server. Also, make sure to include versions of software that you are using. This will ensure that the developer reviewing your code has a seamless experience setting up and running your app, and if they do happen to run into any trouble due to versioning, they will have all of the information they need right there in the README.</p> <p>2. Discussion of technologies used</p> <p>This section is as simple as it sounds — make a list of all of the technologies you used including frameworks and libraries. If you had to find a library for a specific piece of functionality in your take-home challenge, mention it here and include a link to the docs.</p> <p>3. A section demonstrating that you met the requirements</p> <p>Usually your take-home challenge will come with some sort of requirements spec, so make sure to include a section in your README where you describe the requirements and how you met them. In some cases, you can take the product spec you were given and write a short explanation of how you met each requirement in a list. In other cases, you can simply include a short paragraph explaining how you satisfied the requirements. It’s totally up to you how you do it, just make sure you include it.</p> <p>4. If there are bonuses, a section demonstrating that you met them</p> <p>Similar to the requirements section above, you’ll want to highlight any bonuses you completed while working on the take-home challenge. If you attempted a bonus, but couldn’t quite get something to work, then the README is also a good place to address that. You can discuss the approach or approaches you tried and what worked or didn’t work.</p> <p>5. For algorithms and data structures, time and space complexity</p> <p>If you had to write any algorithms or data structures as part of your take-home challenge, it’s helpful to include the space-time complexity of your final algorithm. This can be done in Big O notation.</p> <p>One final word of advice: write your README in markdown so it looks nice! This will demonstrate that you know (or are willing to learn) another language that will come in handy as a full-time developer.</p> <p>Final steps before you hit send</p> <p>Now that you’ve written your README, you’re almost ready to hit send! Before you do that, take the time to double check all of your work using the following checklist:</p> <p>Re-read the take-home challenge instructions to make sure you didn’t miss any requirements</p> <p>Review your app’s code to ensure that it shines</p> <p>Run your app’s automated tests and make sure they are all passing</p> <p>Test your app manually and make sure everything is working properly</p> <p>Test your app installation instructions from your README</p> <p>Start an email draft and copy your README into it for convenience</p> <p>If requested, make sure to attach a zip file of your code</p> <p>Write an email to your contact at the company</p> <p>Your email can be short and sweet — I always like to highlight something I enjoyed about the challenge or something I learned. Here’s an example:</p> <p>Hi <NAME>,<br /> I hope you had a great week! I had fun diving back into React with this challenge. Here is my Github repo and I’ve included my README below. Please let me know if you have any questions.<br /> Just so you know, I’m interviewing with a few other companies and I just received an offer yesterday — I need to get back to them next week. Of course, I am excited about the opportunity at <COMPANY NAME>, so I’m looking forward to hearing from you!<br /> Thanks,<br /> <NAME></p> <p>Note that you should only mention interviewing with other companies or offer deadlines if either is actually the case. I feel you should be honest and candid about your situation and maintain leverage for a potential future compensation negotiation at the same time.</p> <p>Now, finally, hit send!</p> <p>Conclusion</p> <p>I hope this Essential Guide was helpful and you learned something that you can apply to a take-home challenge or in your day-to-day work. If you have any comments, questions, or other feedback, please don’t hesitate to reach out. You can reach me at jane@fullstackinterviewing.com.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Jane wanted to help others with non-traditional backgrounds succeed on take-home coding challenges. So she wrote an extensive guide for anyone who has received such a challenge and wants to attack it in the best possible way. She divulges mistakes to avoid, how to get organized, and how to go above and beyond.</p> <p>Written by Jane Philipps: <a href= "https://twitter.com/janephilipps">https://twitter.com/janephilipps</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2t5215F">https://fcc.im/2t5215F</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Introduction</p> <p>Hi, I’m Jane. I wrote this guide because I want to help others with non-traditional backgrounds succeed on take-home coding challenges. Please read it, take notes, apply the material, and let me know about your results. You can reach me via email at jane@fullstackinterviewing.com.</p> <p>This guide is intended for anyone who has received a take-home coding challenge as part of the technical interview process and wants to attack it in the best way. This Essential Guide is a distilled version of a longer Ultimate Guide to Take-home Coding Challenges, which goes into much more detail and walks through an example challenge from start to finish.</p> <p>So, if you’ve just received a challenge and are anxious to get started, start here, and then check out the full guide when you want to learn the material more deeply. Good luck!</p> <p>Mistakes to avoid making when working on a take-home coding challenge</p> <p>There are several mistakes you can make with take-home challenges. Some of these are small mistakes that are easily correctable, while others will leave you frustrated and unable to finish your assignment. I want to address these mistakes first, so when you’re given a take-home challenge, you know exactly what not to do.</p> <p>Here are four mistakes you can make:</p> <p>1. Time management and scope creep</p> <p>2. Trying to learn too many new things at once</p> <p>3. Making too many assumptions</p> <p>4. Starting to code right away</p> <p>Let’s look at each one in detail.</p> <p>1. Time management and scope creep</p> <p>Time estimation is one of the hardest problems in programming, and even experienced engineers struggle with it. This plays into take-home challenges in a couple of ways.</p> <p>First, some challenges come with “estimated time.” I usually ignore these, as they are rarely based in reality. Second, some challenges are open-ended. Many people, especially newer developers, will want to add tons of features because they think it will be impressive. Actually, it’s more impressive if you keep the scope relatively narrow, but finish everything you set out to do. In this situation, it’s better to do one thing really well than to do a million things poorly.</p> <p>A good question would be: what counts as “going above and beyond” versus what counts as “scope creep?” My rule of thumb would be if your idea accomplishes or improves on the requirements of the assignment, that is likely a good idea, but if it seems tangentially related or “just cool,” it’s probably scope creep. But, as I describe later, always make it work first.</p> <p>2. Trying to learn too many new things at once</p> <p>While a take-home coding challenge can be an excellent opportunity for learning, it is possible to take on too much learning. If you’re given a challenge where you must use a specific language or framework, but you’re not familiar with it, don’t add additional complexity by setting out to learn something new on top of that. For example, if you are using a new backend framework for a full stack app, stick to a frontend framework that you’re already comfortable with.</p> <p>If your challenge is language/framework agnostic, but you’ve been itching to try out some new technology, pick JUST ONE to experiment with. Between reading the docs, getting your challenge properly set up, and getting used to any new syntax, you will have your hands full. Even learning one thing will eat up a lot of your time, so I would highly suggest limiting yourself to one new piece of technology per challenge.</p> <p>3. Making too many assumptions</p> <p>As a developer, if you make too many assumptions, you are bound to build an application where the requirements are off, or the user experience is bad. When given a set of requirements for a take-home challenge, ALWAYS take the time to review the requirements and make sure you fully understand them. And, if you have any questions at all, always ask.</p> <p>First, this shows that you are willing to ask for help when you don’t quite understand something, an important trait for a developer to demonstrate. Second, many companies will intentionally give you product requirements that are vague or not fully fleshed out in order to see how you react in these situations. They are actually testing your ability to make sense of requirements that may have gaps in them.</p> <p>So, when in doubt, ask questions. Asking questions is also a signal that you are engaged and interested in the challenge.</p> <p>4. Starting to code right away</p> <p>One last mistake you can make is to jump in and start coding right away. I guarantee if you do this, you will regret it. Why? Two reasons:</p> <p>Without proper planning, your code will suffer</p> <p>Without first getting organized and making sure you fully understand ALL of the technical requirements, you may find yourself missing edge cases or rewriting parts of the functionality. I know it seems counter-intuitive, but you will actually SAVE yourself time if you plan ahead.</p> <p>You will spin your wheels trying to get your app set up properly</p> <p>Especially for newer developers, initial app setup can be one of the hardest parts of a take-home coding challenge. It’s not something you do every day, so it often takes some research and reading documentation to get reacquainted with the process and ensure you’re going about it in the best way.</p> <p>So, there you have it — a summary of mistakes to avoid making. You’ll find that a lot of these are also applicable to your day to day work as a developer. In the next section, we’ll dive into further detail on how to get organized before you write a single line of code.</p> <p>Get organized: how to plan before you write a line of code</p> <p>Now it’s time to get to work! But, it’s NOT time to write any code YET.</p> <p>Why?</p> <p>Because, as you’ll see, a lot of the work actually happens before you write a single line of code. This may seem counterintuitive, but again — the more time you spend up front planning, the less time you will spend writing code.</p> <p>So, now you have your coding challenge in hand and you are ready to get started with the planning process. Here are my six suggested steps:</p> <p>1. Understand the requirements and ask any questions</p> <p>2. Identify technical decisions you need to make</p> <p>3. Technical design & whiteboarding</p> <p>4. Test plan</p> <p>5. App setup plan</p> <p>6. Organize your tasks</p> <p>1. Understand the requirements and ask any questions</p> <p>First, you need to make sure you completely, absolutely, 100% understand the requirements of the project. If any part of the requirements are unclear, it is up to you to reach out to your contact and ask questions.</p> <p>Sometimes companies will purposefully make their requirements vague, in order to see how you approach the problem. In these cases, it is always best to ask questions as it shows you are thinking about the problem and not just making assumptions and building an app to a vague spec.</p> <p>2. Identify technical decisions you need to make</p> <p>Your next step will be to identify the technical decisions that you need to make. Making a list of all of your technical decisions up front and thinking about them before you’re in the middle of building your app will help you immensely. Not only will it cut down on time figuring things out later, but it will allow you to make big picture decisions up front, as opposed to trying to focus on both the big picture and the small details at the same time.</p> <p>3. Technical design & whiteboarding</p> <p>Now it’s time to plan out the rest of your app. For anything that you need to draw out, now is the perfect time to do that. Thinking through these decisions at the start serves two purposes:</p> <p>You’ll be able to reference these drawings and your original plan while you’re building your app. Then if you get stuck at any point, you can always come back to your notes.</p> <p>Later, when you are having a discussion with an engineer about your coding challenge, you can use these notes as a reference when they ask you why you made certain design or architecture decisions.</p> <p>Once you’ve thought through and answered some of the bigger design and architecture questions for your challenge, the next step is research. If you’re planning to use a new technology or something you’re a bit rusty with, use this time to search for documentation and other resources.</p> <p>4. Test plan</p> <p>Another very important step to take before writing a line of code is developing a test plan. Although you won’t get peer feedback on this test plan, it will help you look at the challenge from a different angle, making sure you’re meeting all of the requirements. By thinking through and writing out a test plan before you start coding, you are able to brainstorm possible edge cases that you should account for in your code and you will use this as a basis for testing your app later.</p> <p>5. App setup plan</p> <p>If you’re starting an app from scratch, figure out if there are any generators you can use to make your app setup easier and faster. Application setup is one of the hardest parts of take-home coding challenges, because it’s something that developers do rather infrequently. Best practices are always changing, so it’s easy to forget how to do. Also, when setting up an app with a specific combination of technologies for the first time, it can be challenging to get everything configured and working together properly.</p> <p>If you are not using a generator, reading documentation and finding working examples are the two most important steps you can take. Being able to play with a working example and compare it to your own app will help you if you get stuck.</p> <p>6. Organize your tasks</p> <p>The last step before you start coding is to break down and organize your tasks. Breaking down your tasks is essential because it will help you stay on track as you’re working on your challenge, and it will give you a game plan for execution. Note that you shouldn’t be a perfectionist here, because there will always be unexpected bumps in the road.</p> <p>Here is an example task list for a classic Tic Tac Toe app:</p> <p>- Understand requirements - Choose technologies - Brainstorm test plan - Hello World app setup - Build board with HTML/CSS - Implement Tic Tac Toe gameplay with Javascript - Add reset button - Make board responsive - Add ability to add additional boards - Error handling & tests - Code cleanup - README</p> <p>Some of these tasks can be broken down even further into smaller steps. For example, in order to implement the Tic Tac Toe gameplay with Javascript, here are some smaller tasks:</p> <p>- Add a click handler to each square that logs a message - Get click handler to add an X to the square that is clicked - Get clicks to alternate between X and O - Don’t allow a square to be clicked more than once - Implement a function to find the winner and end the game - Handle a tie game</p> <p>3. Writing tests: just do it!</p> <p>Testing can be overwhelming, because there are so many different types of tests: acceptance tests, integration tests, and unit tests, not to mention test driven development vs. ad hoc testing.</p> <p>Why should you include tests in your take-home coding challenge? It’s simple: your tests will make your submission shine.</p> <p>First, adding tests shows that you know or are willing to learn another technology/framework. It also demonstrates that you take ownership of what you’re building, because you are taking responsibility to make sure it works. Testing also shows that you’ve considered edge cases, which many newer engineers often overlook.</p> <p>Many companies take tests very seriously. Some will not tell you that they expect tests for your coding challenge, but will automatically reject you if you leave them out. Therefore, my recommendation is to write tests no matter what when given a take-home challenge. Not only will it make you a better developer, but for companies that were not expecting tests, you will stand out even more!</p> <p>How do you go about writing a tests? First, create a plan. Here’s my 80/20 suggestion for how to come up with the right test cases:</p> <p>1. Test the happy path</p> <p>For the classic Tic Tac Toe example, the happy path is starting with an empty board and playing a game until X wins.</p> <p>2. Think about variations on the happy path</p> <p>A variation on the happy path would be if O wins, or if there is a tie game.</p> <p>3. Think of edge cases</p> <p>An edge case would be if a player tries to play a move in the same square more than once.</p> <p>4. Test anything that is complex</p> <p>The algorithm to find the winner is the most complex part of this example.</p> <p>Here’s a sample test plan:</p> <p>- Test that the initial state of the board is correct (i.e. board is visible and empty) - Test that a move can be played - Test that moves alternate between X and O - Test that a move can be played to a square only once - Test that a winner can be found in a row - Test that a winner can be found in a column - Test that a winner can be found in a diagonal - Test that a draw can be found</p> <p>So, now it’s your turn. Think about your app and, as a baseline, think of 5–10 tests that you can write.</p> <p>4. Make it work, then make it pretty, then make it fast</p> <p>The title of this section sums it up pretty well, but when you’re working on building out your challenge, you should follow these 3 steps IN THIS ORDER:</p> <p>1. Make it work</p> <p>2. Make it pretty</p> <p>3. Make it fast</p> <p>1. Make it work</p> <p>When you’re given a take-home coding challenge, no matter what you do, the most crucial part of the challenge is to make it work. If you submit an app that has a nice UI, that will not matter if your app does not work or meet all of the requirements. Because building features to spec is a key aspect of your future job as a developer, you first and foremost need to focus on the functionality of your app and prioritize that above all else.</p> <p>This is also key if you are low on or run out of time. Coding challenges can be a lot of work, especially if you want to go above and beyond to ensure that you make it to the next interview round. But, I can guarantee that you will not make it to the next round if your app doesn’t function properly or is missing some key components.</p> <p>So, if you’re building a front-end app, this means focusing on making it work first, and styling/UI last. If you are building a back-end or full-stack app, focus on making it work before trying to refactor your code into the most elegant solution, and only then worry about optimization.</p> <p>Even if you end up without any time to go back and refactor your code or style your UI, having a working app to present is more important. You can always talk to the interviewer about how you would improve your app, and refactoring some of your code might even be part of the next round of interviewing.</p> <p>2. Make it pretty</p> <p>Make it pretty has two interpretations here. One is making the code pretty, and the other is making the UI pretty. Making the code pretty can be done in several ways. First, ensure indentation is consistent and your code is readable. Second, if you got something to work in a quick, hacky way, think about how you can refactor it to be a more elegant solution without overcomplicating it.</p> <p>If you’re doing a front-end or full-stack challenge, you can also make the UI pretty as part of this step. Whether you use a library or write your own custom styles for your app, making the UI look good will show your interviewer that you’re taking the user experience into consideration when building a feature.</p> <p>For some more front-end-focused challenges, you’ll be given a specific mockup to match. In these cases, making sure you’re detail oriented down to the last pixel is incredibly important. Part of your role may involve translating mockups from designers into user interfaces, so companies want to get a sense of how you approach those types of tasks.</p> <p>3. Make it fast</p> <p>Once you’ve made your app work, made it pretty (in the code, UI, or both), it may be time to make it fast! This is where understanding performance and BigO notation comes in handy.</p> <p>You should take a look at your code and see if there are any areas where increasing the scale might be an issue. For example, are you using a double for loop somewhere? What if the arrays you’re looping over become super long?</p> <p>If you think about these kinds of edge cases, you can then come up with plan to improve your code. Taking something that would have been running O(n) and making it O(1) will show that you’re thinking about performance when you’re building things.</p> <p>How to make your code shine</p> <p>When given a take-home coding challenge, many people think about how to build an app that works, but stop there. In this section, I’ll go over things an engineer reviewing your code will look for, so you can take your challenge to the next level and make your code shine.</p> <p>When an engineer is reviewing your code, they will look for several different things. They will likely try to run your app to play around with it and see it working. After that, they will delve into the actual code, looking to see how you organized your app architecture and reading code in individual files.</p> <p>There are several things you can do to make your code stand out. You want your code to be:</p> <p>Readable Easy to follow Well organized Clean (properly indented, free of syntax errors and unnecessary whitespace)</p> <p>These are the basics that don’t take much effort outside of mindfulness to get right. Now let’s talk about three of the more involved code style considerations:</p> <p>1. How to name things</p> <p>2. How to use comments effectively</p> <p>3. How to format your code as you write it</p> <p>1. How to name things</p> <p>Naming is one of the hardest problems in programming. One of the keys to naming things is to make sure you’re naming them in a way that another developer who is unfamiliar with the code can easily jump in and understand.</p> <p>For functions, think about what exactly the function is doing. Is the function checking whether there is a winner on a row of a Tic Tac Toe board? Then a great name would be checkRow. Is your function handling a click on a square of the Tic Tac Toe board? Then a great name would be handleClick.</p> <p>One quick tip: if you find yourself losing your flow because you keep stopping to think of the perfect name, split your process into two steps. First, write working code with any names (like foo, bar, and baz). Then take a second pass through to improve them.</p> <p>2. How to use comments effectively</p> <p>Adding comments can be a great way to capture what you were thinking at the time you wrote a specific piece of code. This can be useful to you, or anyone else who comes across your code in the future and needs to understand it, tweak it, or rewrite it.</p> <p>Think of comments as adding clarity to your code. But, pay attention, because there is such a thing as too many comments.</p> <p>Here is where you most likely do not need comments:</p> <p>When you declare a variable When you declare a function</p> <p>The variable or function name should be enough to explain exactly what it does. If you need a comment to explain it, then you need to give it a better name!</p> <p>Here are some examples of where comments can be useful:</p> <p>HTML CSS Technically tricky lines of code</p> <p>First, let’s talk about HTML. Markup seems pretty self-explanatory, right? So, why would you need comments? Let’s say you have a really long HTML file with A LOT of s. Comments can be a good way to signal which  tags close which sections.</p> <p>In CSS, comments are a good way to divide up your styles if you have a lot of styles in one file. This way, when you come back to the code later and want to make a change, it’s easier to find the styles for that one section you need to update.</p> <p>Comments in CSS are also very useful whenever you are hard-coding any math or adding an arbitrary number of pixels as margin, padding, and so on. Comments can be useful to explain things like this that are specific to your application.</p> <p>One of the best uses for comments is when you’ve written code that is technically difficult or just not intuitive. You should always strive for simple, understandable code as much as possible. However, sometimes you will have confusing code — maybe you’ve chained a bunch of methods together or are using a complex regular expression — and it would help to explain what is happening in a comment.</p> <p>You are almost done learning how to make your code shine! Just one more step.</p> <p>3. How to format your code as you write it</p> <p>I’m a STICKLER about formatting when it comes to code. And, it’s not just me. You’ll find that the best engineers also care about well-formatted, clean code. Why? First, it’s much easier to read! Coding can be really challenging, so when code is easier to read, it makes our jobs as developers that much easier. Also, writing clean code sends a message to your interviewers that you take pride in the craft of writing code, and for many teams, this is a big deal.</p> <p>So, how do you make sure the code style sticklers will approve of your code? There are a few simple tricks you can use as you’re working through your coding challenge to ensure the end result comes out clean and you don’t have to spend time at the end reformatting everything.</p> <p>Choose tabs or spaces and be consistent across your entire application (i.e. no 2 spaces in some files, 4 spaces in others)</p> <p>Indent your code properly as you go so that it stays readable and isn’t all over the place</p> <p>Get rid of trailing whitespace! Whitespace can sometimes wreck havoc, so it’s best to just get rid of it as you write your code.</p> <p>Keep your syntax consistent throughout your entire app. If you’re using a linter, this will be easier, but requires setting one up. If you don’t have time to set one up, pay attention. Don’t use ES5 in some places in your app and ES6 in others. Pick one and stick with it!</p> <p>Remove unnecessary logging and debug statements when you’re done using them! Unless logging is part of your application, you’ll want to remove any temporary statements you were using while building your app.</p> <p>Always leave a newline at the end of every file</p> <p>That’s it! It’s pretty simple, and once you’re in the habit of doing this, not only will your code be easier for you to read, but it will also be easier for others to read and maintain. Many new developers haven’t been exposed to very much code maintenance, but trust me, when you have to clean up code someone else has written, you will be more thankful if it was neatly organized to start. Pay it forward!</p> <p>How to take your challenge to the next level</p> <p>Here are 3 ideas for how you can take your coding challenge to the next level:</p> <p>1. Bonuses</p> <p>2. UI/UX design (for front-end or full-stack challenges)</p> <p>3. Data validation and error handling</p> <p>1. Bonuses</p> <p>Not all coding challenges come with bonuses, but if yours does and your goal is to get a job offer, do them! Why? It’s pretty simple. If you go above and beyond in your coding challenge, it will show that you will go above and beyond once you’re hired at this company. Completing bonus requirements is a high competence trigger for the interviewer.</p> <p>2. UI/UX design (for front-end or full-stack challenges)</p> <p>Some front-end or full-stack challenges will mention UI/UX design as a bonus, but if they don’t, putting in some effort to make the UI look nice and be easy to use will go a long way. You can either go the route of adding your own custom CSS or plugging in a library or two to help make your styling even more painless. If you use a library, just make sure that you understand how it works enough to explain how you’ve used it.</p> <p>3. Data validation and error handling</p> <p>Data validation and error handling are key components in production apps. Adding either one of these (or both!) to your challenge will help make it stand out. Many developers who are new to coding and haven’t worked in a production codebase before don’t have a ton of exposure to either of these, so if you add error handling for edge cases it will show that you thought through a lot of different situations.</p> <p>How to write an awesome README</p> <p>You may be done writing code, but you’re not done writing yet — it’s time to write your README.</p> <p>Why you should include a README</p> <p>READMEs are incredibly important, both for professional developers and for job seekers working on take-home challenges. Including a README shows that you care about documentation.</p> <p>Documentation helps spread knowledge across teams and serves as a supplement to your code. Having documentation for your take-home challenge ensures that anyone else (or future you) can jump into your code with a clear understanding of what you’ve built without any guessing games.</p> <p>Your README is also the KEY to making sure that everyone reviewing your challenge has the most painless experience possible. Finally, your README is a way of proving to your reviewer that you successfully met the requirements of the challenge.</p> <p>How to write your README</p> <p>Writing a great README is not hard, and you will stand out a great deal from the other applicants with one. Here are the five sections I’d recommend you include:</p> <p>1. Installation instructions</p> <p>2. Discussion of technologies used</p> <p>3. A section demonstrating that you met the requirements</p> <p>4. If there are bonuses, a section demonstrating that you met them</p> <p>5. For algorithms and data structures, time and space complexity</p> <p>1. Installation instructions</p> <p>When writing your README, don’t make any assumptions. Write out all of the steps to run your app locally and test them yourself. This includes cloning the repo from Github, running installation commands, and starting up a server. Also, make sure to include versions of software that you are using. This will ensure that the developer reviewing your code has a seamless experience setting up and running your app, and if they do happen to run into any trouble due to versioning, they will have all of the information they need right there in the README.</p> <p>2. Discussion of technologies used</p> <p>This section is as simple as it sounds — make a list of all of the technologies you used including frameworks and libraries. If you had to find a library for a specific piece of functionality in your take-home challenge, mention it here and include a link to the docs.</p> <p>3. A section demonstrating that you met the requirements</p> <p>Usually your take-home challenge will come with some sort of requirements spec, so make sure to include a section in your README where you describe the requirements and how you met them. In some cases, you can take the product spec you were given and write a short explanation of how you met each requirement in a list. In other cases, you can simply include a short paragraph explaining how you satisfied the requirements. It’s totally up to you how you do it, just make sure you include it.</p> <p>4. If there are bonuses, a section demonstrating that you met them</p> <p>Similar to the requirements section above, you’ll want to highlight any bonuses you completed while working on the take-home challenge. If you attempted a bonus, but couldn’t quite get something to work, then the README is also a good place to address that. You can discuss the approach or approaches you tried and what worked or didn’t work.</p> <p>5. For algorithms and data structures, time and space complexity</p> <p>If you had to write any algorithms or data structures as part of your take-home challenge, it’s helpful to include the space-time complexity of your final algorithm. This can be done in Big O notation.</p> <p>One final word of advice: write your README in markdown so it looks nice! This will demonstrate that you know (or are willing to learn) another language that will come in handy as a full-time developer.</p> <p>Final steps before you hit send</p> <p>Now that you’ve written your README, you’re almost ready to hit send! Before you do that, take the time to double check all of your work using the following checklist:</p> <p>Re-read the take-home challenge instructions to make sure you didn’t miss any requirements</p> <p>Review your app’s code to ensure that it shines</p> <p>Run your app’s automated tests and make sure they are all passing</p> <p>Test your app manually and make sure everything is working properly</p> <p>Test your app installation instructions from your README</p> <p>Start an email draft and copy your README into it for convenience</p> <p>If requested, make sure to attach a zip file of your code</p> <p>Write an email to your contact at the company</p> <p>Your email can be short and sweet — I always like to highlight something I enjoyed about the challenge or something I learned. Here’s an example:</p> <p>Hi , I hope you had a great week! I had fun diving back into React with this challenge. Here is my Github repo and I’ve included my README below. Please let me know if you have any questions. Just so you know, I’m interviewing with a few other companies and I just received an offer yesterday — I need to get back to them next week. Of course, I am excited about the opportunity at , so I’m looking forward to hearing from you! Thanks, </p> <p>Note that you should only mention interviewing with other companies or offer deadlines if either is actually the case. I feel you should be honest and candid about your situation and maintain leverage for a potential future compensation negotiation at the same time.</p> <p>Now, finally, hit send!</p> <p>Conclusion</p> <p>I hope this Essential Guide was helpful and you learned something that you can apply to a take-home challenge or in your day-to-day work. If you have any comments, questions, or other feedback, please don’t hesitate to reach out. You can reach me at jane@fullstackinterviewing.com.</p> <p> </p>]]></content:encoded>
			<enclosure length="33899042" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._26_-_The_Essential_Guide_to_Take-Home_Coding_Challenges_final.mp3?dest-id=603849" />
			<itunes:duration>28:12</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Jane wanted to help others with non-traditional backgrounds succeed on take-home coding challenges. So she wrote an extensive guide for anyone who has received such a challenge and wants to attack it in the best possible way. She divulges mistakes to...]]></itunes:subtitle>
			<itunes:summary>Jane wanted to help others with non-traditional backgrounds succeed on take-home coding challenges. So she wrote an extensive guide for anyone who wants to attack their challenge in the best possible way. She divulges mistakes to avoid, how to get organized, and how to go above and beyond.</itunes:summary>
			<itunes:episode>26</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 25 - I'm 56 and learning to code. Here's an epic beat-down of my critical inner self.</title>
			<itunes:title>I'm 56 and learning to code. Here's my epic beat-down of my critical inner self.</itunes:title>
			<pubDate>Mon, 09 Apr 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ee52f7bda41596c5be933519bd973b65]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-25-im-56-and-learning-to-code-heres-an-epic-beat-down-of-my-critical-inner-self]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>If you're over the age of 20, you might think you're too old to learn how to code. But 56 year old VM Vaughn's here to tell you that's not true. In this podcast, he shares his epic beat-down of his critical inner self and lays out his path towards an exciting second career.</p> <p>Written by VM Vaughn: <a href= "https://twitter.com/vmvaughn">https://twitter.com/vmvaughn</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2oJnBY1">https://fcc.im/2oJnBY1</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>I’m 56 years old and learning to code.</p> <p>Why? Because I love it. And I’ve got a knack for it.</p> <p>That doesn’t mean it’s easy. It’s hard. And that’s OK.</p> <p>I love losing myself in an algorithm challenge. I love squeezing in a few extra minutes testing just one more thing. I love thinking “maybe I’ve got it this time.” And getting to “Yes! It finally works!”</p> <p>But here’s the thing. I’ve never been one for hobbies. I don’t like activities that don’t pay. I can’t keep on doing something simply for the fun of it.</p> <p>What I work on during my off time has to have some economic upside for me.</p> <p>OK, coding pays. It can pay big. So what’s the problem?</p> <p>Well, before I could fully embrace myself as a 56-year-old programming rookie, I had to deal with my Critical Inner Self (let’s call him CIS for short).</p> <p>Learning all this stuff is hard enough without my CIS whispering in my ear the whole time.</p> <p>If I can give my CIS an epic beat-down, then I should be able to handle anyone who appears to work on his behalf. And these agents of CIS often appear out of no where, asking critical questions.</p> <p>CIS: Why are you doing this at your age?</p> <p>Me: What you really mean is how much longer will I live. And do I really have enough time left to make money programming. Let’s break that down.</p> <p>I’m an American. My life expectancy is 78.8 years. So that means I’ve got a better than average chance of living another 22.8 years. That may not seem like a lot when you’re 20, but I’m 56 and dancing in the street over here.</p> <p>(And because I’m 56, I’ve got better odds of making it to 78 than a 20 year old. But that’s beside the point.)</p> <p>Now, let’s say I’m a snail and it takes me 4 years to finish Free Code Camp’s 1-year curriculum to become a fledgling full stack developer. That puts me at 60 years old looking for a job as a junior developer.</p> <p>Let’s say it takes me another 2 years to land a job because of my age, and let’s assume that 70 is the limit for how long an employer wants me hanging around.</p> <p>That’s 8 years to practice my craft. That’s plenty of runway to get pretty good. And because I’ve been around the block and know the grass ain’t always greener on the other side, I’m much more likely to stay with that employer who hired me first.</p> <p>What 20-year-old stays with their first developer job that long?</p> <p>CIS: But who’s going to pay you the kind of money that you already make now?</p> <p>Me: You could ask me that even if I didn’t learn to program. But I know what you’re getting at. Chances are an entry level developer job will pay me less than I’m making now.</p> <p>Well here’s a thought for you. My paycheck is less today than it was five years ago. And that’s with 5 more years of experience.</p> <p>There’s no guarantee that the job I have now will last. And when it doesn’t, I’ll have to find a new job anyway. At my age, I very well may have to accept entry level wages doing something… anything.</p> <p>I’d rather have the skills and portfolio to go for an entry level position that can lead to much greater earnings — or at least the ability to beat the bushes and pick up some freelance work.</p> <p>CIS: But all the big tech companies want to hire young kids right out of college.</p> <p>Me: That’s easy. I don’t want to move to Silicon Valley and I’m not looking to work for a big tech company.</p> <p>You’ve read the same stats as me. By 2020 there will be 1,000,000 more programming jobs than people trained to fill them. Not all of those openings will be at the “big 4” — Google, Facebook, Amazon, or Microsoft. In fact, most programming jobs aren’t even in the technology industry.</p> <p>My first computer job was in a hospital. I didn’t program, but most of the employees in the IT department were programmers.</p> <p>And that was way back in 1982.</p> <p>CIS: Then how are you going to get a job?</p> <p>Me: First things first, I’m going to apply to a lot of jobs, build a network of hiring managers, and make sure I get a lot of interviews. It’s a numbers game and I’m going to play it.</p> <p>All that wonderful stuff I did before the year 2000? Gone from my resume.</p> <p>Once I’m in the door for an interview, it’s not like I’m going to act like someone’s grandfather. I’ll be just another candidate who’s passionate about programming and excited to learn more. And I won’t act like I know more than I do.</p> <p>And most importantly, I’ll be prepared for common coding challenges and whiteboard interview questions.</p> <p>I’m sure I’ll mess up a few interviews. But the good news? There are plenty of companies out there hiring developers. I’ll keep trying.</p> <p>CIS: Programming teams are full of young people. How are you going to fit in?</p> <p>Me: If by “fit in” you mean how do I become one of the bros? In that case, you’re right. I won’t fit in.</p> <p>At my current job, I show up every day knowing that somebody at work has something to teach me. So I listen. I don’t presume to know everything that’s going on in my boss’s day, so I give him a break. And when I mess up, I say so.</p> <p>That’s how I’ve fit in at every job I’ve had over the last 36 years.</p> <p>CIS: You’ve got a decent job. Why not just accept it? You are where you’re going to be, especially at your age.</p> <p>Me: Accept it? Too late. I’ve already re-framed it.</p> <p>Learning to program energizes me. Working toward a second career gives me the boost I need to get through the daily slog of the one I’ve got now.</p> <p>And really? You know where I’m going to be at 60, 70, and (hopefully) beyond? I sure don’t.</p> <p>CIS: How do you know you’re not just wasting time?</p> <p>Me: What you’re really asking is: “What if you don’t get a 9-to-5 paycheck after this?”</p> <p>My answer: “So what?”</p> <p>I can get good enough, in time enough, to program well enough:</p> <p>to build web apps to build an audience…and offer them even more value from my billable services.</p> <p>to grow a web business helping local businesses grow and nurture their own customers.</p> <p>to combine my programming know-how with existing SaaS APIs to offer a productized service to a niche community.</p> <p>To put it another way, I can learn how to build an idea. To put it out there for people to use. To offer value. To make money.</p> <p>With or without a 9-to-5 J.O.B.</p> <p>So that’s why even though I’m 56, I’m learning to code.</p>]]></description>
			<content:encoded><![CDATA[<p>If you're over the age of 20, you might think you're too old to learn how to code. But 56 year old VM Vaughn's here to tell you that's not true. In this podcast, he shares his epic beat-down of his critical inner self and lays out his path towards an exciting second career.</p> <p>Written by VM Vaughn: <a href= "https://twitter.com/vmvaughn">https://twitter.com/vmvaughn</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2oJnBY1">https://fcc.im/2oJnBY1</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>I’m 56 years old and learning to code.</p> <p>Why? Because I love it. And I’ve got a knack for it.</p> <p>That doesn’t mean it’s easy. It’s hard. And that’s OK.</p> <p>I love losing myself in an algorithm challenge. I love squeezing in a few extra minutes testing just one more thing. I love thinking “maybe I’ve got it this time.” And getting to “Yes! It finally works!”</p> <p>But here’s the thing. I’ve never been one for hobbies. I don’t like activities that don’t pay. I can’t keep on doing something simply for the fun of it.</p> <p>What I work on during my off time has to have some economic upside for me.</p> <p>OK, coding pays. It can pay big. So what’s the problem?</p> <p>Well, before I could fully embrace myself as a 56-year-old programming rookie, I had to deal with my Critical Inner Self (let’s call him CIS for short).</p> <p>Learning all this stuff is hard enough without my CIS whispering in my ear the whole time.</p> <p>If I can give my CIS an epic beat-down, then I should be able to handle anyone who appears to work on his behalf. And these agents of CIS often appear out of no where, asking critical questions.</p> <p>CIS: Why are you doing this at your age?</p> <p>Me: What you really mean is how much longer will I live. And do I really have enough time left to make money programming. Let’s break that down.</p> <p>I’m an American. My life expectancy is 78.8 years. So that means I’ve got a better than average chance of living another 22.8 years. That may not seem like a lot when you’re 20, but I’m 56 and dancing in the street over here.</p> <p>(And because I’m 56, I’ve got better odds of making it to 78 than a 20 year old. But that’s beside the point.)</p> <p>Now, let’s say I’m a snail and it takes me 4 years to finish Free Code Camp’s 1-year curriculum to become a fledgling full stack developer. That puts me at 60 years old looking for a job as a junior developer.</p> <p>Let’s say it takes me another 2 years to land a job because of my age, and let’s assume that 70 is the limit for how long an employer wants me hanging around.</p> <p>That’s 8 years to practice my craft. That’s plenty of runway to get pretty good. And because I’ve been around the block and know the grass ain’t always greener on the other side, I’m much more likely to stay with that employer who hired me first.</p> <p>What 20-year-old stays with their first developer job that long?</p> <p>CIS: But who’s going to pay you the kind of money that you already make now?</p> <p>Me: You could ask me that even if I didn’t learn to program. But I know what you’re getting at. Chances are an entry level developer job will pay me less than I’m making now.</p> <p>Well here’s a thought for you. My paycheck is less today than it was five years ago. And that’s with 5 more years of experience.</p> <p>There’s no guarantee that the job I have now will last. And when it doesn’t, I’ll have to find a new job anyway. At my age, I very well may have to accept entry level wages doing something… anything.</p> <p>I’d rather have the skills and portfolio to go for an entry level position that can lead to much greater earnings — or at least the ability to beat the bushes and pick up some freelance work.</p> <p>CIS: But all the big tech companies want to hire young kids right out of college.</p> <p>Me: That’s easy. I don’t want to move to Silicon Valley and I’m not looking to work for a big tech company.</p> <p>You’ve read the same stats as me. By 2020 there will be 1,000,000 more programming jobs than people trained to fill them. Not all of those openings will be at the “big 4” — Google, Facebook, Amazon, or Microsoft. In fact, most programming jobs aren’t even in the technology industry.</p> <p>My first computer job was in a hospital. I didn’t program, but most of the employees in the IT department were programmers.</p> <p>And that was way back in 1982.</p> <p>CIS: Then how are you going to get a job?</p> <p>Me: First things first, I’m going to apply to a lot of jobs, build a network of hiring managers, and make sure I get a lot of interviews. It’s a numbers game and I’m going to play it.</p> <p>All that wonderful stuff I did before the year 2000? Gone from my resume.</p> <p>Once I’m in the door for an interview, it’s not like I’m going to act like someone’s grandfather. I’ll be just another candidate who’s passionate about programming and excited to learn more. And I won’t act like I know more than I do.</p> <p>And most importantly, I’ll be prepared for common coding challenges and whiteboard interview questions.</p> <p>I’m sure I’ll mess up a few interviews. But the good news? There are plenty of companies out there hiring developers. I’ll keep trying.</p> <p>CIS: Programming teams are full of young people. How are you going to fit in?</p> <p>Me: If by “fit in” you mean how do I become one of the bros? In that case, you’re right. I won’t fit in.</p> <p>At my current job, I show up every day knowing that somebody at work has something to teach me. So I listen. I don’t presume to know everything that’s going on in my boss’s day, so I give him a break. And when I mess up, I say so.</p> <p>That’s how I’ve fit in at every job I’ve had over the last 36 years.</p> <p>CIS: You’ve got a decent job. Why not just accept it? You are where you’re going to be, especially at your age.</p> <p>Me: Accept it? Too late. I’ve already re-framed it.</p> <p>Learning to program energizes me. Working toward a second career gives me the boost I need to get through the daily slog of the one I’ve got now.</p> <p>And really? You know where I’m going to be at 60, 70, and (hopefully) beyond? I sure don’t.</p> <p>CIS: How do you know you’re not just wasting time?</p> <p>Me: What you’re really asking is: “What if you don’t get a 9-to-5 paycheck after this?”</p> <p>My answer: “So what?”</p> <p>I can get good enough, in time enough, to program well enough:</p> <p>to build web apps to build an audience…and offer them even more value from my billable services.</p> <p>to grow a web business helping local businesses grow and nurture their own customers.</p> <p>to combine my programming know-how with existing SaaS APIs to offer a productized service to a niche community.</p> <p>To put it another way, I can learn how to build an idea. To put it out there for people to use. To offer value. To make money.</p> <p>With or without a 9-to-5 J.O.B.</p> <p>So that’s why even though I’m 56, I’m learning to code.</p>]]></content:encoded>
			<enclosure length="6802956" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Im_56_and_learning_to_code._Heres_an_epic_beat-down_of_my_critical_inner_self.mp3?dest-id=603849" />
			<itunes:duration>07:05</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[If you're over the age of 20, you might think you're too old to learn how to code. But 56 year old VM Vaughn's here to tell you that's not true. In this podcast, he shares his epic beat-down of his critical inner self and lays out his path towards an...]]></itunes:subtitle>
			<itunes:summary>If you're over the age of 20, you might think you're too old to learn how to code. But 56 year old VM Vaughn's here to tell you that's not true. In this podcast, he shares his epic beat-down of his critical inner self and lays out his path towards an exciting second career.</itunes:summary>
			<itunes:episode>25</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 24 - How to run a successful development process (even if you're not technical)</title>
			<itunes:title>How to run a successful development process (even if you're not technical)</itunes:title>
			<pubDate>Mon, 02 Apr 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[f65b41b1b5d8fa3e6af405e1e615b03f]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-24-how-to-run-a-successful-development-process-even-if-youre-not-technical]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>This episode is for anyone who wants to effectively orchestrate a development process without becoming the butt of their team’s water-cooler jokes. It's more attainable than you think, because it's all about process. Don't be a Bill Lumbergh - be awesome.</p> <p>Written and read by Jonathan Solórzano-Hamilton: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>Original article: <a href= "https://fcc.im/2GW6xFX">https://fcc.im/2GW6xFX</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Laurence Peter formulated the principle that “managers rise to the level of their incompetence” in 1969. In particular, non-technical leaders have earned a poor reputation with software developers.</p> <p>Office Space depicts the non-technical manager in Bill Lumbergh, pictured above. Dilbert provides the classic “Pointy-Haired Boss.”</p> <p>This article is for anyone who wants to effectively orchestrate a development process without becoming the butt of your team’s water-cooler jokes. I’ll share what I’ve learned over the years managing development and release processes as a manager and software architect at UCLA and Stanford University.</p> <p>The biggest lesson I’ve learned is that the key to sustaining successful software releases is completely non-technical.</p> <p>It’s about process.</p> <p>Some aspects of a development process benefit from technical know-how, but it’s not required. Successfully releasing software into production is much more a question of robust process architecture than design or code alone.</p> <p>For the purpose of this article, we’ll assume you’ve already agreed to start building something. The product approval pipeline is a different process. Today we’re focusing on getting the agreed-upon product from concept to production.</p> <p>What to build</p> <p>Your team needs to assemble a clear roadmap for their code. Architects and manufacturers use blueprints. You should too.</p> <p>Your roadmap should include a set of schematics which each fulfill a different purpose. These schematics differ for individual applications. A user-interface mock-up, application architecture diagram, and business process model are common. More detailed component diagrams such as Unified Modeling Language (UML) diagrams and flow models are often useful as well.</p> <p>Technical expertise lets you use these schematics to critique your team’s architecture and ensure they’re on the right track. Even without technical skill, these schematics will be critical.</p> <p>You can use them to drive productive conversations about product completion. No more will you have to draw a “% complete” out of thin air or best-guess from the development team. You can track the status of each item on the diagram to determine how close the app is to completion. You can also project future velocity based on how quickly the team completed prior components.</p> <p>There is no “right” amount of pre-development documentation, but there is one wrong amount: none. Work out with your team what constitutes an acceptable roadmap before they start coding. The first checkpoint in your development process will be to review this documentation and ensure they’ve met this agreement.</p> <p>What not to build</p> <p>Your team can’t build everything. Nor should they. You need to ensure that your developers have a laser focus on what they actually need to build.</p> <p>Why are you building this app in the first place? Define the key differentiation from existing products. 80% of your team’s time should go toward supporting that differentiation.</p> <p>The schematics you should now have will be helpful here. Does your application include a logging component? A sign-up and login process? There are already excellent free, open-source software (FOSS) frameworks in most languages for these components. Some are available under extremely permissive licenses.</p> <p>Tesla provides a great illustration of this concept. Their first key differentiator was to use a lithium-ion battery to make electric cars competitive with gas. Lithium-ion achieved this by reducing battery weight and increasing range.</p> <p>The first Tesla prototype simply converted a pre-existing electric sports car from lead-acid to lithium batteries. Their first production run was mostly a Lotus Elise roadster (a pre-existing sports car) that had a Tesla battery and motor.</p> <p>The lesson for your team is to use what already exists wherever possible. If you can use or adapt a FOSS package, do it. Even if you need to license for-pay code from somewhere else, it’s almost always worth it.</p> <p>Get all the scaffolding in place quickly so you can test your “lithium-ion battery.” Then you can iterate through and replace whatever will help further differentiate your product without stressing about delaying production-readiness.</p> <p>The second checkpoint of your development process is to review the planned architecture with your team and identify what very limited part they intend to build from scratch.</p> <p>If it sounds like something that already exists, and it’s not the core focus of your product, challenge your team to see why they believe they need to re-do it.</p> <p>Don’t just throw it over the wall</p> <p>Once you have identified what pre-built technologies you’ll use, make sure to review these with your production support group.</p> <p>Database and server administrators will need to plan for installing and supporting any new technologies. This is the third checkpoint in your development process: operations readiness.</p> <p>Keeping the production support team in the loop early is 90% of the secret sauce known as “DevOps.” If you haven’t heard of this, DevOps is the idea that software development and production operations teams should unify under common goals.</p> <p>The proposed benefits include much quicker releases, more reliable code, and more time spent developing due to automation. These are all great boons, but they follow from a strong communication process. Automation follows, not replaces, collaboration.</p> <p>Implementation and Testing</p> <p>Now your team writes the code. Collaborate with your implementation team to devise a process for dividing the work among themselves. There’s no one-size-fits-all approach, and this is where the “soft skills” of leadership dramatically outweigh any technical skill.</p> <p>Some developers will want to hog all the “interesting” work and ignore any drudge work. They may believe that they’re the smartest person in the room and should get their pick of assignments. Others may resist change and only want to do the same kind of work they’ve done before.</p> <p>Lead your team into an equitable distribution of work. Challenge everyone to grow appropriately and to share and collaborate.</p> <p>One more technical aspect of the implementation is that the code must include sufficient automated tests. These are code-defined tests that a test system can execute.</p> <p>If the code’s going to crash, don’t you want these guys’ resumes to be on the line instead of your own? (public domain: US Government photo)<br /> Manual “test scripts” where a human interacts with the code to see if it works are insufficient and reflect technical debt. Your technical team should at least include unit tests. Test-driven development is a popular approach for ensuring that critical code is always tested.</p> <p>You can drive a non-technical conversation with your team about their “test coverage” (the portion of the code that is tested). It’s pretty simple: ask them to list their assumptions. Then ask where and how they test these assumptions.</p> <p>The checkpoint at which the code is believed complete by the developers is referred to in my shop as dev-complete. It means the primary development (dev) process is over, but additional code may be written to address issues that come up in the review process.</p> <p>In an agile development process, you will typically divide the implementation process into multiple checkpoints instead of one all-or-nothing deadline. These are typically called iterations.</p> <p>Refer to the roadmap you defined in the first step. Before starting new component(s), ensure that what you’ve already started is at least dev-complete. This provides you with an accurate view of the speed of development and reduces risk.</p> <p>As you complete the iterations, you can push the code to an environment for “acceptance testing.” This involves pilot or test users (or an internal team playing that role) who interact with the partial product. They test to ensure it meets the design expectations and provide feedback on how it could be better.</p> <p>Acceptance testing is not a substitute for the unit testing mentioned earlier. It serves a different purpose. Letting your development team lean on acceptance testing to catch basic functional bugs is a recipe for disaster.</p> <p>Feedback from the acceptance testers can be incorporated into the next iteration. This is another good reason not to bite off a big chunk of the product all at once. You want to leave room to change course once people start playing with the product.</p> <p>Once you’ve accumulated enough tested code to constitute a sufficient product release, you’re ready to begin the release management process.</p> <p>Looking for bugs in all the right places</p> <p>Your developer or team has reached a point where they believe the code is done. Acceptance testers are satisfied with the way the product is working. The next checkpoint in the process is to validate the belief that you have code ready to become a product. Let’s start reviewing the code!</p> <p>You may not be comfortable or have sufficient technical know-how to review the team’s code yourself. That’s ok! You don’t have to. Your process has to.</p> <p>Work with your team to identify a process for code review that works for them. If you have more than one developer, peer code review works great. If you don’t, are there other developers in your organization outside of your team? Work across team boundaries to establish a peer code review program.</p> <p>If there really is only one developer, then sit down with them and have them walk you through the code. Use your schematics as a reference point, and ask them to tell you how the code accomplishes the schematic’s goals.</p> <p>At the conclusion of the code review process, the developer and reviewer(s) should feel comfortable with being held accountable for the code.</p> <p>The code review is also a good time for reviewing two other critical points: documentation and security.</p> <p>I’ve already written about a sustainable documentation architecture — check it out if you’re interested!</p> <p>Security review should be a part of any code review. In general, this involves taking a second look at the code to spot weaknesses where an attacker could exploit it to reveal private data or gain control of the server. It must be done by a technical person.</p> <p>The Open Web Application Security Project (OWASP) publishes a free comprehensive guide to security review.</p> <p>Your developer can do this if they’re the only one on the team, even if they just run an automated security code analysis tool. There are free tools for helping with this process which are linked through the OWASP wiki.</p> <p>Eject, eject, eject!</p> <p>The code has passed the review process. It’s ready to become a product. But that doesn’t mean it’s ready for production.</p> <p>The last checkpoint to clear is deployment readiness. Is your code in a state where it’s easy to deploy to production? This should involve as few manual steps as possible.</p> <p>It also means you need to have a plan for reverting the change in case the code doesn’t work as planned. This is called a “rollback plan.”</p> <p><br /> If you have a separate software operations team, this is where they come back into the picture. They should review the deployment and rollback documentation and let you know if it’s sufficient.</p> <p>If you don’t have these personnel you can perform this step yourself. Make sure that there are clear, simple instructions for deploying the product. There should be very few manual steps, as each manual step introduces a chance for human error.</p> <p>There should be a clear, sufficient plan for returning to the prior state of affairs if the deployment doesn’t succeed. This may be as simple as restoring a backup, or it may involve customer communication or data conversion.</p> <p>Whether the plan is sufficient depends on how thoroughly your team tested the code, and how widely the product is being released. Consider also any risks associated with the product or with this particular release.</p> <p>Once you’ve passed this checkpoint, push that code into production!</p> <p>Post-release</p> <p>Succeed or fail, it’s important to circle back and review how the process went.</p> <p>Did your team accurately estimate the effort required to release a product? Did the testing adequately model the production scenario? Revisit the implementation and testing checkpoints, and review how well the team performed.</p> <p>How is the product running in production? It’s a good idea to visit the operations staff and obtain their feedback. This further creates trust between the development and operations teams, and will lead to more DevOps benefits down the road.</p> <p>Where are the remaining gaps in your product? If they’re in third-party code, now’s the time to consider whether to customize your packages or re-implement from scratch. Otherwise, you now have input on what to build for the next release.</p> <p>Above all, hold yourself and your team accountable for the results of your effort.</p> <p>Accountability facilitates independence and promotes individual growth. As your team grows accustomed to being held accountable for each step in this process, they’ll adjust their performance accordingly.</p> <p>Conclusion</p> <p>You don’t have to be the least bit technical to run a successful software release process. Technical skill can help, but it can also become a crutch.</p> <p>The key to successful software release is a well-documented, well-understood process for moving software through the pipeline from idea to product. You now have a starting point for drafting your own software release process.</p> <p>What’s most important is that you participate with your team in filling in the blanks and creating a repeatable process that works for all of you.</p> <p>It doesn’t have to be perfect for anyone, but it does have to be understood by everyone.</p> <p>You also need to ensure that the velocity of your product through these checkpoints matches the demand for the product. None of these items need to be multi-day show-stoppers. It could be a simple one-page checklist. You need to define a process that fits your environment.</p> <p>As with any process, you should also iterate. Just like with the code, your first, untested draft isn’t likely to be perfect. Tune the process on each run-through and you’ll end up with a smooth, predictable software release path.</p> <p>And remember to brush your hair. You don’t want it looking…pointy.</p>]]></description>
			<content:encoded><![CDATA[<p>This episode is for anyone who wants to effectively orchestrate a development process without becoming the butt of their team’s water-cooler jokes. It's more attainable than you think, because it's all about process. Don't be a Bill Lumbergh - be awesome.</p> <p>Written and read by Jonathan Solórzano-Hamilton: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>Original article: <a href= "https://fcc.im/2GW6xFX">https://fcc.im/2GW6xFX</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>Laurence Peter formulated the principle that “managers rise to the level of their incompetence” in 1969. In particular, non-technical leaders have earned a poor reputation with software developers.</p> <p>Office Space depicts the non-technical manager in Bill Lumbergh, pictured above. Dilbert provides the classic “Pointy-Haired Boss.”</p> <p>This article is for anyone who wants to effectively orchestrate a development process without becoming the butt of your team’s water-cooler jokes. I’ll share what I’ve learned over the years managing development and release processes as a manager and software architect at UCLA and Stanford University.</p> <p>The biggest lesson I’ve learned is that the key to sustaining successful software releases is completely non-technical.</p> <p>It’s about process.</p> <p>Some aspects of a development process benefit from technical know-how, but it’s not required. Successfully releasing software into production is much more a question of robust process architecture than design or code alone.</p> <p>For the purpose of this article, we’ll assume you’ve already agreed to start building something. The product approval pipeline is a different process. Today we’re focusing on getting the agreed-upon product from concept to production.</p> <p>What to build</p> <p>Your team needs to assemble a clear roadmap for their code. Architects and manufacturers use blueprints. You should too.</p> <p>Your roadmap should include a set of schematics which each fulfill a different purpose. These schematics differ for individual applications. A user-interface mock-up, application architecture diagram, and business process model are common. More detailed component diagrams such as Unified Modeling Language (UML) diagrams and flow models are often useful as well.</p> <p>Technical expertise lets you use these schematics to critique your team’s architecture and ensure they’re on the right track. Even without technical skill, these schematics will be critical.</p> <p>You can use them to drive productive conversations about product completion. No more will you have to draw a “% complete” out of thin air or best-guess from the development team. You can track the status of each item on the diagram to determine how close the app is to completion. You can also project future velocity based on how quickly the team completed prior components.</p> <p>There is no “right” amount of pre-development documentation, but there is one wrong amount: none. Work out with your team what constitutes an acceptable roadmap before they start coding. The first checkpoint in your development process will be to review this documentation and ensure they’ve met this agreement.</p> <p>What not to build</p> <p>Your team can’t build everything. Nor should they. You need to ensure that your developers have a laser focus on what they actually need to build.</p> <p>Why are you building this app in the first place? Define the key differentiation from existing products. 80% of your team’s time should go toward supporting that differentiation.</p> <p>The schematics you should now have will be helpful here. Does your application include a logging component? A sign-up and login process? There are already excellent free, open-source software (FOSS) frameworks in most languages for these components. Some are available under extremely permissive licenses.</p> <p>Tesla provides a great illustration of this concept. Their first key differentiator was to use a lithium-ion battery to make electric cars competitive with gas. Lithium-ion achieved this by reducing battery weight and increasing range.</p> <p>The first Tesla prototype simply converted a pre-existing electric sports car from lead-acid to lithium batteries. Their first production run was mostly a Lotus Elise roadster (a pre-existing sports car) that had a Tesla battery and motor.</p> <p>The lesson for your team is to use what already exists wherever possible. If you can use or adapt a FOSS package, do it. Even if you need to license for-pay code from somewhere else, it’s almost always worth it.</p> <p>Get all the scaffolding in place quickly so you can test your “lithium-ion battery.” Then you can iterate through and replace whatever will help further differentiate your product without stressing about delaying production-readiness.</p> <p>The second checkpoint of your development process is to review the planned architecture with your team and identify what very limited part they intend to build from scratch.</p> <p>If it sounds like something that already exists, and it’s not the core focus of your product, challenge your team to see why they believe they need to re-do it.</p> <p>Don’t just throw it over the wall</p> <p>Once you have identified what pre-built technologies you’ll use, make sure to review these with your production support group.</p> <p>Database and server administrators will need to plan for installing and supporting any new technologies. This is the third checkpoint in your development process: operations readiness.</p> <p>Keeping the production support team in the loop early is 90% of the secret sauce known as “DevOps.” If you haven’t heard of this, DevOps is the idea that software development and production operations teams should unify under common goals.</p> <p>The proposed benefits include much quicker releases, more reliable code, and more time spent developing due to automation. These are all great boons, but they follow from a strong communication process. Automation follows, not replaces, collaboration.</p> <p>Implementation and Testing</p> <p>Now your team writes the code. Collaborate with your implementation team to devise a process for dividing the work among themselves. There’s no one-size-fits-all approach, and this is where the “soft skills” of leadership dramatically outweigh any technical skill.</p> <p>Some developers will want to hog all the “interesting” work and ignore any drudge work. They may believe that they’re the smartest person in the room and should get their pick of assignments. Others may resist change and only want to do the same kind of work they’ve done before.</p> <p>Lead your team into an equitable distribution of work. Challenge everyone to grow appropriately and to share and collaborate.</p> <p>One more technical aspect of the implementation is that the code must include sufficient automated tests. These are code-defined tests that a test system can execute.</p> <p>If the code’s going to crash, don’t you want these guys’ resumes to be on the line instead of your own? (public domain: US Government photo) Manual “test scripts” where a human interacts with the code to see if it works are insufficient and reflect technical debt. Your technical team should at least include unit tests. Test-driven development is a popular approach for ensuring that critical code is always tested.</p> <p>You can drive a non-technical conversation with your team about their “test coverage” (the portion of the code that is tested). It’s pretty simple: ask them to list their assumptions. Then ask where and how they test these assumptions.</p> <p>The checkpoint at which the code is believed complete by the developers is referred to in my shop as dev-complete. It means the primary development (dev) process is over, but additional code may be written to address issues that come up in the review process.</p> <p>In an agile development process, you will typically divide the implementation process into multiple checkpoints instead of one all-or-nothing deadline. These are typically called iterations.</p> <p>Refer to the roadmap you defined in the first step. Before starting new component(s), ensure that what you’ve already started is at least dev-complete. This provides you with an accurate view of the speed of development and reduces risk.</p> <p>As you complete the iterations, you can push the code to an environment for “acceptance testing.” This involves pilot or test users (or an internal team playing that role) who interact with the partial product. They test to ensure it meets the design expectations and provide feedback on how it could be better.</p> <p>Acceptance testing is not a substitute for the unit testing mentioned earlier. It serves a different purpose. Letting your development team lean on acceptance testing to catch basic functional bugs is a recipe for disaster.</p> <p>Feedback from the acceptance testers can be incorporated into the next iteration. This is another good reason not to bite off a big chunk of the product all at once. You want to leave room to change course once people start playing with the product.</p> <p>Once you’ve accumulated enough tested code to constitute a sufficient product release, you’re ready to begin the release management process.</p> <p>Looking for bugs in all the right places</p> <p>Your developer or team has reached a point where they believe the code is done. Acceptance testers are satisfied with the way the product is working. The next checkpoint in the process is to validate the belief that you have code ready to become a product. Let’s start reviewing the code!</p> <p>You may not be comfortable or have sufficient technical know-how to review the team’s code yourself. That’s ok! You don’t have to. Your process has to.</p> <p>Work with your team to identify a process for code review that works for them. If you have more than one developer, peer code review works great. If you don’t, are there other developers in your organization outside of your team? Work across team boundaries to establish a peer code review program.</p> <p>If there really is only one developer, then sit down with them and have them walk you through the code. Use your schematics as a reference point, and ask them to tell you how the code accomplishes the schematic’s goals.</p> <p>At the conclusion of the code review process, the developer and reviewer(s) should feel comfortable with being held accountable for the code.</p> <p>The code review is also a good time for reviewing two other critical points: documentation and security.</p> <p>I’ve already written about a sustainable documentation architecture — check it out if you’re interested!</p> <p>Security review should be a part of any code review. In general, this involves taking a second look at the code to spot weaknesses where an attacker could exploit it to reveal private data or gain control of the server. It must be done by a technical person.</p> <p>The Open Web Application Security Project (OWASP) publishes a free comprehensive guide to security review.</p> <p>Your developer can do this if they’re the only one on the team, even if they just run an automated security code analysis tool. There are free tools for helping with this process which are linked through the OWASP wiki.</p> <p>Eject, eject, eject!</p> <p>The code has passed the review process. It’s ready to become a product. But that doesn’t mean it’s ready for production.</p> <p>The last checkpoint to clear is deployment readiness. Is your code in a state where it’s easy to deploy to production? This should involve as few manual steps as possible.</p> <p>It also means you need to have a plan for reverting the change in case the code doesn’t work as planned. This is called a “rollback plan.”</p> <p> If you have a separate software operations team, this is where they come back into the picture. They should review the deployment and rollback documentation and let you know if it’s sufficient.</p> <p>If you don’t have these personnel you can perform this step yourself. Make sure that there are clear, simple instructions for deploying the product. There should be very few manual steps, as each manual step introduces a chance for human error.</p> <p>There should be a clear, sufficient plan for returning to the prior state of affairs if the deployment doesn’t succeed. This may be as simple as restoring a backup, or it may involve customer communication or data conversion.</p> <p>Whether the plan is sufficient depends on how thoroughly your team tested the code, and how widely the product is being released. Consider also any risks associated with the product or with this particular release.</p> <p>Once you’ve passed this checkpoint, push that code into production!</p> <p>Post-release</p> <p>Succeed or fail, it’s important to circle back and review how the process went.</p> <p>Did your team accurately estimate the effort required to release a product? Did the testing adequately model the production scenario? Revisit the implementation and testing checkpoints, and review how well the team performed.</p> <p>How is the product running in production? It’s a good idea to visit the operations staff and obtain their feedback. This further creates trust between the development and operations teams, and will lead to more DevOps benefits down the road.</p> <p>Where are the remaining gaps in your product? If they’re in third-party code, now’s the time to consider whether to customize your packages or re-implement from scratch. Otherwise, you now have input on what to build for the next release.</p> <p>Above all, hold yourself and your team accountable for the results of your effort.</p> <p>Accountability facilitates independence and promotes individual growth. As your team grows accustomed to being held accountable for each step in this process, they’ll adjust their performance accordingly.</p> <p>Conclusion</p> <p>You don’t have to be the least bit technical to run a successful software release process. Technical skill can help, but it can also become a crutch.</p> <p>The key to successful software release is a well-documented, well-understood process for moving software through the pipeline from idea to product. You now have a starting point for drafting your own software release process.</p> <p>What’s most important is that you participate with your team in filling in the blanks and creating a repeatable process that works for all of you.</p> <p>It doesn’t have to be perfect for anyone, but it does have to be understood by everyone.</p> <p>You also need to ensure that the velocity of your product through these checkpoints matches the demand for the product. None of these items need to be multi-day show-stoppers. It could be a simple one-page checklist. You need to define a process that fits your environment.</p> <p>As with any process, you should also iterate. Just like with the code, your first, untested draft isn’t likely to be perfect. Tune the process on each run-through and you’ll end up with a smooth, predictable software release path.</p> <p>And remember to brush your hair. You don’t want it looking…pointy.</p>]]></content:encoded>
			<enclosure length="16151344" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/How_to_run_a_successful_development_process_even_if_youre_not_technical.mp3?dest-id=603849" />
			<itunes:duration>16:48</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[This episode is for anyone who wants to effectively orchestrate a development process without becoming the butt of their team’s water-cooler jokes. It's more attainable than you think, because it's all about process. Don't be a Bill Lumbergh - be...]]></itunes:subtitle>
			<itunes:summary>This episode is for anyone who wants to effectively orchestrate a development process without becoming the butt of their team’s water-cooler jokes. It's more attainable than you think, because it's all about process. Don't be a Bill Lumbergh - be awesome.

</itunes:summary>
			<itunes:episode>24</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 23 - We studied how students performed in technical interviews. Where they went to school didn't matter.</title>
			<itunes:title>We studied students' performance in technical interviews. Where they went to school didn't matter.</itunes:title>
			<pubDate>Mon, 26 Mar 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[dab3aa4f31f377cad6830ded2589798a]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/we-studied-how-students-performed-in-technical-interviews-where-they-went-to-school-didnt-matter]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Given the state of college recruiting today, your chances of interacting with companies on campus are slim - unless your campus is a top school. It’s not fair, and it sucks, but that's the way it is. But does it have to be? Does where you went to school really affect your performance in technical interviews? Turns out: it doesn't.</p> <p>Written by Sam Jordan: <a href= "mailto:sam@interviewing.io">sam@interviewing.io</a></p> <p>Recorded by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2Dg3HJA">https://fcc.im/2Dg3HJA</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>interviewing.io is a platform where engineers practice technical interviewing anonymously. If things go well, they can unlock the ability to participate in real, but still anonymous, interviews with top companies like Twitch, Lyft and more.</p> <p>Earlier this year, we launched an offering specifically for university students. It was intended to help level the playing field right at the start of people’s careers.</p> <p>The problem</p> <p>Here’s the sad truth: given the state of college recruiting today, if you haven’t attended one of a very few top schools, your chances of interacting with companies on campus are slim. It’s not fair, and it sucks, but university recruiting is still dominated by career fairs. Companies pragmatically choose to visit the same few schools every year. Despite the fact that the career fair is one of the most antiquated, biased forms of recruiting that there is, the format persists. This is likely because there doesn’t seem to be a better way to quickly connect with students at scale.</p> <p>So, despite the increasingly loud conversation about diversity, campus recruiting marches on, and companies keep doing the same thing expecting different results.</p> <p>In a previous blog post, we explained why companies should stop courting students from the same five schools.</p> <p>Regardless of how important you think this idea is (for altruistic reasons, perhaps), you may still be skeptical about the value and practicality of broadening the college recruiting effort. You probably concede that it’s rational to visit top schools, given limited resources. Society is often willing to agree that there are perfectly qualified students coming out of non-top colleges, but they maintain that they’re relatively rare.</p> <p>We’re here to show you, with some nifty data from our university platform, that this is simply not true.</p> <p>To be fair, this isn’t the first time we’ve looked at whether where you went to school matters. In a previous post, we found that taking Udacity and Coursera programming classes mattered way more than where you went to school. And way back in the day, one of our founders figured out that where you went to school didn’t matter at all — but that the number of typos and grammatical errors on your resume did.</p> <p>So, what’s different this time? The big, exciting difference is that these prior analyses were focused mostly on engineers who had been working for at least a few years already. This made it possible to argue that a few years of work experience smoothes out any performance disparity that comes from having attended (or not attended) a top school.</p> <p>In fact, the good people at Google found that while GPA didn’t really matter after a few years of work, it did matter for college students. So, we wanted to face this question head-on and look specifically at college juniors and seniors while they were still in school. Even more pragmatically, we wanted to see if companies limiting their hiring efforts to just top schools were getting higher caliber candidates.</p> <p>Before delving into the numbers, here’s a quick rundown of how our university platform works and what kind of data we collect.</p> <p>The setup</p> <p>For students who want to practice on interviewing.io, the first step is a brief (~15-minute) coding assessment on Qualified to test basic programming competency. Students who pass this assessment (that is, those who are ready to code while another human being breathes down their necks) get to start booking practice interviews.</p> <p>When an interviewer and an interviewee match on our platform, they meet in a collaborative coding environment with voice, text chat, and a whiteboard and jump right into a technical question. Interview questions on the platform tend to fall into the category of what you’d encounter during a phone screen for a back-end software engineering role. Interviewers typically come from top companies like Google, Facebook, Dropbox, Airbnb, and more.</p> <p>After every interview, interviewers rate interviewees in a few different categories, including technical ability. Technical ability gets rated on a scale of 1 to 4, where 1 is “poor” and 4 is “amazing!” On our platform, a score of 3 or above has generally meant that the person was skilled enough to move forward.</p> <p>On our platform, we’re fortunate to have thousands of students from all over the U.S., spanning over 200 universities. We thought this presented a unique opportunity to look at the relationship between school tier and interview performance for both juniors (interns) and seniors (new grads).</p> <p>To study this relationship, we first split schools into the following four tiers, based on rankings from U.S. News & World Report:</p> <p>“Elite” schools (like MIT, Stanford, Carnegie Mellon, UC-Berkeley)<br /> Top 15 schools (not including top tier, like University of Wisconsin, Cornell, Columbia)<br /> Top 50 schools (not including top 15, like Ohio State University, NYU, Arizona State University)<br /> The rest (like Michigan State, Vanderbilt University, Northeastern University, UC-Santa Barbara)</p> <p>Then, we ran some statistical significance testing on interview scores vs. school tier to see if school tier mattered for both interns (college juniors) and new grads (college seniors). Our sample comprised a set of roughly 1,000 students.</p> <p>Does school have anything to do with interview performance?</p> <p>In the graphs below, you can see technical score distributions for interviews with students in each of the four school tiers (see legend). As you recall from above, each interview is scored on a scale of 1 to 4, where 1 is the worst and 4 is the best.</p> <p>What’s pretty startling is that the shape of these distributions, for both juniors and seniors, is remarkably similar. Indeed, statistical significance testing revealed no difference between students of any tier when it came to interview performance.</p> <p>Just to note: of course, this hinges on everyone completing a quick 15-minute coding challenge first, to ensure they’re ready for synchronous technical interviews. We’re excited about this because companies can replicate this step in their process as well!</p> <p>What this means is that top-tier students are achieving the same results as those in “no-name” schools. So the question becomes: if the students are comparable in skill, why are companies spending egregious amounts of money attracting only a subset of them?</p> <p>Okay, so what are companies missing?</p> <p>Besides missing out on great, cheaper-to-acquire future employees, companies are missing out on an opportunity to save time and money. Right now, a ridiculous amount of money is being spent on university recruiting. We’ve previously cited the $18k price tag just for entry to the MIT career fair. In a study done by Lauren Rivera through the Harvard Business Review, she reveals that one firm budgeted nearly 1 million dollars just for social recruiting events on a single campus.</p> <p>The higher price tag of these events also means that it makes even less sense for smaller companies or startups to try and compete with high-profile, high-profit tech giants. Most of the top schools that are being heavily pursued already have enough recruiters vying for their students. Unwittingly, this pursuit seems to run contrary to most companies’ desire for high diversity and long-term sustainable growth.</p> <p>Even when companies do believe that talent is evenly distributed across school tiers, there are still reasons why companies might recruit at top schools. There are other factors that help elevate certain schools in a recruiter’s mind. There are long-standing company-school relationships (for example, the number of alumni who work at the company currently). There are signaling effects, too — companies get Silicon Valley bonus points by saying their eng team is comprised of a bunch of ex-Stanford, ex-MIT ex-and so on students.</p> <p>A quick word about selection bias</p> <p>Since this post appeared on Hacker News, there’s been some loud, legitimate discussion about how the pool of students on interviewing.io may not be representative of the population at large. Indeed we do have a self-selected pool of students who decided to practice interviewing.</p> <p>Certainly, all the blog posts we publish are subject to this (very valid) line of criticism, as is this post in particular.</p> <p>As such, selection bias in our user pool might mean that 1) we’re getting only the worst students from top schools (because, presumably, the best ones don’t need the practice), or 2) we’re getting only the best/most motivated students from non-top schools — or both.</p> <p>Any subset of these results is entirely possible, but there are few reasons why we believe that what we’ve published here might hold truth regardless.</p> <p>First of all, in our experience, regardless of their background or pedigree, everyone is scared of technical interviewing. Case in point: before we started working on interviewing.io, we didn’t really have a product yet. So before investing a lot of time and heartache into this questionable undertaking, we wanted to test the waters to see if interview practice was something engineers really wanted — and more so, who these engineers that wanted practice were.</p> <p>So, we put up a pretty mediocre landing page on Hacker News…and got something like 7,000 signups on the first day. Of these 7,000 signups, roughly 25% were senior (4+ years of experience) engineers from companies like Google and Facebook. Now, this isn’t to say that they’re necessarily the best engineers out there, but it does suggest that the engineers the market seems to value the most still needed our services.</p> <p>Another data point comes from one of our founders. Every year, Aline does a guest lecture on job search preparedness for a technical communication course at MIT. This course is one way to fulfill the computer science major communication requirement, so enrollment tends to span the gamut of computer science students. Before every lecture, she sends out a survey asking students what their biggest pain points are in preparing for their job search. Every year, trepidation about technical interviewing is either at the top of the list of 2nd from the top.</p> <p>And though this doesn’t directly address the issue of whether we’re only getting the “best of the worst or the worst of the best” (and I hope the above has convinced you there’s more to it than that), here’s the distribution of school tiers among our users. I expect it mirrors the kinds of distributions companies see in their student applicant pool as well:</p> <p>So what can companies do?</p> <p>Companies may never stop recruiting at top-tier schools entirely. But they ought to at least include schools outside of that very small circle in the search for future employees.</p> <p>The end result of the data is the same: for good engineers, the school they attended means a lot less than we think. The time and money that companies spend to compete for candidates within the same select few schools would be better spent creating opportunities that include everyone. They could also develop tools to vet students more fairly and efficiently.</p> <p>As you saw above, we used a 15-minute coding assessment to cull our inbound student flow, and just a short challenge leveled the playing field between students from all walks of life. At the very least, we’d recommend employers do the same thing in their process. But, of course, we’d be remiss if we didn’t suggest one other thing.</p> <p>At interviewing.io, we’ve proudly built a platform that grants the best-performing students access to top employers, no matter where they went to school or where they come from. Our university program, in particular, allows us to grant companies the privilege to reach an exponentially larger pool of students, for the same cost of attending one or two career fairs at top target schools.</p> <p>Want diverse, top talent without the chase? Sign up to be an employer on our university platform!</p>]]></description>
			<content:encoded><![CDATA[<p>Given the state of college recruiting today, your chances of interacting with companies on campus are slim - unless your campus is a top school. It’s not fair, and it sucks, but that's the way it is. But does it have to be? Does where you went to school really affect your performance in technical interviews? Turns out: it doesn't.</p> <p>Written by Sam Jordan: <a href= "mailto:sam@interviewing.io">sam@interviewing.io</a></p> <p>Recorded by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2Dg3HJA">https://fcc.im/2Dg3HJA</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>interviewing.io is a platform where engineers practice technical interviewing anonymously. If things go well, they can unlock the ability to participate in real, but still anonymous, interviews with top companies like Twitch, Lyft and more.</p> <p>Earlier this year, we launched an offering specifically for university students. It was intended to help level the playing field right at the start of people’s careers.</p> <p>The problem</p> <p>Here’s the sad truth: given the state of college recruiting today, if you haven’t attended one of a very few top schools, your chances of interacting with companies on campus are slim. It’s not fair, and it sucks, but university recruiting is still dominated by career fairs. Companies pragmatically choose to visit the same few schools every year. Despite the fact that the career fair is one of the most antiquated, biased forms of recruiting that there is, the format persists. This is likely because there doesn’t seem to be a better way to quickly connect with students at scale.</p> <p>So, despite the increasingly loud conversation about diversity, campus recruiting marches on, and companies keep doing the same thing expecting different results.</p> <p>In a previous blog post, we explained why companies should stop courting students from the same five schools.</p> <p>Regardless of how important you think this idea is (for altruistic reasons, perhaps), you may still be skeptical about the value and practicality of broadening the college recruiting effort. You probably concede that it’s rational to visit top schools, given limited resources. Society is often willing to agree that there are perfectly qualified students coming out of non-top colleges, but they maintain that they’re relatively rare.</p> <p>We’re here to show you, with some nifty data from our university platform, that this is simply not true.</p> <p>To be fair, this isn’t the first time we’ve looked at whether where you went to school matters. In a previous post, we found that taking Udacity and Coursera programming classes mattered way more than where you went to school. And way back in the day, one of our founders figured out that where you went to school didn’t matter at all — but that the number of typos and grammatical errors on your resume did.</p> <p>So, what’s different this time? The big, exciting difference is that these prior analyses were focused mostly on engineers who had been working for at least a few years already. This made it possible to argue that a few years of work experience smoothes out any performance disparity that comes from having attended (or not attended) a top school.</p> <p>In fact, the good people at Google found that while GPA didn’t really matter after a few years of work, it did matter for college students. So, we wanted to face this question head-on and look specifically at college juniors and seniors while they were still in school. Even more pragmatically, we wanted to see if companies limiting their hiring efforts to just top schools were getting higher caliber candidates.</p> <p>Before delving into the numbers, here’s a quick rundown of how our university platform works and what kind of data we collect.</p> <p>The setup</p> <p>For students who want to practice on interviewing.io, the first step is a brief (~15-minute) coding assessment on Qualified to test basic programming competency. Students who pass this assessment (that is, those who are ready to code while another human being breathes down their necks) get to start booking practice interviews.</p> <p>When an interviewer and an interviewee match on our platform, they meet in a collaborative coding environment with voice, text chat, and a whiteboard and jump right into a technical question. Interview questions on the platform tend to fall into the category of what you’d encounter during a phone screen for a back-end software engineering role. Interviewers typically come from top companies like Google, Facebook, Dropbox, Airbnb, and more.</p> <p>After every interview, interviewers rate interviewees in a few different categories, including technical ability. Technical ability gets rated on a scale of 1 to 4, where 1 is “poor” and 4 is “amazing!” On our platform, a score of 3 or above has generally meant that the person was skilled enough to move forward.</p> <p>On our platform, we’re fortunate to have thousands of students from all over the U.S., spanning over 200 universities. We thought this presented a unique opportunity to look at the relationship between school tier and interview performance for both juniors (interns) and seniors (new grads).</p> <p>To study this relationship, we first split schools into the following four tiers, based on rankings from U.S. News & World Report:</p> <p>“Elite” schools (like MIT, Stanford, Carnegie Mellon, UC-Berkeley) Top 15 schools (not including top tier, like University of Wisconsin, Cornell, Columbia) Top 50 schools (not including top 15, like Ohio State University, NYU, Arizona State University) The rest (like Michigan State, Vanderbilt University, Northeastern University, UC-Santa Barbara)</p> <p>Then, we ran some statistical significance testing on interview scores vs. school tier to see if school tier mattered for both interns (college juniors) and new grads (college seniors). Our sample comprised a set of roughly 1,000 students.</p> <p>Does school have anything to do with interview performance?</p> <p>In the graphs below, you can see technical score distributions for interviews with students in each of the four school tiers (see legend). As you recall from above, each interview is scored on a scale of 1 to 4, where 1 is the worst and 4 is the best.</p> <p>What’s pretty startling is that the shape of these distributions, for both juniors and seniors, is remarkably similar. Indeed, statistical significance testing revealed no difference between students of any tier when it came to interview performance.</p> <p>Just to note: of course, this hinges on everyone completing a quick 15-minute coding challenge first, to ensure they’re ready for synchronous technical interviews. We’re excited about this because companies can replicate this step in their process as well!</p> <p>What this means is that top-tier students are achieving the same results as those in “no-name” schools. So the question becomes: if the students are comparable in skill, why are companies spending egregious amounts of money attracting only a subset of them?</p> <p>Okay, so what are companies missing?</p> <p>Besides missing out on great, cheaper-to-acquire future employees, companies are missing out on an opportunity to save time and money. Right now, a ridiculous amount of money is being spent on university recruiting. We’ve previously cited the $18k price tag just for entry to the MIT career fair. In a study done by Lauren Rivera through the Harvard Business Review, she reveals that one firm budgeted nearly 1 million dollars just for social recruiting events on a single campus.</p> <p>The higher price tag of these events also means that it makes even less sense for smaller companies or startups to try and compete with high-profile, high-profit tech giants. Most of the top schools that are being heavily pursued already have enough recruiters vying for their students. Unwittingly, this pursuit seems to run contrary to most companies’ desire for high diversity and long-term sustainable growth.</p> <p>Even when companies do believe that talent is evenly distributed across school tiers, there are still reasons why companies might recruit at top schools. There are other factors that help elevate certain schools in a recruiter’s mind. There are long-standing company-school relationships (for example, the number of alumni who work at the company currently). There are signaling effects, too — companies get Silicon Valley bonus points by saying their eng team is comprised of a bunch of ex-Stanford, ex-MIT ex-and so on students.</p> <p>A quick word about selection bias</p> <p>Since this post appeared on Hacker News, there’s been some loud, legitimate discussion about how the pool of students on interviewing.io may not be representative of the population at large. Indeed we do have a self-selected pool of students who decided to practice interviewing.</p> <p>Certainly, all the blog posts we publish are subject to this (very valid) line of criticism, as is this post in particular.</p> <p>As such, selection bias in our user pool might mean that 1) we’re getting only the worst students from top schools (because, presumably, the best ones don’t need the practice), or 2) we’re getting only the best/most motivated students from non-top schools — or both.</p> <p>Any subset of these results is entirely possible, but there are few reasons why we believe that what we’ve published here might hold truth regardless.</p> <p>First of all, in our experience, regardless of their background or pedigree, everyone is scared of technical interviewing. Case in point: before we started working on interviewing.io, we didn’t really have a product yet. So before investing a lot of time and heartache into this questionable undertaking, we wanted to test the waters to see if interview practice was something engineers really wanted — and more so, who these engineers that wanted practice were.</p> <p>So, we put up a pretty mediocre landing page on Hacker News…and got something like 7,000 signups on the first day. Of these 7,000 signups, roughly 25% were senior (4+ years of experience) engineers from companies like Google and Facebook. Now, this isn’t to say that they’re necessarily the best engineers out there, but it does suggest that the engineers the market seems to value the most still needed our services.</p> <p>Another data point comes from one of our founders. Every year, Aline does a guest lecture on job search preparedness for a technical communication course at MIT. This course is one way to fulfill the computer science major communication requirement, so enrollment tends to span the gamut of computer science students. Before every lecture, she sends out a survey asking students what their biggest pain points are in preparing for their job search. Every year, trepidation about technical interviewing is either at the top of the list of 2nd from the top.</p> <p>And though this doesn’t directly address the issue of whether we’re only getting the “best of the worst or the worst of the best” (and I hope the above has convinced you there’s more to it than that), here’s the distribution of school tiers among our users. I expect it mirrors the kinds of distributions companies see in their student applicant pool as well:</p> <p>So what can companies do?</p> <p>Companies may never stop recruiting at top-tier schools entirely. But they ought to at least include schools outside of that very small circle in the search for future employees.</p> <p>The end result of the data is the same: for good engineers, the school they attended means a lot less than we think. The time and money that companies spend to compete for candidates within the same select few schools would be better spent creating opportunities that include everyone. They could also develop tools to vet students more fairly and efficiently.</p> <p>As you saw above, we used a 15-minute coding assessment to cull our inbound student flow, and just a short challenge leveled the playing field between students from all walks of life. At the very least, we’d recommend employers do the same thing in their process. But, of course, we’d be remiss if we didn’t suggest one other thing.</p> <p>At interviewing.io, we’ve proudly built a platform that grants the best-performing students access to top employers, no matter where they went to school or where they come from. Our university program, in particular, allows us to grant companies the privilege to reach an exponentially larger pool of students, for the same cost of attending one or two career fairs at top target schools.</p> <p>Want diverse, top talent without the chase? Sign up to be an employer on our university platform!</p>]]></content:encoded>
			<enclosure length="15307883" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Studying_performance_in_technical_interviews.mp3?dest-id=603849" />
			<itunes:duration>12:45</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Given the state of college recruiting today, your chances of interacting with companies on campus are slim - unless your campus is a top school. It’s not fair, and it sucks, but that's the way it is. But does it have to be? Does where you went to...]]></itunes:subtitle>
			<itunes:summary>Given the state of college recruiting today, your chances of interacting with companies on campus are slim - unless your campus is a top school. It’s not fair, and it sucks, but that's the way it is. But does it have to be? Does where you went to school really affect your performance in technical interviews? Turns out: it doesn't.</itunes:summary>
			<itunes:episode>23</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 22 - Our team broke up with "instant legacy" code releases. Here's how yours can, too.</title>
			<itunes:title>Our team broke up with "instant legacy" code releases. Here's how yours can, too.</itunes:title>
			<pubDate>Mon, 19 Mar 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[081ceeb80c4c598858c6831d0cdef022]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-22-our-team-broke-up-with-instant-legacy-code-releases-heres-how-yours-can-too]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>The concept of a legacy usually conveys permanence, value, and greatness. But what about in relation to your code? In this article, Jonathan explains how his team broke up with their legacy codebase, why it was necessary, and how your team can do the same.</p> <p>Written and read by Jonathan Solózano-Hamilton: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>Original article: <a href= "https://fcc.im/2FEuAcR">https://fcc.im/2FEuAcR</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p id="8cc4" class="graf graf--p graf-after--p graf--trailing">  </p> <p>The concept of legacy conveys permanence, value, and the greatness we bequeath to our children and our successors in the community.</p> <p>People make ludicrously generous donations to charitable causes to establish their legacy. They create eponymous endowments or buildings and strive to protect the name their children will inherit.</p> <p>It’s therefore striking that software developers have gotten their “legacy” so catastrophically wrong.</p> <p>Google “legacy,” and you’ll see the first definition matches what I’ve laid out for you here. It’s a definition that’s persisted since the 14th or 15th century.</p> <p>The second definition provides a shocking contrast:</p> <p>legacy. adjective (computing) “denoting software or hardware that has been superseded but is difficult to replace because of its wide use.</p> <p>Dictionaries around the internet agree with this definition. It applies only to the field of computing. We developers have managed to invert the definition of our own legacy in the historical eye-blink that is computer science. That’s almost impressive!</p> <p>If you’re an experienced developer, you’ve certainly been tasked with supporting at least one legacy system in your career. For the uninitiated, well — buy a lot of caffeinated beverages.</p> <p>I’m about to relate to you the brief story of our toxic relationship with our legacy codebase. I’ll then describe how we broke up with it, and what we’ve changed to avoid falling back into bad relationships with high-maintenance code.</p> <p>The Breakup</p> <p>It took eight months of seven-day weeks and twelve-hour days to complete our last legacy system overhaul.</p> <p>Our predecessors had pushed code into production for years without writing a single line of documentation. In fact, some of it wasn’t even in source control, as we later learned. But that’s another story.</p> <p>I’m sure you’ve seen gems like this before:</p> <p>... hundreds of line of incomprehensible code<br /> // TODO: Fix this bug!!!<br /> ... hundreds more lines in the same method, no idea where or what the bug is</p> <p>That is the approximate ratio and quality of the only documentation we had on the project.</p> <p>I wasn’t exposed to direct sunlight again until April, and I’d had enough. It was time for a break-up.</p> <p>The importance of documentation</p> <p>In his book “The Art of Unit Testing,” Roy Osherove defines legacy code as any code that doesn’t have tests. He was an optimist. I more loosely regard as legacy any code which contains more technical debt than the time it took to write.</p> <p>As our organization had, many development teams fall into the trap of instant-legacy code: code that already fits the “legacy code” label at the time of release.</p> <p>In my experience, documentation is the most important aspect of avoiding such legacy code.</p> <p>I have yet to meet a developer who loves the idea of documentation. On the other hand, I also have never met a developer who loves crawling inside the skull of a stranger to reverse-engineer a legacy implementation without any documentation.</p> <p>As they say, breaking up is hard to do. But in this case, I promise it will be worth it.</p> <p>So let’s get started on converting your legacy into something you’ll be proud to bequeath to your successors. Let’s get documenting!</p> <p>Our approach: four layers of documentation</p> <p>We created, and began rigorously following, a four-layer architecture for documentation. We maintain three layers of persistent documentation for the project through its life-cycle. We also communicate through one layer of ephemeral documentation during our release management process.</p> <p>The three persistent layers of documentation correlate to three different velocities in our development process. We include documentation review as part of code review to avoid falling back into bad habits.</p> <p>// The front lines: in-line comments keep maintainers sane</p> <p>The most granular tier of explicit documentation is in the code. We perform complete documentation of all classes and methods, their inputs, expected outputs, and exception pathways. We also document “unusual” code in-line.</p> <p>As a predominantly C# shop we use /// documentation ubiquitously. This decorates class, interface, and method declarations. The /// helper auto-generates XML stubs to document the nuts and bolts of the API.</p> <p>These pop up when your code is being referenced by an external project or DLL (dynamic-link library), provided that you’ve distributed the debugging files. Our IDE (integrated development environment) renders this as tool-tip help wherever a reference appears. This greatly aids developers, who are diving into our code for the first time, when trying to fix a bug or extend it for a new use case.</p> <p>It’s worth researching your language and IDE of choice to learn how to extend it with contextual help for your libraries. If you’re not used to documenting your APIs, I suggest reading these articles to get started.</p> <p>We also include regular // comments beyond API documentation. We add these wherever the code is counter-intuitive, or if we’ve found a particularly elegant solution to a problem. We also use these to create “to-do’s” for later refactor when putting in a quick-and-dirty fix.</p> <p>These are invaluable to whoever has to come along and revert the change or fix the code.</p> <p>Because it’s in-line with the source code, this documentation changes at the highest velocity — right along with the code it supports.</p> <p>README: making implementation a breeze</p> <p>We use README files as an implementer’s guide. This documentation is for whoever will be consuming our libraries. It serves a secondary purpose as tactical-level documentation of the particulars of the implementation.</p> <p>We use GitHub for source control, so we place readme.md (Markdown) files in each folder in our GitHub repository. GitHub very nicely renders Markdown files and automatically shows the rendered readme.md files in each folder. This results in a much more usable help file than a simple .txt document.</p> <p>Storing this documentation in the code-base helps developers maintain the documentation. Anyone making a code change can easily open the .MD file in their source code editor or an online markdown editor, and immediately update the documentation.</p> <p>Thus the source-controlled Markdown files live next to, but not within, the code they support. It’s also somewhat more “zoomed out” than inline comments. These two factors result in a lower velocity of updates on this documentation. Because you can still include it in the same commits it changes with higher velocity than offline documentation.</p> <p>The final advantage of this format is that anyone who downloads the source code has immediate access to the implementation guides. Coupled with the inline documentation, this provides both maintainers and consumers with sufficient documentation. They can develop a basic understanding of the project without jumping into another system, such as a wiki.</p> <p>Wiki: where business meets development</p> <p>We use the wiki-level documentation to marry the implementation to the business requirements. This documentation consists primarily of requirements, enterprise architecture diagrams and considerations, and tactical diagrams such as unified modeling language (UML) flow charts and class diagrams.</p> <p>We also use pages (on the same wiki) as meeting minutes, and to record decisions. We use a wiki which has versioning so that we can see a complete history of how requirements and designs have changed over time.</p> <p>We thereby ensure a complete history of the requirements process and how it relates to the changing architecture. Incidentally, GitHub also provides a wiki feature, but we use a third-party wiki which integrates with our project management software.</p> <p>Release management: commit and pull request comments</p> <p>Our release management process includes code review. Our code review includes documentation review.</p> <p>As GitHub is our source control platform, we bake code review into our pull requests. The platform supports commenting upon check-in, inline comment threads on portions of commits, and a conversation thread on the pull request.</p> <p>The key to using these communication channels successfully is to ensure that all discussions result in a tangible output. Either clarify the code itself, or extend the permanent documentation in response to questions.</p> <p>If the reviewer doesn’t understand the code as it is written, future developers won’t either. Rewrite the code to be more self-explanatory, or extend the in-line or readme documentation.</p> <p>It’s not sufficient to end the conversation by replying to the thread: we treat this documentation as ephemeral, and on a long-lived code-base it’s a pain to review the full commit history.</p> <p>Bonus round: self-documenting code</p> <p>Finally, one quick plug for so-called “self-documenting code.” I’m a firm believer that the code should be self-explanatory at the surface. Explicit documentation should provide context or improve maintainability.</p> <p>There are already good articles about this (here’s one), so I won’t go into detail here.</p> <p>Final thoughts</p> <p>I hope that you learn from our experience. Our four-layer documentation architecture may not work for you, but it’s important to figure out what will.</p> <p>The big take-aways? First, it’s necessary to develop a healthy understanding of yourself and your own needs before you entangle yourself with a new code base.</p> <p>Second, it’s easier to stay out of a bad relationship with legacy code than to extract yourself once you’re already committed.</p> <p>And third, you only leave one legacy. But every commit you make contributes to it. They won’t all be good, they won’t all be bad, but they should at least be clear. Please think about what you’re leaving for those who come after you.</p> <p>Together we can reclaim our legacy as developers.</p>]]></description>
			<content:encoded><![CDATA[<p>The concept of a legacy usually conveys permanence, value, and greatness. But what about in relation to your code? In this article, Jonathan explains how his team broke up with their legacy codebase, why it was necessary, and how your team can do the same.</p> <p>Written and read by Jonathan Solózano-Hamilton: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>Original article: <a href= "https://fcc.im/2FEuAcR">https://fcc.im/2FEuAcR</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p id="8cc4" class="graf graf--p graf-after--p graf--trailing">  </p> <p>The concept of legacy conveys permanence, value, and the greatness we bequeath to our children and our successors in the community.</p> <p>People make ludicrously generous donations to charitable causes to establish their legacy. They create eponymous endowments or buildings and strive to protect the name their children will inherit.</p> <p>It’s therefore striking that software developers have gotten their “legacy” so catastrophically wrong.</p> <p>Google “legacy,” and you’ll see the first definition matches what I’ve laid out for you here. It’s a definition that’s persisted since the 14th or 15th century.</p> <p>The second definition provides a shocking contrast:</p> <p>legacy. adjective (computing) “denoting software or hardware that has been superseded but is difficult to replace because of its wide use.</p> <p>Dictionaries around the internet agree with this definition. It applies only to the field of computing. We developers have managed to invert the definition of our own legacy in the historical eye-blink that is computer science. That’s almost impressive!</p> <p>If you’re an experienced developer, you’ve certainly been tasked with supporting at least one legacy system in your career. For the uninitiated, well — buy a lot of caffeinated beverages.</p> <p>I’m about to relate to you the brief story of our toxic relationship with our legacy codebase. I’ll then describe how we broke up with it, and what we’ve changed to avoid falling back into bad relationships with high-maintenance code.</p> <p>The Breakup</p> <p>It took eight months of seven-day weeks and twelve-hour days to complete our last legacy system overhaul.</p> <p>Our predecessors had pushed code into production for years without writing a single line of documentation. In fact, some of it wasn’t even in source control, as we later learned. But that’s another story.</p> <p>I’m sure you’ve seen gems like this before:</p> <p>... hundreds of line of incomprehensible code // TODO: Fix this bug!!! ... hundreds more lines in the same method, no idea where or what the bug is</p> <p>That is the approximate ratio and quality of the only documentation we had on the project.</p> <p>I wasn’t exposed to direct sunlight again until April, and I’d had enough. It was time for a break-up.</p> <p>The importance of documentation</p> <p>In his book “The Art of Unit Testing,” Roy Osherove defines legacy code as any code that doesn’t have tests. He was an optimist. I more loosely regard as legacy any code which contains more technical debt than the time it took to write.</p> <p>As our organization had, many development teams fall into the trap of instant-legacy code: code that already fits the “legacy code” label at the time of release.</p> <p>In my experience, documentation is the most important aspect of avoiding such legacy code.</p> <p>I have yet to meet a developer who loves the idea of documentation. On the other hand, I also have never met a developer who loves crawling inside the skull of a stranger to reverse-engineer a legacy implementation without any documentation.</p> <p>As they say, breaking up is hard to do. But in this case, I promise it will be worth it.</p> <p>So let’s get started on converting your legacy into something you’ll be proud to bequeath to your successors. Let’s get documenting!</p> <p>Our approach: four layers of documentation</p> <p>We created, and began rigorously following, a four-layer architecture for documentation. We maintain three layers of persistent documentation for the project through its life-cycle. We also communicate through one layer of ephemeral documentation during our release management process.</p> <p>The three persistent layers of documentation correlate to three different velocities in our development process. We include documentation review as part of code review to avoid falling back into bad habits.</p> <p>// The front lines: in-line comments keep maintainers sane</p> <p>The most granular tier of explicit documentation is in the code. We perform complete documentation of all classes and methods, their inputs, expected outputs, and exception pathways. We also document “unusual” code in-line.</p> <p>As a predominantly C# shop we use /// documentation ubiquitously. This decorates class, interface, and method declarations. The /// helper auto-generates XML stubs to document the nuts and bolts of the API.</p> <p>These pop up when your code is being referenced by an external project or DLL (dynamic-link library), provided that you’ve distributed the debugging files. Our IDE (integrated development environment) renders this as tool-tip help wherever a reference appears. This greatly aids developers, who are diving into our code for the first time, when trying to fix a bug or extend it for a new use case.</p> <p>It’s worth researching your language and IDE of choice to learn how to extend it with contextual help for your libraries. If you’re not used to documenting your APIs, I suggest reading these articles to get started.</p> <p>We also include regular // comments beyond API documentation. We add these wherever the code is counter-intuitive, or if we’ve found a particularly elegant solution to a problem. We also use these to create “to-do’s” for later refactor when putting in a quick-and-dirty fix.</p> <p>These are invaluable to whoever has to come along and revert the change or fix the code.</p> <p>Because it’s in-line with the source code, this documentation changes at the highest velocity — right along with the code it supports.</p> <p>README: making implementation a breeze</p> <p>We use README files as an implementer’s guide. This documentation is for whoever will be consuming our libraries. It serves a secondary purpose as tactical-level documentation of the particulars of the implementation.</p> <p>We use GitHub for source control, so we place readme.md (Markdown) files in each folder in our GitHub repository. GitHub very nicely renders Markdown files and automatically shows the rendered readme.md files in each folder. This results in a much more usable help file than a simple .txt document.</p> <p>Storing this documentation in the code-base helps developers maintain the documentation. Anyone making a code change can easily open the .MD file in their source code editor or an online markdown editor, and immediately update the documentation.</p> <p>Thus the source-controlled Markdown files live next to, but not within, the code they support. It’s also somewhat more “zoomed out” than inline comments. These two factors result in a lower velocity of updates on this documentation. Because you can still include it in the same commits it changes with higher velocity than offline documentation.</p> <p>The final advantage of this format is that anyone who downloads the source code has immediate access to the implementation guides. Coupled with the inline documentation, this provides both maintainers and consumers with sufficient documentation. They can develop a basic understanding of the project without jumping into another system, such as a wiki.</p> <p>Wiki: where business meets development</p> <p>We use the wiki-level documentation to marry the implementation to the business requirements. This documentation consists primarily of requirements, enterprise architecture diagrams and considerations, and tactical diagrams such as unified modeling language (UML) flow charts and class diagrams.</p> <p>We also use pages (on the same wiki) as meeting minutes, and to record decisions. We use a wiki which has versioning so that we can see a complete history of how requirements and designs have changed over time.</p> <p>We thereby ensure a complete history of the requirements process and how it relates to the changing architecture. Incidentally, GitHub also provides a wiki feature, but we use a third-party wiki which integrates with our project management software.</p> <p>Release management: commit and pull request comments</p> <p>Our release management process includes code review. Our code review includes documentation review.</p> <p>As GitHub is our source control platform, we bake code review into our pull requests. The platform supports commenting upon check-in, inline comment threads on portions of commits, and a conversation thread on the pull request.</p> <p>The key to using these communication channels successfully is to ensure that all discussions result in a tangible output. Either clarify the code itself, or extend the permanent documentation in response to questions.</p> <p>If the reviewer doesn’t understand the code as it is written, future developers won’t either. Rewrite the code to be more self-explanatory, or extend the in-line or readme documentation.</p> <p>It’s not sufficient to end the conversation by replying to the thread: we treat this documentation as ephemeral, and on a long-lived code-base it’s a pain to review the full commit history.</p> <p>Bonus round: self-documenting code</p> <p>Finally, one quick plug for so-called “self-documenting code.” I’m a firm believer that the code should be self-explanatory at the surface. Explicit documentation should provide context or improve maintainability.</p> <p>There are already good articles about this (here’s one), so I won’t go into detail here.</p> <p>Final thoughts</p> <p>I hope that you learn from our experience. Our four-layer documentation architecture may not work for you, but it’s important to figure out what will.</p> <p>The big take-aways? First, it’s necessary to develop a healthy understanding of yourself and your own needs before you entangle yourself with a new code base.</p> <p>Second, it’s easier to stay out of a bad relationship with legacy code than to extract yourself once you’re already committed.</p> <p>And third, you only leave one legacy. But every commit you make contributes to it. They won’t all be good, they won’t all be bad, but they should at least be clear. Please think about what you’re leaving for those who come after you.</p> <p>Together we can reclaim our legacy as developers.</p>]]></content:encoded>
			<enclosure length="10432576" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Our_team_broke_up_with_instant_legacy_code_releases_and_yours_can_too.mp3?dest-id=603849" />
			<itunes:duration>10:51</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[The concept of a legacy usually conveys permanence, value, and greatness. But what about in relation to your code? In this article, Jonathan explains how his team broke up with their legacy codebase, why it was necessary, and how your team can do the...]]></itunes:subtitle>
			<itunes:summary>The concept of a legacy usually conveys permanence, value, and greatness. But what about in relation to your code? In this article, Jonathan explains how his team broke up with their legacy codebase, why it was necessary, and how your team can do the same.</itunes:summary>
			<itunes:episode>22</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 21 - What is an API? In English, please.</title>
			<itunes:title>What is an API? In English, please.</itunes:title>
			<pubDate>Mon, 12 Mar 2018 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[b774302fd024f5e3e97f672ee39dbab5]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-21-what-is-an-api-in-english-please]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Many people have a vague or incorrect idea of what the fairly common term "API" means. Heads up: it's not a type of beer! Petr lays out the basic details of an application programming interface in plain English so you'll never be confused again.</p> <p>Written by Petr Gazarov: <a href= "https://twitter.com/PetrGazarov">https://twitter.com/PetrGazarov</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2FHPHer">https://fcc.im/2FHPHer</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>Before I learned software development, API sounded like a kind of beer.</p> <p>Today I use the term so often that I have in fact recently tried to order an API at a bar.</p> <p>The bartender’s response was to throw a 404: resource not found.</p> <p>I meet lots of people, both working in tech and elsewhere, who have a rather vague or incorrect idea about what this fairly common term means.</p> <p>Technically, API stands for Application Programming Interface. At some point or another, most large companies have built APIs for their customers, or for internal use.</p> <p>But how do you explain API in plain English? And is there a broader meaning than the one used in development and business? First, let’s pull back and look at how the web itself works.</p> <p>WWW and remote servers</p> <p>When I think about the Web, I imagine a large network of connected servers.</p> <p>Every page on the internet is stored somewhere on a remote server. A remote server is not so mystical after all — it’s just a part of a remotely located computer that is optimized to process requests.</p> <p>To put things in perspective, you can spin up a server on your laptop capable of serving an entire website to the Web (in fact, a local server is what engineers use to develop websites before releasing them to the public).</p> <p>When you type www.facebook.com into your browser, a request goes out to Facebook’s remote server. Once your browser receives the response, it interprets the code and displays the page.</p> <p>To the browser, also known as the client, Facebook’s server is an API. This means that every time you visit a page on the Web, you interact with some remote server’s API.</p> <p>An API isn’t the same as the remote server — rather it is the part of the server that receives requests and sends responses.</p> <p>APIs as a way to serve your customers</p> <p>You’ve probably heard of companies packaging APIs as products. For example, Weather Underground sells access to its weather data API.</p> <p>Example scenario: Your small business’s website has a form used to sign clients up for appointments. You want to give your clients the ability to automatically create a Google calendar event with the details for that appointment.</p> <p>API use: The idea is to have your website’s server talk directly to Google’s server with a request to create an event with the given details. Your server would then receive Google’s response, process it, and send back relevant information to the browser, such as a confirmation message to the user.</p> <p>Alternatively, your browser can often send an API request directly to Google’s server bypassing your server.</p> <p>How is this Google Calendar’s API different from the API of any other remote server out there?</p> <p>In technical terms, the difference is the format of the request and the response.</p> <p>To render the whole web page, your browser expects a response in HTML, which contains presentational code, while Google Calendar’s API call would just return the data — likely in a format like JSON.</p> <p>If your website’s server is making the API request, then your website’s server is the client (similar to your browser being the client when you use it to navigate to a website).</p> <p>From your users perspective, APIs allow them to complete the action without leaving your website.</p> <p>Most modern websites consume at least some third-party APIs.</p> <p>Many problems already have a third-party solution, be it in the form of a library or service. It’s often just easier and more reliable to use an existing solution.</p> <p>It’s not uncommon for development teams to break up their application into multiple servers that talk to each other via APIs. The servers that perform helper functions for the main application server are commonly referred to as microservices.</p> <p>To summarize, when a company offers an API to their customers, it just means that they’ve built a set of dedicated URLs that return pure data responses — meaning the responses won’t contain the kind of presentational overhead that you would expect in a graphical user interface like a website.</p> <p>Can you make these requests with your browser? Often, yes. Since the actual HTTP transmission happens in text, your browser will always do the best it can to display the response.</p> <p>For example, you can access GitHub’s API directly with your browser without even needing an access token. Here’s the JSON response you get when you visit a GitHub user’s API route in your browser (https://api.github.com/users/petrgazarov).</p> <p>The browser seems to have done just fine displaying a JSON response. A JSON response like this is ready for use in your code. It‘s easy to extract data from this text. Then you can do whatever you want with the data.</p> <p>A is for “Application”</p> <p>To close off, let’s throw in a couple more examples of APIs.</p> <p>“Application” can refer to many things. Here are some of them in the context of API:</p> <p>A piece of software with a distinct function.</p> <p>The whole server, the whole app, or just a small part of an app.</p> <p>Basically any piece of software that can be distinctively separated from its environment, can be an “A” in API, and will probably also have some sort of API.</p> <p>Let’s say you’re using a third-party library in your code. Once incorporated into your code, a library becomes part of your overall app. Being a distinct piece of software, the library would likely have an API which allows it to interact with the rest of your code.</p> <p>Here’s another example: In Object Oriented Design, code is organized into objects. Your application may have hundreds of objects defined that can interact with one another.</p> <p>Each object has an API — a set of public methods and properties that it uses to interact with other objects in your application.</p> <p>An object may also have inner logic that is private, meaning that it’s hidden from the outside scope (and not an API).</p> <p>From what we have covered, I hope you take away the broader meaning of API as well as the more common uses of the term today.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Many people have a vague or incorrect idea of what the fairly common term "API" means. Heads up: it's not a type of beer! Petr lays out the basic details of an application programming interface in plain English so you'll never be confused again.</p> <p>Written by Petr Gazarov: <a href= "https://twitter.com/PetrGazarov">https://twitter.com/PetrGazarov</a></p> <p>Read by Abbey Rennemeyer: <a href= "https://twitter.com/abbeyrenn">https://twitter.com/abbeyrenn</a></p> <p>Original article: <a href= "https://fcc.im/2FHPHer">https://fcc.im/2FHPHer</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>Before I learned software development, API sounded like a kind of beer.</p> <p>Today I use the term so often that I have in fact recently tried to order an API at a bar.</p> <p>The bartender’s response was to throw a 404: resource not found.</p> <p>I meet lots of people, both working in tech and elsewhere, who have a rather vague or incorrect idea about what this fairly common term means.</p> <p>Technically, API stands for Application Programming Interface. At some point or another, most large companies have built APIs for their customers, or for internal use.</p> <p>But how do you explain API in plain English? And is there a broader meaning than the one used in development and business? First, let’s pull back and look at how the web itself works.</p> <p>WWW and remote servers</p> <p>When I think about the Web, I imagine a large network of connected servers.</p> <p>Every page on the internet is stored somewhere on a remote server. A remote server is not so mystical after all — it’s just a part of a remotely located computer that is optimized to process requests.</p> <p>To put things in perspective, you can spin up a server on your laptop capable of serving an entire website to the Web (in fact, a local server is what engineers use to develop websites before releasing them to the public).</p> <p>When you type www.facebook.com into your browser, a request goes out to Facebook’s remote server. Once your browser receives the response, it interprets the code and displays the page.</p> <p>To the browser, also known as the client, Facebook’s server is an API. This means that every time you visit a page on the Web, you interact with some remote server’s API.</p> <p>An API isn’t the same as the remote server — rather it is the part of the server that receives requests and sends responses.</p> <p>APIs as a way to serve your customers</p> <p>You’ve probably heard of companies packaging APIs as products. For example, Weather Underground sells access to its weather data API.</p> <p>Example scenario: Your small business’s website has a form used to sign clients up for appointments. You want to give your clients the ability to automatically create a Google calendar event with the details for that appointment.</p> <p>API use: The idea is to have your website’s server talk directly to Google’s server with a request to create an event with the given details. Your server would then receive Google’s response, process it, and send back relevant information to the browser, such as a confirmation message to the user.</p> <p>Alternatively, your browser can often send an API request directly to Google’s server bypassing your server.</p> <p>How is this Google Calendar’s API different from the API of any other remote server out there?</p> <p>In technical terms, the difference is the format of the request and the response.</p> <p>To render the whole web page, your browser expects a response in HTML, which contains presentational code, while Google Calendar’s API call would just return the data — likely in a format like JSON.</p> <p>If your website’s server is making the API request, then your website’s server is the client (similar to your browser being the client when you use it to navigate to a website).</p> <p>From your users perspective, APIs allow them to complete the action without leaving your website.</p> <p>Most modern websites consume at least some third-party APIs.</p> <p>Many problems already have a third-party solution, be it in the form of a library or service. It’s often just easier and more reliable to use an existing solution.</p> <p>It’s not uncommon for development teams to break up their application into multiple servers that talk to each other via APIs. The servers that perform helper functions for the main application server are commonly referred to as microservices.</p> <p>To summarize, when a company offers an API to their customers, it just means that they’ve built a set of dedicated URLs that return pure data responses — meaning the responses won’t contain the kind of presentational overhead that you would expect in a graphical user interface like a website.</p> <p>Can you make these requests with your browser? Often, yes. Since the actual HTTP transmission happens in text, your browser will always do the best it can to display the response.</p> <p>For example, you can access GitHub’s API directly with your browser without even needing an access token. Here’s the JSON response you get when you visit a GitHub user’s API route in your browser (https://api.github.com/users/petrgazarov).</p> <p>The browser seems to have done just fine displaying a JSON response. A JSON response like this is ready for use in your code. It‘s easy to extract data from this text. Then you can do whatever you want with the data.</p> <p>A is for “Application”</p> <p>To close off, let’s throw in a couple more examples of APIs.</p> <p>“Application” can refer to many things. Here are some of them in the context of API:</p> <p>A piece of software with a distinct function.</p> <p>The whole server, the whole app, or just a small part of an app.</p> <p>Basically any piece of software that can be distinctively separated from its environment, can be an “A” in API, and will probably also have some sort of API.</p> <p>Let’s say you’re using a third-party library in your code. Once incorporated into your code, a library becomes part of your overall app. Being a distinct piece of software, the library would likely have an API which allows it to interact with the rest of your code.</p> <p>Here’s another example: In Object Oriented Design, code is organized into objects. Your application may have hundreds of objects defined that can interact with one another.</p> <p>Each object has an API — a set of public methods and properties that it uses to interact with other objects in your application.</p> <p>An object may also have inner logic that is private, meaning that it’s hidden from the outside scope (and not an API).</p> <p>From what we have covered, I hope you take away the broader meaning of API as well as the more common uses of the term today.</p> <p> </p>]]></content:encoded>
			<enclosure length="8362634" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/What_is_an_API__In_English_please_final_edits_2.mp3?dest-id=603849" />
			<itunes:duration>06:58</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Many people have a vague or incorrect idea of what the fairly common term "API" means. Heads up: it's not a type of beer! Petr lays out the basic details of an application programming interface in plain English so you'll never be confused again....]]></itunes:subtitle>
			<itunes:summary>Many people have a vague or incorrect idea of what the fairly common term "API" means. Heads up: it's not a type of beer! Petr lays out the basic details of an application programming interface in plain English so you'll never be confused again.</itunes:summary>
			<itunes:episode>21</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 20 - Basics of Machine Learning - interview with Nishant Shukla</title>
			<itunes:title>Basics of Machine Learning - interview with Nishant Shukla</itunes:title>
			<pubDate>Mon, 05 Mar 2018 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[92b35908471c8b60b81292fef3fb3c31]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-20-machine-learning-in-tensorflow-an-interview-with-nishant-shukla]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Nishant Shukla is the author of Machine Learning in TensorFlow, and is also the VP of Engineering at a startup focussing on Artificial Intelligence technologies for education. In this episode, he discusses the basics of machine learning. Learn more about his book at <a href= "http://tensorflowbook.com/">http://tensorflowbook.com/</a></p> <p> </p> <p>Interviewer: Beau Carnes - <a href= "https://twitter.com/CarnesBeau">https://twitter.com/CarnesBeau</a></p> <p>Interviewee: Nishant Shukla - <a href= "https://twitter.com/binroot">https://twitter.com/binroot</a></p> <p> </p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Nishant Shukla is the author of Machine Learning in TensorFlow, and is also the VP of Engineering at a startup focussing on Artificial Intelligence technologies for education. In this episode, he discusses the basics of machine learning. Learn more about his book at <a href= "http://tensorflowbook.com/">http://tensorflowbook.com/</a></p> <p> </p> <p>Interviewer: Beau Carnes - <a href= "https://twitter.com/CarnesBeau">https://twitter.com/CarnesBeau</a></p> <p>Interviewee: Nishant Shukla - <a href= "https://twitter.com/binroot">https://twitter.com/binroot</a></p> <p> </p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p> </p>]]></content:encoded>
			<enclosure length="22813927" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._20_-_Basics_of_Machine_Learning-Interview_with_Nishant_Shukla.mp3?dest-id=603849" />
			<itunes:duration>23:46</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Nishant Shukla is the author of Machine Learning in TensorFlow, and is also the VP of Engineering at a startup focussing on Artificial Intelligence technologies for education. In this episode, he discusses the basics of machine learning. Learn more...]]></itunes:subtitle>
			<itunes:summary>Nishant Shukla is the author of Machine Learning in TensorFlow, and is also the VP of Engineering at a startup focussing on Artificial Intelligence (AI) technologies for education. In this episode, he discusses the basics of machine learning. Learn more about his book at http://tensorflowbook.com/
</itunes:summary>
			<itunes:episode>20</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 19 - Don't worry, be happy: how to build your future tech career in 5 simple steps</title>
			<itunes:title>Don't worry, be happy: how to build your future tech career in 5 simple steps</itunes:title>
			<pubDate>Mon, 26 Feb 2018 09:30:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[809ec23573aa39d627794fb3591cb619]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-20-dont-worry-be-happy-how-to-build-your-future-tech-career-in-5-simple-steps]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Changing careers is very difficult. Add in a full-time job and a couple of kids, and the task seems nearly impossible. But even if you're busy, you can make the time to build the skills to level up your career. Here's how Michael Tombor did just that.</p> <p>Written and read by Michael Tombor: <a href= "https://twitter.com/michaeltombor">https://twitter.com/michaeltombor</a></p> <p>Original article: <a href= "https://fcc.im/2BK2vkm">https://fcc.im/2BK2vkm</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>“Instead of saying “I don’t have time” try saying “It’s not a priority,” and see how that feels.” — Laura Vanderkam</p> <p>Changing careers is very difficult. Add in a full-time job and a couple of kids and the task seems nearly impossible. Yet, even if you are busy, you can prioritize and make the time to focus on what matters to you and build the skills to level up your career.</p> <p>Engineer your future with code</p> <p>I started my coding journey just six months ago. Now I am one project away from completing my front-end developer certificate on freeCodeCamp. I’ve also completed the web developer boot camp course by Colt Steele on Udemy. And I did this all while raising two kids and working in a full-time job.</p> <p>When I began using these tips, I saw my progress increase tenfold. I know I would have accomplished much more if I had implemented them earlier in my journey. I have not only benefited from increased productivity, but I feel more balanced and am having more fun than ever before.</p> <p>My pivot into web development</p> <p>After being in health care for the last five years, I realized that it wasn’t what I wanted to do for the rest of my life. Don’t get me wrong - I loved helping people on their path to health, but I hated seeing the system break down for them. I hated when people could not afford their medication, or when their care plan wasn’t in sync with the treatment they needed.</p> <p>I wanted to do more to help these people. But I knew that I couldn’t do more unless I took a step back and looked at the bigger picture.</p> <p>I was not always interested in coding, but the more I looked at the forces making real change in today’s world, the more I saw that tech was behind these advances.</p> <p>I saw an opportunity to make meaningful change, and that is when I became interested in coding.</p> <p>Why are you coding?</p> <p>Whatever the reason is, really think about it and pin it down. Use it as motivation to propel you towards your coding goals. Having this end goal will help you bust through plateaus and push through the hard parts (coding is hard).</p> <p>Every day that I spend at my current day job motivates me to get home, boot up my laptop, and continue my journey of learning how to code.</p> <p>The good news is that building coding skills is simple. All you have to do is code a lot. But unfortunately, this is where the hard part comes in. Fitting time into your busy life to routinely code is difficult, to say the least.</p> <p>How to climb the coding mountain</p> <p>There is a gap between where you are now and where you want to be. That is why you are reading this article. That is why you work day in and out, and end up sacrificing time with your family and loved ones.</p> <p>If we are spending all this time working towards our goal, it is paramount to make the most of the time we spend learning how to code.</p> <p>Here are five steps to turn this dream into a reality:</p> <p>Create your personalized goals</p> <p>To make the most of your time, nothing is more important than making actionable short-term goals. This will not only help you feel a sense of accomplishment every time you meet a goal, but it will help make the coding journey feel a lot less daunting.</p> <p>Goals Exercise!</p> <p>To help you come up with focused goals, I want to encourage you to do a quick exercise that I picked up from Laura Vanderkam.</p> <p>1. Picture yourself one year from now. You have crushed ALL your coding goals and landed your dream job. You have given five talks at conferences around the world, and you built up your App and it was successful. Whatever success looks like to you, picture your future self. Please be ambitious, maybe even dream a little.</p> <p>2. What 3 - 5 goals did you accomplish in that year that made it so successful?</p> <p>3. Write these goals down.</p> <p>4. Repeat this exercise for your personal life goals. It is impossible to work all the time, and to be successful you need work life balance (or you will burn out).</p> <p>Now you have 6 - 10 ambitious goals that you want to accomplish during the next year. To break these larger goals down into action items, think about and plan about how you can meet these goals.</p> <p>For example, if you want to complete the freeCodeCamp front end certificate, you need to schedule time to work on it throughout the week. If you want to run a marathon, you need to buy running shoes, sign up for a marathon, and schedule time to train regularly.</p> <p>2. Make a Schedule</p> <p>I’ll be honest - I am definitely not the scheduling type. I thought that I could wing it day by day. But realistically, you need to set time aside to focus, or your goals will pour over into the rest of your life. I found myself feeling anxious about coding during time with my family or when I was putting my kids to bed, because I hadn’t coded yet that day.</p> <p>The thing I looked forward to all day (coding) started to negatively impact my quality of life.</p> <p>Splitting your time into focused blocks allows you to be 100% in the present moment. When it is coding time, you can have tunnel vision and hack away. When it is time to unwind, or hang out with people you care about, you can be present because you coded that morning, or have time scheduled later in the day.</p> <p>I schedule a lot of family time. Family is really important to me. Your schedule will look a lot different, but the point is to create a schedule that will allow you to meet your goals without you hating life along the way. Just try to account for everything, so you can stick to your schedule.</p> <p>3. Audit yourself to find time opportunities</p> <p>Write down all the activities in a given day or week and see what you really do with your time. You will likely be surprised by exactly how much time you spend mindlessly scrolling through your Instagram feed, or binge watching a new Netflix show (I love Stranger Things).</p> <p>I’m not telling you to cut all of it out but keep a balance. You can definitely turn some of that idle time into some serious coding gains.</p> <p>There is more time than you think</p> <p>If you are still thinking to yourself, “yeah, but I still work a lot and (insert excuse here) so I can’t find time”, then here is a fun fact! There are 168 hours in a week. If you work a full 40 hour week and subtract 8 hours of sleep per night (which I definitely don’t get) you still end up with 72 hours of “free” time.</p> <p>Look at all the time you have in your life situation and squeeze as much “good” stuff into that time as you can. There IS time.</p> <p>4. Fill your time with quality</p> <p><br /> Here are some tools that I use to help me accomplish my coding goals and stay focused on my learning path:</p> <p>freeCodeCamp</p> <p>Seriously one of the best tools for meeting goals. The curriculum is right there for you to follow and work on, it even tracks your progress!</p> <p>JavaScript 30</p> <p>30 JavaScript projects really help you master array methods while filling up your portfolio with projects (plus it is tons of fun). Wes Bos is a solid instructor who provides a quality free course. You can complete it in 30 consecutive days, or work it into your learning schedule.</p> <p>100 Days of code on Twitter</p> <p>This 100 day challenge consists of coding every day and tweeting about what you did. It is a great tool for tracking progress and measuring how far you have come. This community is full of inspiring people from all over the world and is a great way to meet like minded developers.</p> <p>The Web Developer Boot Camp</p> <p>I am almost finished with this course, and it has patched a lot of holes in my coding knowledge. Colt doesn’t just show you how to do something, he also explains why you do it a certain way. Plus, there is now an advanced web developer boot camp that I am going to take once I’m done.</p> <p>Live It!</p> <p>This isn’t a resource, but you should embrace the tech community by living it. Listen to podcasts while you drive to work or do the dishes. Follow leaders in the industry on Twitter. Read articles. Immerse yourself in tech and you will learn without realizing you are learning.</p> <p>5. Multiply your time</p> <p>We have set goals, and now have several larger goals broken down into actionable goals. We have gone through how to fit these goals into your busy life and I have helped give you some ideas on how to fill your time. Now, I want to tell you how you can make the most out of the time you put into coding.</p> <p>The Answer: Be Happy!</p> <p>What does being happy have to do with managing time, you ask? Simply put: it is everything. The idea is called multiplying your time.</p> <p>Being present and deeply focused leads to increased productivity. This in turn multiplies the time you spend by increasing efficiency. Plus, who doesn’t want to be happy?</p> <p>According to Shawn Achor, who studied the effects of happiness and its link to productivity, your brain performs 31% more productively when you feel happy.</p> <p>Dopamine, which floods into your system when you feel positive, does two things:</p> <p>It makes you happier (duh!)</p> <p>It turns on the learning centers in your brain. They help you learn things more easily, and allow you to spend less time on learning while retaining more information.</p> <p>Turn your brain into a dopamine producing machine!</p> <p>You can release more dopamine by creating lasting, positive change. There are five things you can work into your routine to turn your brain into a dopamine producing machine:</p> <p>1. Write three new things that you’re grateful for each day. This creates the habit of scanning the world for positive things, instead of negative ones.</p> <p>2. Journal about a positive experience you had in the last 24 hours. This allows you to relive the positive experience which leads to the same dopamine response.</p> <p>3. Exercise. Go on a short walk before a coding session, or bust out a quick workout. Exercise releases tons of dopamine.</p> <p>4. Meditate. Meditation trains your brain to focus more on the task at hand, all while releasing dopamine.</p> <p>5. Random acts of kindness. Thank someone in your social support network for helping you, or help someone out. This not only releases dopamine for you, it also does the same for the person you helped (and they may pay it forward).</p> <p>Use blocks of time to build your future</p> <p>Even if we are busy, we must take out time for the things that matter the most. When you focus on what matters, you can build the life you want with the blocks of time you have.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Changing careers is very difficult. Add in a full-time job and a couple of kids, and the task seems nearly impossible. But even if you're busy, you can make the time to build the skills to level up your career. Here's how Michael Tombor did just that.</p> <p>Written and read by Michael Tombor: <a href= "https://twitter.com/michaeltombor">https://twitter.com/michaeltombor</a></p> <p>Original article: <a href= "https://fcc.im/2BK2vkm">https://fcc.im/2BK2vkm</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>“Instead of saying “I don’t have time” try saying “It’s not a priority,” and see how that feels.” — Laura Vanderkam</p> <p>Changing careers is very difficult. Add in a full-time job and a couple of kids and the task seems nearly impossible. Yet, even if you are busy, you can prioritize and make the time to focus on what matters to you and build the skills to level up your career.</p> <p>Engineer your future with code</p> <p>I started my coding journey just six months ago. Now I am one project away from completing my front-end developer certificate on freeCodeCamp. I’ve also completed the web developer boot camp course by Colt Steele on Udemy. And I did this all while raising two kids and working in a full-time job.</p> <p>When I began using these tips, I saw my progress increase tenfold. I know I would have accomplished much more if I had implemented them earlier in my journey. I have not only benefited from increased productivity, but I feel more balanced and am having more fun than ever before.</p> <p>My pivot into web development</p> <p>After being in health care for the last five years, I realized that it wasn’t what I wanted to do for the rest of my life. Don’t get me wrong - I loved helping people on their path to health, but I hated seeing the system break down for them. I hated when people could not afford their medication, or when their care plan wasn’t in sync with the treatment they needed.</p> <p>I wanted to do more to help these people. But I knew that I couldn’t do more unless I took a step back and looked at the bigger picture.</p> <p>I was not always interested in coding, but the more I looked at the forces making real change in today’s world, the more I saw that tech was behind these advances.</p> <p>I saw an opportunity to make meaningful change, and that is when I became interested in coding.</p> <p>Why are you coding?</p> <p>Whatever the reason is, really think about it and pin it down. Use it as motivation to propel you towards your coding goals. Having this end goal will help you bust through plateaus and push through the hard parts (coding is hard).</p> <p>Every day that I spend at my current day job motivates me to get home, boot up my laptop, and continue my journey of learning how to code.</p> <p>The good news is that building coding skills is simple. All you have to do is code a lot. But unfortunately, this is where the hard part comes in. Fitting time into your busy life to routinely code is difficult, to say the least.</p> <p>How to climb the coding mountain</p> <p>There is a gap between where you are now and where you want to be. That is why you are reading this article. That is why you work day in and out, and end up sacrificing time with your family and loved ones.</p> <p>If we are spending all this time working towards our goal, it is paramount to make the most of the time we spend learning how to code.</p> <p>Here are five steps to turn this dream into a reality:</p> <p>Create your personalized goals</p> <p>To make the most of your time, nothing is more important than making actionable short-term goals. This will not only help you feel a sense of accomplishment every time you meet a goal, but it will help make the coding journey feel a lot less daunting.</p> <p>Goals Exercise!</p> <p>To help you come up with focused goals, I want to encourage you to do a quick exercise that I picked up from Laura Vanderkam.</p> <p>1. Picture yourself one year from now. You have crushed ALL your coding goals and landed your dream job. You have given five talks at conferences around the world, and you built up your App and it was successful. Whatever success looks like to you, picture your future self. Please be ambitious, maybe even dream a little.</p> <p>2. What 3 - 5 goals did you accomplish in that year that made it so successful?</p> <p>3. Write these goals down.</p> <p>4. Repeat this exercise for your personal life goals. It is impossible to work all the time, and to be successful you need work life balance (or you will burn out).</p> <p>Now you have 6 - 10 ambitious goals that you want to accomplish during the next year. To break these larger goals down into action items, think about and plan about how you can meet these goals.</p> <p>For example, if you want to complete the freeCodeCamp front end certificate, you need to schedule time to work on it throughout the week. If you want to run a marathon, you need to buy running shoes, sign up for a marathon, and schedule time to train regularly.</p> <p>2. Make a Schedule</p> <p>I’ll be honest - I am definitely not the scheduling type. I thought that I could wing it day by day. But realistically, you need to set time aside to focus, or your goals will pour over into the rest of your life. I found myself feeling anxious about coding during time with my family or when I was putting my kids to bed, because I hadn’t coded yet that day.</p> <p>The thing I looked forward to all day (coding) started to negatively impact my quality of life.</p> <p>Splitting your time into focused blocks allows you to be 100% in the present moment. When it is coding time, you can have tunnel vision and hack away. When it is time to unwind, or hang out with people you care about, you can be present because you coded that morning, or have time scheduled later in the day.</p> <p>I schedule a lot of family time. Family is really important to me. Your schedule will look a lot different, but the point is to create a schedule that will allow you to meet your goals without you hating life along the way. Just try to account for everything, so you can stick to your schedule.</p> <p>3. Audit yourself to find time opportunities</p> <p>Write down all the activities in a given day or week and see what you really do with your time. You will likely be surprised by exactly how much time you spend mindlessly scrolling through your Instagram feed, or binge watching a new Netflix show (I love Stranger Things).</p> <p>I’m not telling you to cut all of it out but keep a balance. You can definitely turn some of that idle time into some serious coding gains.</p> <p>There is more time than you think</p> <p>If you are still thinking to yourself, “yeah, but I still work a lot and (insert excuse here) so I can’t find time”, then here is a fun fact! There are 168 hours in a week. If you work a full 40 hour week and subtract 8 hours of sleep per night (which I definitely don’t get) you still end up with 72 hours of “free” time.</p> <p>Look at all the time you have in your life situation and squeeze as much “good” stuff into that time as you can. There IS time.</p> <p>4. Fill your time with quality</p> <p> Here are some tools that I use to help me accomplish my coding goals and stay focused on my learning path:</p> <p>freeCodeCamp</p> <p>Seriously one of the best tools for meeting goals. The curriculum is right there for you to follow and work on, it even tracks your progress!</p> <p>JavaScript 30</p> <p>30 JavaScript projects really help you master array methods while filling up your portfolio with projects (plus it is tons of fun). Wes Bos is a solid instructor who provides a quality free course. You can complete it in 30 consecutive days, or work it into your learning schedule.</p> <p>100 Days of code on Twitter</p> <p>This 100 day challenge consists of coding every day and tweeting about what you did. It is a great tool for tracking progress and measuring how far you have come. This community is full of inspiring people from all over the world and is a great way to meet like minded developers.</p> <p>The Web Developer Boot Camp</p> <p>I am almost finished with this course, and it has patched a lot of holes in my coding knowledge. Colt doesn’t just show you how to do something, he also explains why you do it a certain way. Plus, there is now an advanced web developer boot camp that I am going to take once I’m done.</p> <p>Live It!</p> <p>This isn’t a resource, but you should embrace the tech community by living it. Listen to podcasts while you drive to work or do the dishes. Follow leaders in the industry on Twitter. Read articles. Immerse yourself in tech and you will learn without realizing you are learning.</p> <p>5. Multiply your time</p> <p>We have set goals, and now have several larger goals broken down into actionable goals. We have gone through how to fit these goals into your busy life and I have helped give you some ideas on how to fill your time. Now, I want to tell you how you can make the most out of the time you put into coding.</p> <p>The Answer: Be Happy!</p> <p>What does being happy have to do with managing time, you ask? Simply put: it is everything. The idea is called multiplying your time.</p> <p>Being present and deeply focused leads to increased productivity. This in turn multiplies the time you spend by increasing efficiency. Plus, who doesn’t want to be happy?</p> <p>According to Shawn Achor, who studied the effects of happiness and its link to productivity, your brain performs 31% more productively when you feel happy.</p> <p>Dopamine, which floods into your system when you feel positive, does two things:</p> <p>It makes you happier (duh!)</p> <p>It turns on the learning centers in your brain. They help you learn things more easily, and allow you to spend less time on learning while retaining more information.</p> <p>Turn your brain into a dopamine producing machine!</p> <p>You can release more dopamine by creating lasting, positive change. There are five things you can work into your routine to turn your brain into a dopamine producing machine:</p> <p>1. Write three new things that you’re grateful for each day. This creates the habit of scanning the world for positive things, instead of negative ones.</p> <p>2. Journal about a positive experience you had in the last 24 hours. This allows you to relive the positive experience which leads to the same dopamine response.</p> <p>3. Exercise. Go on a short walk before a coding session, or bust out a quick workout. Exercise releases tons of dopamine.</p> <p>4. Meditate. Meditation trains your brain to focus more on the task at hand, all while releasing dopamine.</p> <p>5. Random acts of kindness. Thank someone in your social support network for helping you, or help someone out. This not only releases dopamine for you, it also does the same for the person you helped (and they may pay it forward).</p> <p>Use blocks of time to build your future</p> <p>Even if we are busy, we must take out time for the things that matter the most. When you focus on what matters, you can build the life you want with the blocks of time you have.</p> <p> </p>]]></content:encoded>
			<enclosure length="13355970" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._19_Dont_worry_be_happy_final_edit.mp3?dest-id=603849" />
			<itunes:duration>13:54</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Changing careers is very difficult. Add in a full-time job and a couple of kids, and the task seems nearly impossible. But even if you're busy, you can make the time to build the skills to level up your career. Here's how Michael Tombor did just that....]]></itunes:subtitle>
			<itunes:summary>Changing careers is very difficult. Add in a full-time job and a couple of kids, and the task seems nearly impossible. But even if you're busy, you can make the time to build the skills to level up your career. Here's how Michael Tombor did just that.</itunes:summary>
			<itunes:episode>19</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 18 - Why I studied full time for 8 months for a Google interview</title>
			<itunes:title>Why I studied full-time for 8 months for a Google interview</itunes:title>
			<pubDate>Sun, 18 Feb 2018 18:03:15 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[220f8547f7049e87fed25505be8b642d]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-18-why-i-studied-full-time-for-8-months-for-a-google-interview]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>It’s true. John spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for his dream job interview at Google. When things didn't go his way, he shifted gears. Here's his story.</p> <p>Written by John Washam: <a href= "https://twitter.com/startupnextdoor">https://twitter.com/startupnextdoor</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2ERJpuC">https://fcc.im/2ERJpuC</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>It’s true. I’ve spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for the Google software engineer interview.</p> <p>How I Got Here</p> <p>I started programming in middle school, but when it came time for college I pursued a degree in Economics. My rationale was that there would be too many programmers looking for jobs by the time I graduated. Boy, I was wrong.</p> <p>Later, I joined the Army to become a programmer, but the recruiter talked me into a military intelligence position, and I spent the next two years studying the Korean language. I served in South Korea for 2 years afterward.</p> <p>Before I left the Army, I attempted to get back into programming and was surprised at the difficulty. I had learned BASIC in middle school and kept programming it through high school. But I restarted my programming studies with C++, and the leap was too large. I just couldn’t grasp it.</p> <p>I did enjoy making websites, however, but I used software with a Word-like interface that I used to publish my websites. I didn’t know how to make websites from scratch.</p> <p>After the Army, I decided to stay in Korea for a year and teach English. I used my nights and weekends to study web programming, using Perl, HTML, CSS (which was new at the time), JavaScript, and SQL.</p> <p>After a year of intense study, I landed a job in the Seattle area, and I’ve been here ever since.</p> <p>I’ve been a web developer now for 15 years. I’ve started 3 companies, 2 of which are still running and generating revenue. I’ve worked at large and small companies, helped startups launch and grow, and recruited and managed teams. I’ve been a product manager, a CEO, a designer, and a marketer.</p> <p>I’ve had a successful career and learned a lot along the way. But I’m not done yet.</p> <p>Seeking a Career Change</p> <p>Remember the part where I didn’t get a computer science degree? It has made a difference.</p> <p>A few years ago, I thought I could get hired anywhere. I thought I was hot stuff: the elusive full-stack web developer. But during my job search in 2013, I realized my skills were lacking. I had spent so much time chasing dollars by running startups in my spare time, that I had let my skills atrophy. I hadn’t kept up with technology.</p> <p>For years, I had learned just enough to get by. I had a wide skill set but wasn’t an expert in anything.</p> <p>Don’t get me wrong, I could still get hired, but not in the technologies or areas I wanted to work in. I could get hired for areas where the tech stack was somewhat outdated, like me. There’s big money in there, but I didn’t see exciting prospects.</p> <p>The realization reached its peak last year at a career fair. I was interested in perhaps working for one of the local companies that were startup labs run by venture capital firms. However, the fact that I lacked a computer science degree, and the skills and knowledge that accompany such a degree, meant I didn’t have a chance.</p> <p>I was working full-time on my businesses at the time, and still am today.</p> <p>At the beginning of 2016, I decided it was time to make a career change from web developer to software engineer. I would need to study hard and practice in order to compress a computer science degree into a few months, but once I did, I could start a new career.</p> <p>You may not see web development and software engineering as different positions. Both involve programming and craftsmanship, but software engineering adds to it knowledge of data structures and algorithms, compiled languages, memory considerations, and understanding the impact of coding and architecture decisions on the machines where they reside.</p> <p>Large companies that hire for software engineering positions expect candidates to have this knowledge.</p> <p>I reached out to an acquaintance who works at Google and asked him questions about his experience at the company. I had been reading How Google Works and was pretty familiar with Google already.</p> <p>Through another contact, I received a copy of Google’s coaching notes that are provided to interview candidates. This became the basis of my study plan.</p> <p>Google is a pretty awesome place to work, but before I even knew that, Google was my goal.</p> <p>Why Google?</p> <p>Google sets a very high bar for hiring. They want to hire only the best. So if I set my sights high (getting hired at Google), I’ll still be quite hireable elsewhere even if I’m not selected.</p> <p>The more I learn about Google, the more I want to work there.</p> <p>In brief, Google is a company that hires smart, creative people, and treats them well. Google rewards merit, encourages big ideas, and gives employees the freedom to make good decisions for the user.</p> <p>The hiring process is calibrated to bring in smart, passionate people. Google has honed the recruitment and interview process over the years. The brain teaser questions are long gone. Nowadays candidates are chosen based on coding ability, technical knowledge, and Googleyness. There’s a lot going on in that one word.</p> <p>Management is different. Managers don’t micro-manage. They trust engineers to make the right decisions. Trusting employees changes the role of managers at Google from what most folks envision when they think of management. In addition, managers can’t unilaterally, hire, fire, or promote. Many of the important management decisions that could be perceived as office politics are handled by a committee to remove that danger.</p> <p>Google’s people operations (HR) has learned what works over time, and they use data and employee feedback to improve evaluation systems, the hiring process, promotions, compensation, benefits, and more. Read Work Rules! by Laszlo Bock (SVP, People Operations) for more.</p> <p>Yes, the benefits are amazing. I went on a tour of the Google office in Kirkland, WA, and it surpassed my expectations. And my expectations were already high.</p> <p>Google Interview University</p> <p>Remember the coaching notes I received telling me what to study? The list of topics seemed manageable, even though I didn’t know anything on the list.</p> <p>I turned the topics on the notes into an outline and started filling in the topics with YouTube videos of lectures from MIT and UC Berkeley. A video on linked lists in one place, a video about queues in another. The list started to grow.</p> <p>I published the list on Github because my Github account was pretty empty. Since all the code I wrote for my businesses and work was private, my Github account made it look like I didn’t code at all. I needed to build up a portfolio. I originally called the project “Project 9894”. Google launched on Sept 4, 1998. Hence the name. I later renamed it to “Google Interview University”.</p> <p>Over time I added some optional topics that I discovered along the way.</p> <p>I was pretty amazed I had gotten so far in my career without even knowing how a CPU processed a program, how memory worked, or any of it. I had known “just enough” to be a success.</p> <p>My little Github project started getting a few stars, and I published a blog post celebrating 20 stars.</p> <p>One morning, I awoke to find it had grown to 120 stars. Someone famous had tweeted about it during the night, and that led to it ending up on the Github daily trending report. I was #1 trending on Github for a few days.</p> <p>Many kind people reached out to thank and encourage me. It turns out there are thousands of people who want to not only work at Google but want to work as a software engineer, and this list was just the to-do list they needed.</p> <p>It’s now at over 21,000 stars.</p> <p>I still can’t believe it.</p> <p>What If I Don’t Get the Job?</p> <p>It won’t be the end of the world.</p> <p>I’ve put the time and dedication into my studies for the goal of getting hired as a Google software engineer, but even if I fail, I’ll still be armed with the skills and knowledge required to work as a software engineer at any company.</p> <p>Wherever I end up, I’m going in as an entry-level software engineer. I’m not going in with 15 years of software engineering experience because I simply don’t have it. When it comes to this stuff, I’m the equivalent of a fresh CS grad.</p> <p>But I have the enthusiasm of a new grad, too. This is a new world for me. I’m just getting started. I’m not afraid to make mistakes. I know I will. I also want to learn everything I can and be an excellent addition to any team.</p> <p>Don’t Study As Much As I Did</p> <p>Yes, I took 8 months. But I could have abbreviated the process. Like any startup with a big goal, you make mistakes and do things that waste time. There are many things I wish I go back and do differently.</p> <p>I studied topics I didn’t need to, some because I thought I would need them for the interview, and some because I wanted to have the knowledge on hand for when I started working. I didn’t want to be a burden on the team I’m assigned to. It turns out I simply over-prepared.</p> <p>I spent 3 weeks reading a 1,000-page book on C++. I don’t remember 1,000 pages worth, but I know a good bit about C++ now. As it turns out, I’m using Python for the interview, not C++. I had assumed I needed C++, C, or Java, but I was wrong. It’s good to ask, not assume.</p> <p>I read way more books than I needed to. There are only 3 or 4 books I should have read.</p> <p>I have a code catalog of dozens of algorithms that I review, most of which I wouldn’t expect in an interview. You don’t need to do that.</p> <p>I watched many hours of YouTube videos but could have watched far less, and spread out topics over time.</p> <p>I should have stopped reading books and watching videos earlier and started on coding problems sooner. I would have been able to spend more time applying the topics I learned.</p> <p>Spaced repetition is the key to memorization. Once you learn something, review it again later, and again even later. At each repetition, you reinforce your learning. Spending hours and hours at one time on priority queues won’t make you an expert. You become an expert by revisiting and reviewing over time. If you do so, you’ll get to the point where can’t forget details.</p> <p>To help review, I made 1,792 flashcards (digital flashcards). This is way too many. I review them on my phone or tablet whenever I get a spare moment (such as during Christmas shopping). Flash cards and spaced repetition go hand-in-hand. Once I get an answer on a flashcard right, I don’t mark it as known. I keep it in the deck and once I’ve seen it and answered it correctly many times, then I mark it as known.</p> <p>My sense of fear (“What if they ask me a question about red-black trees?”) led me to study far more topics than I needed to.</p> <p>But I didn’t want to just prepare for the interview, I wanted to prepare for a career at Google, solving large-scale problems. That means knowing algorithms that will save computing resources of time, space, and I/O.</p> <p>I may never need to know a maximum flow algorithm (Ford-Fulkerson), but it’s nice to know I have that tool available if the situation arises (without memorizing the implementation), and can recognize its application to a problem space.</p> <p>Conclusion</p> <p>Early on, I wished I could skip all this learning, and just hurry up and get hired so I could instead spend my time learning the languages and tools for the team I join. But along the way, I realized how important this knowledge is, and even though most of it may not be applicable on a daily basis, I’m glad I put in the effort. I have a new appreciation of the history of computing, the greats in the field, data structures and algorithms (and how they complement each other), and how computer systems work at low-level.</p> <p>I’ll be putting in my application soon. It’s been a long journey getting to this point — almost an entire year. It began back in January, but I wasn’t able to commit to full-time study until April.</p> <p>I’m about as prepared as I can be. I can’t keep studying and putting off the application forever. At some point, I have to take the leap.</p> <p>I see a bright future ahead.</p> <p>First of all, thank you to everyone who cheered me on and supported me with your kind words over the last few months. I appreciate all of you so much. Your encouragement helped me get back to the whiteboard every day and practice.</p> <p>Why didn’t I get hired?</p> <p>I don’t know why.</p> <p>Last week I received a rejection email from the recruiter, and at first, I thought it was a mistake, and laughed it off. I checked in with my referral and he inquired into it and lobbied on my behalf, but in the end, it didn’t change the situation.</p> <p>The thing that bothers me is that I didn’t even get a phone screen. I didn’t even talk to a recruiter over the phone. After all this work and enthusiasm, I didn’t even get a chance to prove myself.</p> <p>I’ve done a lot of speculation about the reason why, but I won’t do that here. It’s all just guessing, which accomplishes nothing.</p> <p>But I still like Google. However, I don’t know if I’ll apply again in the future. I want to get hired and stay at a company for a long time. I don’t want to hop around. The company that ends up hiring me will get a loyal, hardworking, enthusiastic employee. There are a lot of places where I can strive for greatness and have that effort rewarded.</p> <p>Respect your Recruiter</p> <p>Recruiters look at hundreds of resumes every day, and they are highly tuned to detecting quality candidates and rejecting those who don’t match up with their model. For some reason, I just didn’t fit the profile. They probably are doing me a favor. It’s possible that I would have been in over my head and continually dragged my team down. Google is known for having false negatives in their selection process, but if you’re good enough for Google, you’ll eventually get in.</p> <p>Recruiters know what works, and what doesn’t. So respect their decision and be polite. I’ll bet they deal with irate rejected candidates on a daily basis, so don’t be like that. Just get more experience and knowledge and try again later.</p> <p>As you may know, the last 11 months have been very difficult for me. As a self-taught web developer of 15 years, my computer science study plan took me months to get through, and the main motivator was to start a new career as a software engineer, tackling large problems at a large tech company.</p> <p>Google was the company I had audaciously set my sights on, but in the end that turned into disappointment. If you haven’t read about my story, you’re missing out. Go ahead and read it first.</p> <p>Well, I reached out to my network, and made a lot of new friends. I got connected with every tech giant in the Pacific northwest. Of all of them, Amazon had always stood out — even more than Google — as the most innovative company over the last 10 years. I applied via a referral, whom I had met at a startup event in 2013, and got the process rolling.</p> <p>After so many months of non-stop effort, sacrifice, and worry, I’m pleased to announce that I finally made it!</p> <p>Today I accepted an offer to be a Software Development Engineer at Amazon.com.</p>]]></description>
			<content:encoded><![CDATA[<p>It’s true. John spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for his dream job interview at Google. When things didn't go his way, he shifted gears. Here's his story.</p> <p>Written by John Washam: <a href= "https://twitter.com/startupnextdoor">https://twitter.com/startupnextdoor</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2ERJpuC">https://fcc.im/2ERJpuC</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>It’s true. I’ve spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for the Google software engineer interview.</p> <p>How I Got Here</p> <p>I started programming in middle school, but when it came time for college I pursued a degree in Economics. My rationale was that there would be too many programmers looking for jobs by the time I graduated. Boy, I was wrong.</p> <p>Later, I joined the Army to become a programmer, but the recruiter talked me into a military intelligence position, and I spent the next two years studying the Korean language. I served in South Korea for 2 years afterward.</p> <p>Before I left the Army, I attempted to get back into programming and was surprised at the difficulty. I had learned BASIC in middle school and kept programming it through high school. But I restarted my programming studies with C++, and the leap was too large. I just couldn’t grasp it.</p> <p>I did enjoy making websites, however, but I used software with a Word-like interface that I used to publish my websites. I didn’t know how to make websites from scratch.</p> <p>After the Army, I decided to stay in Korea for a year and teach English. I used my nights and weekends to study web programming, using Perl, HTML, CSS (which was new at the time), JavaScript, and SQL.</p> <p>After a year of intense study, I landed a job in the Seattle area, and I’ve been here ever since.</p> <p>I’ve been a web developer now for 15 years. I’ve started 3 companies, 2 of which are still running and generating revenue. I’ve worked at large and small companies, helped startups launch and grow, and recruited and managed teams. I’ve been a product manager, a CEO, a designer, and a marketer.</p> <p>I’ve had a successful career and learned a lot along the way. But I’m not done yet.</p> <p>Seeking a Career Change</p> <p>Remember the part where I didn’t get a computer science degree? It has made a difference.</p> <p>A few years ago, I thought I could get hired anywhere. I thought I was hot stuff: the elusive full-stack web developer. But during my job search in 2013, I realized my skills were lacking. I had spent so much time chasing dollars by running startups in my spare time, that I had let my skills atrophy. I hadn’t kept up with technology.</p> <p>For years, I had learned just enough to get by. I had a wide skill set but wasn’t an expert in anything.</p> <p>Don’t get me wrong, I could still get hired, but not in the technologies or areas I wanted to work in. I could get hired for areas where the tech stack was somewhat outdated, like me. There’s big money in there, but I didn’t see exciting prospects.</p> <p>The realization reached its peak last year at a career fair. I was interested in perhaps working for one of the local companies that were startup labs run by venture capital firms. However, the fact that I lacked a computer science degree, and the skills and knowledge that accompany such a degree, meant I didn’t have a chance.</p> <p>I was working full-time on my businesses at the time, and still am today.</p> <p>At the beginning of 2016, I decided it was time to make a career change from web developer to software engineer. I would need to study hard and practice in order to compress a computer science degree into a few months, but once I did, I could start a new career.</p> <p>You may not see web development and software engineering as different positions. Both involve programming and craftsmanship, but software engineering adds to it knowledge of data structures and algorithms, compiled languages, memory considerations, and understanding the impact of coding and architecture decisions on the machines where they reside.</p> <p>Large companies that hire for software engineering positions expect candidates to have this knowledge.</p> <p>I reached out to an acquaintance who works at Google and asked him questions about his experience at the company. I had been reading How Google Works and was pretty familiar with Google already.</p> <p>Through another contact, I received a copy of Google’s coaching notes that are provided to interview candidates. This became the basis of my study plan.</p> <p>Google is a pretty awesome place to work, but before I even knew that, Google was my goal.</p> <p>Why Google?</p> <p>Google sets a very high bar for hiring. They want to hire only the best. So if I set my sights high (getting hired at Google), I’ll still be quite hireable elsewhere even if I’m not selected.</p> <p>The more I learn about Google, the more I want to work there.</p> <p>In brief, Google is a company that hires smart, creative people, and treats them well. Google rewards merit, encourages big ideas, and gives employees the freedom to make good decisions for the user.</p> <p>The hiring process is calibrated to bring in smart, passionate people. Google has honed the recruitment and interview process over the years. The brain teaser questions are long gone. Nowadays candidates are chosen based on coding ability, technical knowledge, and Googleyness. There’s a lot going on in that one word.</p> <p>Management is different. Managers don’t micro-manage. They trust engineers to make the right decisions. Trusting employees changes the role of managers at Google from what most folks envision when they think of management. In addition, managers can’t unilaterally, hire, fire, or promote. Many of the important management decisions that could be perceived as office politics are handled by a committee to remove that danger.</p> <p>Google’s people operations (HR) has learned what works over time, and they use data and employee feedback to improve evaluation systems, the hiring process, promotions, compensation, benefits, and more. Read Work Rules! by Laszlo Bock (SVP, People Operations) for more.</p> <p>Yes, the benefits are amazing. I went on a tour of the Google office in Kirkland, WA, and it surpassed my expectations. And my expectations were already high.</p> <p>Google Interview University</p> <p>Remember the coaching notes I received telling me what to study? The list of topics seemed manageable, even though I didn’t know anything on the list.</p> <p>I turned the topics on the notes into an outline and started filling in the topics with YouTube videos of lectures from MIT and UC Berkeley. A video on linked lists in one place, a video about queues in another. The list started to grow.</p> <p>I published the list on Github because my Github account was pretty empty. Since all the code I wrote for my businesses and work was private, my Github account made it look like I didn’t code at all. I needed to build up a portfolio. I originally called the project “Project 9894”. Google launched on Sept 4, 1998. Hence the name. I later renamed it to “Google Interview University”.</p> <p>Over time I added some optional topics that I discovered along the way.</p> <p>I was pretty amazed I had gotten so far in my career without even knowing how a CPU processed a program, how memory worked, or any of it. I had known “just enough” to be a success.</p> <p>My little Github project started getting a few stars, and I published a blog post celebrating 20 stars.</p> <p>One morning, I awoke to find it had grown to 120 stars. Someone famous had tweeted about it during the night, and that led to it ending up on the Github daily trending report. I was #1 trending on Github for a few days.</p> <p>Many kind people reached out to thank and encourage me. It turns out there are thousands of people who want to not only work at Google but want to work as a software engineer, and this list was just the to-do list they needed.</p> <p>It’s now at over 21,000 stars.</p> <p>I still can’t believe it.</p> <p>What If I Don’t Get the Job?</p> <p>It won’t be the end of the world.</p> <p>I’ve put the time and dedication into my studies for the goal of getting hired as a Google software engineer, but even if I fail, I’ll still be armed with the skills and knowledge required to work as a software engineer at any company.</p> <p>Wherever I end up, I’m going in as an entry-level software engineer. I’m not going in with 15 years of software engineering experience because I simply don’t have it. When it comes to this stuff, I’m the equivalent of a fresh CS grad.</p> <p>But I have the enthusiasm of a new grad, too. This is a new world for me. I’m just getting started. I’m not afraid to make mistakes. I know I will. I also want to learn everything I can and be an excellent addition to any team.</p> <p>Don’t Study As Much As I Did</p> <p>Yes, I took 8 months. But I could have abbreviated the process. Like any startup with a big goal, you make mistakes and do things that waste time. There are many things I wish I go back and do differently.</p> <p>I studied topics I didn’t need to, some because I thought I would need them for the interview, and some because I wanted to have the knowledge on hand for when I started working. I didn’t want to be a burden on the team I’m assigned to. It turns out I simply over-prepared.</p> <p>I spent 3 weeks reading a 1,000-page book on C++. I don’t remember 1,000 pages worth, but I know a good bit about C++ now. As it turns out, I’m using Python for the interview, not C++. I had assumed I needed C++, C, or Java, but I was wrong. It’s good to ask, not assume.</p> <p>I read way more books than I needed to. There are only 3 or 4 books I should have read.</p> <p>I have a code catalog of dozens of algorithms that I review, most of which I wouldn’t expect in an interview. You don’t need to do that.</p> <p>I watched many hours of YouTube videos but could have watched far less, and spread out topics over time.</p> <p>I should have stopped reading books and watching videos earlier and started on coding problems sooner. I would have been able to spend more time applying the topics I learned.</p> <p>Spaced repetition is the key to memorization. Once you learn something, review it again later, and again even later. At each repetition, you reinforce your learning. Spending hours and hours at one time on priority queues won’t make you an expert. You become an expert by revisiting and reviewing over time. If you do so, you’ll get to the point where can’t forget details.</p> <p>To help review, I made 1,792 flashcards (digital flashcards). This is way too many. I review them on my phone or tablet whenever I get a spare moment (such as during Christmas shopping). Flash cards and spaced repetition go hand-in-hand. Once I get an answer on a flashcard right, I don’t mark it as known. I keep it in the deck and once I’ve seen it and answered it correctly many times, then I mark it as known.</p> <p>My sense of fear (“What if they ask me a question about red-black trees?”) led me to study far more topics than I needed to.</p> <p>But I didn’t want to just prepare for the interview, I wanted to prepare for a career at Google, solving large-scale problems. That means knowing algorithms that will save computing resources of time, space, and I/O.</p> <p>I may never need to know a maximum flow algorithm (Ford-Fulkerson), but it’s nice to know I have that tool available if the situation arises (without memorizing the implementation), and can recognize its application to a problem space.</p> <p>Conclusion</p> <p>Early on, I wished I could skip all this learning, and just hurry up and get hired so I could instead spend my time learning the languages and tools for the team I join. But along the way, I realized how important this knowledge is, and even though most of it may not be applicable on a daily basis, I’m glad I put in the effort. I have a new appreciation of the history of computing, the greats in the field, data structures and algorithms (and how they complement each other), and how computer systems work at low-level.</p> <p>I’ll be putting in my application soon. It’s been a long journey getting to this point — almost an entire year. It began back in January, but I wasn’t able to commit to full-time study until April.</p> <p>I’m about as prepared as I can be. I can’t keep studying and putting off the application forever. At some point, I have to take the leap.</p> <p>I see a bright future ahead.</p> <p>First of all, thank you to everyone who cheered me on and supported me with your kind words over the last few months. I appreciate all of you so much. Your encouragement helped me get back to the whiteboard every day and practice.</p> <p>Why didn’t I get hired?</p> <p>I don’t know why.</p> <p>Last week I received a rejection email from the recruiter, and at first, I thought it was a mistake, and laughed it off. I checked in with my referral and he inquired into it and lobbied on my behalf, but in the end, it didn’t change the situation.</p> <p>The thing that bothers me is that I didn’t even get a phone screen. I didn’t even talk to a recruiter over the phone. After all this work and enthusiasm, I didn’t even get a chance to prove myself.</p> <p>I’ve done a lot of speculation about the reason why, but I won’t do that here. It’s all just guessing, which accomplishes nothing.</p> <p>But I still like Google. However, I don’t know if I’ll apply again in the future. I want to get hired and stay at a company for a long time. I don’t want to hop around. The company that ends up hiring me will get a loyal, hardworking, enthusiastic employee. There are a lot of places where I can strive for greatness and have that effort rewarded.</p> <p>Respect your Recruiter</p> <p>Recruiters look at hundreds of resumes every day, and they are highly tuned to detecting quality candidates and rejecting those who don’t match up with their model. For some reason, I just didn’t fit the profile. They probably are doing me a favor. It’s possible that I would have been in over my head and continually dragged my team down. Google is known for having false negatives in their selection process, but if you’re good enough for Google, you’ll eventually get in.</p> <p>Recruiters know what works, and what doesn’t. So respect their decision and be polite. I’ll bet they deal with irate rejected candidates on a daily basis, so don’t be like that. Just get more experience and knowledge and try again later.</p> <p>As you may know, the last 11 months have been very difficult for me. As a self-taught web developer of 15 years, my computer science study plan took me months to get through, and the main motivator was to start a new career as a software engineer, tackling large problems at a large tech company.</p> <p>Google was the company I had audaciously set my sights on, but in the end that turned into disappointment. If you haven’t read about my story, you’re missing out. Go ahead and read it first.</p> <p>Well, I reached out to my network, and made a lot of new friends. I got connected with every tech giant in the Pacific northwest. Of all of them, Amazon had always stood out — even more than Google — as the most innovative company over the last 10 years. I applied via a referral, whom I had met at a startup event in 2013, and got the process rolling.</p> <p>After so many months of non-stop effort, sacrifice, and worry, I’m pleased to announce that I finally made it!</p> <p>Today I accepted an offer to be a Software Development Engineer at Amazon.com.</p>]]></content:encoded>
			<enclosure length="17370489" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep_18_Why_I_studied_full-time_for_8_months_for_a_Google_interview.mp3?dest-id=603849" />
			<itunes:duration>18:04</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[It’s true. John spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for his dream job interview at Google. When things didn't go his way, he shifted gears. Here's his story. Written by John...]]></itunes:subtitle>
			<itunes:summary>It’s true. John spent thousands of hours reading books, writing code, and watching computer science lectures, all to prepare for his dream job interview at Google. When things didn't go his way, he shifted gears. Here's his story.</itunes:summary>
			<itunes:episode>18</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 17 - From side project to $17,000/month business</title>
			<itunes:title>From side project to $17,000/month business</itunes:title>
			<pubDate>Thu, 15 Feb 2018 09:04:07 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ce77c28e31c8687ea893f1726282817b]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-17-how-my-friends-and-i-grew-our-side-project-into-a-17000month-business]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>In this episode, Alex, a Romanian developer, tells the tale of how he and his friends grew their small side project into a $17,000 a month business. In the beginning, they were coding in a Starbucks. Now their team has grown, they've sponsored 20 hackathons around the world, and business is booming. Here's their story.</p> <p>Written by Alexandru Paduraru: <a href= "http://twitter.com/axelut">http://twitter.com/axelut</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2F5yfQX">https://fcc.im/2F5yfQX</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>In 2014, my friends and I set out to build the best possible web design tools. We built UI kits, Admin Dashboards, Templates, and Plugins. We’ve always tried to create products that are helpful in the development process, and that we ourselves would use for building websites for clients.</p> <p>From a revenue’s perspective, if we don’t take into consideration the Black Friday sales (which doubled the amount that we made in November 2016), we are grossing around $22,000 per month. Part of that goes toward paying our affiliates’ commissions, collected VAT, payment vendors’ taxes, and other expenses. We end up netting around $17,000 each month.</p> <p>In this case study, I’ll share exactly how we built our products and grew our business. You’ll hear all about:</p> <p>What motivated us to start our startup, Creative Tim, and how we built our initial product</p> <p>How we got our first users</p> <p>Marketing strategies we used to grow</p> <p>How our business model works</p> <p>The story behind our revenue sources</p> <p>Biggest lessons we’ve learned so far</p> <p>1. What motivated us to get started with Creative Tim and how we built the initial product</p> <p>We started out as a two-person agency in Romania with no funding from third parties. We didn’t have enough cash to rent an office — even desks at a co-working space —so we just worked out of a Starbucks. We were barely able to pay our daily living expenses by doing work for clients.</p> <p>Creative Tim was a side project that we thought would come in handy to web developers like ourselves. We noticed that we were always “reinventing the wheel” when working with clients, and creating the same items over and over again for their websites. So we wanted to create a few standard components, like login and register modals, calendars, wizards, headers, and footers.</p> <p>Over the span of a few months, we dedicated our time to implementing the platform and a few freebies (alongside the agency work). In the beginning, we didn’t have any Twitter followers, Facebook fans, or email list subscribers. We posted a lot of stuff about our freebies on various design forums and we used the “stalk web developers on Twitter” technique to spread the word about our products.</p> <p>2. How we got our first users</p> <p>At first, nobody really understood what we wanted to do. They didn’t understand the value we could provide by helping them improve their businesses. We decided that it would be better to create a more complex product that would help people understand what we were doing 🤔</p> <p>We launched the Get Shit Done Kit, a UI Kit based on Bootstrap. It was featured on Designer News, and it was quite popular. We got over 11,000 users from that source, which was a huge spike for our business.</p> <p>Then two weeks later our startup was featured on Product Hunt. That gave us another spike with over 5,000 users. After that, the situation was stable, and we graduated from 0 users/week to a consistent 2,000 to 3,000 users/week.</p> <p>A couple of months later, motivated by the success of free Get Shit Done Kit, we released Get Shit Done Kit PRO the premium version of GSDK, with more components and ready-to-use example pages.</p> <p>Initially, we only made a few sales. The product was generating about $200/week, which was not nearly enough to sustain our business. At the same time we were working on a web project for one of our clients.</p> <p>Then in December, we got published on Bootstrap Expo, the most popular gallery for showcasing websites created with Bootstrap. This was another important spike for our business. Since all of the people who go to Bootstrap Expo for inspiration already know Bootstrap or have previously worked with it, they were the perfect audience for our business.</p> <p>Later, we discovered that getting traffic on your website is not enough to create a long term relationship with your users, and most of them forgot all about us after their first interaction. We did some research and discovered what most marketers probably already know: people forget things that they aren’t reminded of. Then we implemented the “Remember us email system” following the rules from the forgetting curve.</p> <p>We wanted to give our users a reminder that we still existed and that we’re a valuable resource for their projects or their clients’ projects.</p> <p>Currently, we send emails at the following schedule:</p> <p>After 3 days from their first download, we send an email with other recommended products.</p> <p>On day 10 we send an email requesting feedback and asking if they need help.</p> <p>On day 15 we remind them that they can upgrade to PRO.</p> <p>On day 30 we ask them again for feedback and offer to promote something they’ve built in our gallery and social media.</p> <p>We send a final reminder on day 60.</p> <p>3. Marketing strategies we used to grow</p> <p>Most of our marketing strategies consisted of submitting our content to different communities like Reddit, Product Hunt, Designer News, Hacker News, and GitHub. Some important subreddits that work well in our area include /r/web_design, /r/html5, /r/frontend, and /r/webdev.</p> <p>We also paid between $100–200 for newsletter campaigns a couple of times. Even though the ROI ratio matched the amount we invested, the campaigns did not meet the expectations. (Maybe this was just in our case, that wasn’t profitable and it works better for others.)</p> <p>Then we paid $400 for Get Shit Done Kit PRO to appear in the Sidebar.io newsletter, a curated list of the 5 best design links made by Sacha Greif. This was a very rewarding newsletter for us, generating about $1,500 in sales.</p> <p>Then we purchased the “Review + Newsletter” package ($550) from eWebDesign. There were about 5,000 users who participated in the giveaway, and the total sales amounted $2,800.</p> <p>We also thought about different places where we could find web developers who could use our products, and we realized that hackathons were exactly what we needed.</p> <p>Presenting how our tools can help during the Hackathon</p> <p>Subsequently we started talking to people that were organizing hackathons to offer them free licenses for our “premium products.” We sponsored over 20 hackathons in different cities around the world (you can check them here).</p> <p>All the developers were happy to get free licenses, which made us happy that we could help them create better projects faster and they also found out who we are, so a win-win situation.</p> <p>Critically, being physically present at some of the hackathons also gave us a lot of information about how the developers were using our products and how we could improve them in order to make them more user-friendly.</p> <p>In March 2015, we finished the agency’s contracts and we switched from “Agency mode” to “Startup mode.” With some revenue in the bank and a few monthly sales, our team moved to working full time for our startup. As we put everything together and constantly launched new products, our sources of traffic and revenue grew.</p> <p>4. How the business model works</p> <p>We realized that the best business model for Creative Tim was freemium: we create high quality freebies that help web developers build great websites, then release the PRO versions for those freebies, which contain more elements, sections, plugins, and example pages.</p> <p>At this moment, we have 8 premium products, each of which have their own freebies. Their prices range from $19 to $599, depending on the license and archive type (HTML, HTML + PSD, HTML + Sketch). The freebies appear everywhere on different communities, blog posts, newsletters, and social websites — and they are driving all of our traffic.</p> <p>Our business model: create high quality freebies that help web developers build great websites, then release the PRO versions for those freebies which contain more elements. 👌🏼</p> <p>The basic idea is that those freebies are always appearing on top 10 lists in these big communities. Each post that’s in the top 10 (depending on how big is the community) gives us between 1,000 and 15,000 targeted users in one day. You can imagine how much that would cost if you wanted to do a regular targeted marketing campaign. 😮</p> <p>Some examples:</p> <p>Paper Kit — 380 upvotes on Reddit</p> <p>Material Kit — 560 upvotes on Reddit</p> <p>Light Bootstrap Dashboard Angular — 210 upvotes on Reddit</p> <p>Material Kit — 180 uvpotes on Hacker News (peak position 9 with over 14,000 users coming to our website in 1 day)</p> <p>Material Kit — 860 upvotes on Product Hunt</p> <p>etc… you got the idea</p> <p>5. The story behind our revenue sources</p> <p>Direct Product Sales</p> <p>Here we have the regular sales that are done on our website, which are worth about 24% of our overall sales. This doesn’t include the Big Bundle.</p> <p>What is this Big Bundle, and how did we create it? We noticed that some of our users were downloading all our free products. (When I say all, I literally mean all of them in about 2–3 minutes after they have created an account.) We also noticed that some of our clients were purchasing all the products that were premium.</p> <p>So we decided to test a new product called the “Big Bundle” which gives you access to all our products with huge discounts (over 60%). This big package was getting around 6–8 purchases per month. Since the prices for this Big Bundle is $299 (instead of $500) for the personal license and $669 (instead of $2,127) for the developer license, it’s a good source of revenue and a great deal for the web designers and agencies who are using our products for multiple clients. It’s a win-win situation.</p> <p>Affiliates Sales</p> <p>We’ve created an affiliate network, and our affiliates are very happy because they get 50% to themselves from each transaction. For example, one of our most important affiliations is done through a very popular GitHub Repo: Bootstrap Material Design (17,000+ stars on GitHub). Currently, affiliates account for around 25% of our overall revenue.</p> <p>Organic Search (SEO)</p> <p>We saw that we were also getting around 22% of our revenue from SEO. So we decided to invest more in SEO, we brought on an SEO consultant, whom we pay around $500/month to improve our products’ ranks in Google.</p> <p>Other revenue</p> <p>The remainder of our monthly revenue comes from Facebook, Twitter, and our newsletter. Here’s how our revenue has evolved over time, along with some historically important moments, so you can understand why it has grown in some months:</p> <p>6. The biggest lessons we’ve learned so far</p> <p>It sounds cliché, but having a great product is crucial.</p> <p>A lot of founders really struggle trying to market and sell something that people don’t want or don’t need. If your product is crap, there is no marketing strategy — and no source of investment — that can keep it alive for long.</p> <p>At the moment, our products are used by over 134,000 web developers around the world. We have people from Microsoft, Ubisoft, Vodafone, Orange, Harvard University, Stanford University, and governmental institutions downloading and using them as different internal tools, and we’ve sponsored more than 20 global hackathons from 14 countries.</p> <p>Don’t look to be the next Facebook. Try to solve a real problem instead.</p> <p>Every step in our development seemed like the natural thing to do at the time. Looking back at our evolution, we wouldn’t change anything. But with all we’ve learned, we could definitely do everything faster the second time around.</p> <p>We’ve always created and improved our products based on our customers’ feedback, and that is the best way to develop a business. It doesn’t matter what you personally like — you need to make sure you solve a real problem for a real customer.</p> <p>Read, read, read.</p> <p>In the past three years, I’ve read more than I’d read in my entire life, and this makes me feel great. Here are some of my favorite books, which I recommend to everybody:</p> <p>How to Win Friends and Influence People — Dale Carnegie</p> <p>Zero to One — Peter Thiel</p> <p>The Hard Thing About Hard Things — Ben Horowitz</p> <p>Law of Success — Napoleon Hill</p> <p>Think and Grow Rich — Napoleon Hill</p> <p>Good to Great — Jim Collins</p> <p>The Lean Startup — Eric Ries</p> <p>The Charisma Myth — Olivia Fox Cabane</p> <p>Lean Analytics: Use Data to Build a Better Startup Faster — Alistair Croll</p> <p>I really do think that the secret weapon is to deliver great products combined with a great user experience and a great customer support.</p> <p>The best decision that we made was to put our customer in the first row, and make sure that they were receiving a great UI kit/Dashboard that really solved their problems. That guided us through the whole journey. Our secret weapon is that we deliver great products combined with a great user experience and great customer support.</p> <p>Everything is possible.</p> <p>We are living in a world where anybody can become anything they want as long as they want to invest the amount of time that is needed. I’m saying time, and not money, because we all have time. I want to recommend two books that talk about this: Karaoke Capitalism by Jonas Ridderstråle and Kjell Nordstrom, and Zero to One by Peter Thiel (a PayPal co-founder).</p> <p>At this point, there are no limits. You can go anywhere on the planet and you can talk with whomever you want just by contacting them through social media. Today an ordinary person can achieve more influence than the president of a small country. Think of those Instagram accounts with millions of followers. If I — a regular guy from Romania — can build a profitable business in 2.5 years that is making 60x my country’s monthly minimum monthly wage, then boy, just about anything is possible.</p>]]></description>
			<content:encoded><![CDATA[<p>In this episode, Alex, a Romanian developer, tells the tale of how he and his friends grew their small side project into a $17,000 a month business. In the beginning, they were coding in a Starbucks. Now their team has grown, they've sponsored 20 hackathons around the world, and business is booming. Here's their story.</p> <p>Written by Alexandru Paduraru: <a href= "http://twitter.com/axelut">http://twitter.com/axelut</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2F5yfQX">https://fcc.im/2F5yfQX</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>In 2014, my friends and I set out to build the best possible web design tools. We built UI kits, Admin Dashboards, Templates, and Plugins. We’ve always tried to create products that are helpful in the development process, and that we ourselves would use for building websites for clients.</p> <p>From a revenue’s perspective, if we don’t take into consideration the Black Friday sales (which doubled the amount that we made in November 2016), we are grossing around $22,000 per month. Part of that goes toward paying our affiliates’ commissions, collected VAT, payment vendors’ taxes, and other expenses. We end up netting around $17,000 each month.</p> <p>In this case study, I’ll share exactly how we built our products and grew our business. You’ll hear all about:</p> <p>What motivated us to start our startup, Creative Tim, and how we built our initial product</p> <p>How we got our first users</p> <p>Marketing strategies we used to grow</p> <p>How our business model works</p> <p>The story behind our revenue sources</p> <p>Biggest lessons we’ve learned so far</p> <p>1. What motivated us to get started with Creative Tim and how we built the initial product</p> <p>We started out as a two-person agency in Romania with no funding from third parties. We didn’t have enough cash to rent an office — even desks at a co-working space —so we just worked out of a Starbucks. We were barely able to pay our daily living expenses by doing work for clients.</p> <p>Creative Tim was a side project that we thought would come in handy to web developers like ourselves. We noticed that we were always “reinventing the wheel” when working with clients, and creating the same items over and over again for their websites. So we wanted to create a few standard components, like login and register modals, calendars, wizards, headers, and footers.</p> <p>Over the span of a few months, we dedicated our time to implementing the platform and a few freebies (alongside the agency work). In the beginning, we didn’t have any Twitter followers, Facebook fans, or email list subscribers. We posted a lot of stuff about our freebies on various design forums and we used the “stalk web developers on Twitter” technique to spread the word about our products.</p> <p>2. How we got our first users</p> <p>At first, nobody really understood what we wanted to do. They didn’t understand the value we could provide by helping them improve their businesses. We decided that it would be better to create a more complex product that would help people understand what we were doing 🤔</p> <p>We launched the Get Shit Done Kit, a UI Kit based on Bootstrap. It was featured on Designer News, and it was quite popular. We got over 11,000 users from that source, which was a huge spike for our business.</p> <p>Then two weeks later our startup was featured on Product Hunt. That gave us another spike with over 5,000 users. After that, the situation was stable, and we graduated from 0 users/week to a consistent 2,000 to 3,000 users/week.</p> <p>A couple of months later, motivated by the success of free Get Shit Done Kit, we released Get Shit Done Kit PRO the premium version of GSDK, with more components and ready-to-use example pages.</p> <p>Initially, we only made a few sales. The product was generating about $200/week, which was not nearly enough to sustain our business. At the same time we were working on a web project for one of our clients.</p> <p>Then in December, we got published on Bootstrap Expo, the most popular gallery for showcasing websites created with Bootstrap. This was another important spike for our business. Since all of the people who go to Bootstrap Expo for inspiration already know Bootstrap or have previously worked with it, they were the perfect audience for our business.</p> <p>Later, we discovered that getting traffic on your website is not enough to create a long term relationship with your users, and most of them forgot all about us after their first interaction. We did some research and discovered what most marketers probably already know: people forget things that they aren’t reminded of. Then we implemented the “Remember us email system” following the rules from the forgetting curve.</p> <p>We wanted to give our users a reminder that we still existed and that we’re a valuable resource for their projects or their clients’ projects.</p> <p>Currently, we send emails at the following schedule:</p> <p>After 3 days from their first download, we send an email with other recommended products.</p> <p>On day 10 we send an email requesting feedback and asking if they need help.</p> <p>On day 15 we remind them that they can upgrade to PRO.</p> <p>On day 30 we ask them again for feedback and offer to promote something they’ve built in our gallery and social media.</p> <p>We send a final reminder on day 60.</p> <p>3. Marketing strategies we used to grow</p> <p>Most of our marketing strategies consisted of submitting our content to different communities like Reddit, Product Hunt, Designer News, Hacker News, and GitHub. Some important subreddits that work well in our area include /r/web_design, /r/html5, /r/frontend, and /r/webdev.</p> <p>We also paid between $100–200 for newsletter campaigns a couple of times. Even though the ROI ratio matched the amount we invested, the campaigns did not meet the expectations. (Maybe this was just in our case, that wasn’t profitable and it works better for others.)</p> <p>Then we paid $400 for Get Shit Done Kit PRO to appear in the Sidebar.io newsletter, a curated list of the 5 best design links made by Sacha Greif. This was a very rewarding newsletter for us, generating about $1,500 in sales.</p> <p>Then we purchased the “Review + Newsletter” package ($550) from eWebDesign. There were about 5,000 users who participated in the giveaway, and the total sales amounted $2,800.</p> <p>We also thought about different places where we could find web developers who could use our products, and we realized that hackathons were exactly what we needed.</p> <p>Presenting how our tools can help during the Hackathon</p> <p>Subsequently we started talking to people that were organizing hackathons to offer them free licenses for our “premium products.” We sponsored over 20 hackathons in different cities around the world (you can check them here).</p> <p>All the developers were happy to get free licenses, which made us happy that we could help them create better projects faster and they also found out who we are, so a win-win situation.</p> <p>Critically, being physically present at some of the hackathons also gave us a lot of information about how the developers were using our products and how we could improve them in order to make them more user-friendly.</p> <p>In March 2015, we finished the agency’s contracts and we switched from “Agency mode” to “Startup mode.” With some revenue in the bank and a few monthly sales, our team moved to working full time for our startup. As we put everything together and constantly launched new products, our sources of traffic and revenue grew.</p> <p>4. How the business model works</p> <p>We realized that the best business model for Creative Tim was freemium: we create high quality freebies that help web developers build great websites, then release the PRO versions for those freebies, which contain more elements, sections, plugins, and example pages.</p> <p>At this moment, we have 8 premium products, each of which have their own freebies. Their prices range from $19 to $599, depending on the license and archive type (HTML, HTML + PSD, HTML + Sketch). The freebies appear everywhere on different communities, blog posts, newsletters, and social websites — and they are driving all of our traffic.</p> <p>Our business model: create high quality freebies that help web developers build great websites, then release the PRO versions for those freebies which contain more elements. 👌🏼</p> <p>The basic idea is that those freebies are always appearing on top 10 lists in these big communities. Each post that’s in the top 10 (depending on how big is the community) gives us between 1,000 and 15,000 targeted users in one day. You can imagine how much that would cost if you wanted to do a regular targeted marketing campaign. 😮</p> <p>Some examples:</p> <p>Paper Kit — 380 upvotes on Reddit</p> <p>Material Kit — 560 upvotes on Reddit</p> <p>Light Bootstrap Dashboard Angular — 210 upvotes on Reddit</p> <p>Material Kit — 180 uvpotes on Hacker News (peak position 9 with over 14,000 users coming to our website in 1 day)</p> <p>Material Kit — 860 upvotes on Product Hunt</p> <p>etc… you got the idea</p> <p>5. The story behind our revenue sources</p> <p>Direct Product Sales</p> <p>Here we have the regular sales that are done on our website, which are worth about 24% of our overall sales. This doesn’t include the Big Bundle.</p> <p>What is this Big Bundle, and how did we create it? We noticed that some of our users were downloading all our free products. (When I say all, I literally mean all of them in about 2–3 minutes after they have created an account.) We also noticed that some of our clients were purchasing all the products that were premium.</p> <p>So we decided to test a new product called the “Big Bundle” which gives you access to all our products with huge discounts (over 60%). This big package was getting around 6–8 purchases per month. Since the prices for this Big Bundle is $299 (instead of $500) for the personal license and $669 (instead of $2,127) for the developer license, it’s a good source of revenue and a great deal for the web designers and agencies who are using our products for multiple clients. It’s a win-win situation.</p> <p>Affiliates Sales</p> <p>We’ve created an affiliate network, and our affiliates are very happy because they get 50% to themselves from each transaction. For example, one of our most important affiliations is done through a very popular GitHub Repo: Bootstrap Material Design (17,000+ stars on GitHub). Currently, affiliates account for around 25% of our overall revenue.</p> <p>Organic Search (SEO)</p> <p>We saw that we were also getting around 22% of our revenue from SEO. So we decided to invest more in SEO, we brought on an SEO consultant, whom we pay around $500/month to improve our products’ ranks in Google.</p> <p>Other revenue</p> <p>The remainder of our monthly revenue comes from Facebook, Twitter, and our newsletter. Here’s how our revenue has evolved over time, along with some historically important moments, so you can understand why it has grown in some months:</p> <p>6. The biggest lessons we’ve learned so far</p> <p>It sounds cliché, but having a great product is crucial.</p> <p>A lot of founders really struggle trying to market and sell something that people don’t want or don’t need. If your product is crap, there is no marketing strategy — and no source of investment — that can keep it alive for long.</p> <p>At the moment, our products are used by over 134,000 web developers around the world. We have people from Microsoft, Ubisoft, Vodafone, Orange, Harvard University, Stanford University, and governmental institutions downloading and using them as different internal tools, and we’ve sponsored more than 20 global hackathons from 14 countries.</p> <p>Don’t look to be the next Facebook. Try to solve a real problem instead.</p> <p>Every step in our development seemed like the natural thing to do at the time. Looking back at our evolution, we wouldn’t change anything. But with all we’ve learned, we could definitely do everything faster the second time around.</p> <p>We’ve always created and improved our products based on our customers’ feedback, and that is the best way to develop a business. It doesn’t matter what you personally like — you need to make sure you solve a real problem for a real customer.</p> <p>Read, read, read.</p> <p>In the past three years, I’ve read more than I’d read in my entire life, and this makes me feel great. Here are some of my favorite books, which I recommend to everybody:</p> <p>How to Win Friends and Influence People — Dale Carnegie</p> <p>Zero to One — Peter Thiel</p> <p>The Hard Thing About Hard Things — Ben Horowitz</p> <p>Law of Success — Napoleon Hill</p> <p>Think and Grow Rich — Napoleon Hill</p> <p>Good to Great — Jim Collins</p> <p>The Lean Startup — Eric Ries</p> <p>The Charisma Myth — Olivia Fox Cabane</p> <p>Lean Analytics: Use Data to Build a Better Startup Faster — Alistair Croll</p> <p>I really do think that the secret weapon is to deliver great products combined with a great user experience and a great customer support.</p> <p>The best decision that we made was to put our customer in the first row, and make sure that they were receiving a great UI kit/Dashboard that really solved their problems. That guided us through the whole journey. Our secret weapon is that we deliver great products combined with a great user experience and great customer support.</p> <p>Everything is possible.</p> <p>We are living in a world where anybody can become anything they want as long as they want to invest the amount of time that is needed. I’m saying time, and not money, because we all have time. I want to recommend two books that talk about this: Karaoke Capitalism by Jonas Ridderstråle and Kjell Nordstrom, and Zero to One by Peter Thiel (a PayPal co-founder).</p> <p>At this point, there are no limits. You can go anywhere on the planet and you can talk with whomever you want just by contacting them through social media. Today an ordinary person can achieve more influence than the president of a small country. Think of those Instagram accounts with millions of followers. If I — a regular guy from Romania — can build a profitable business in 2.5 years that is making 60x my country’s monthly minimum monthly wage, then boy, just about anything is possible.</p>]]></content:encoded>
			<enclosure length="16846640" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep_17_Growing_a_side_project_into_a_17000_dollar_a_month_side_business.mp3?dest-id=603849" />
			<itunes:duration>17:32</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[In this episode, Alex, a Romanian developer, tells the tale of how he and his friends grew their small side project into a $17,000 a month business. In the beginning, they were coding in a Starbucks. Now their team has grown, they've sponsored 20...]]></itunes:subtitle>
			<itunes:summary>In this episode, Alex, a Romanian developer, tells the tale of how he and his friends grew their small side project into a $17,000 a month business. In the beginning, they were coding in a Starbucks. Now their team has grown, they've sponsored 20 hackathons around the world, and business is booming. Here's their story.
</itunes:summary>
			<itunes:episode>17</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 16 - From programming with a Nokia feature phone to working for an MIT startup</title>
			<itunes:title>From programming with a Nokia feature phone to working for an MIT startup</itunes:title>
			<pubDate>Tue, 06 Feb 2018 18:32:44 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[19ce591f3f889792319011079b3d8831]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-16-from-programming-with-a-nokia-feature-phone-to-working-for-an-mit-startup]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Elvis was "just a village boy from Nigeria who had nothing but a dream and a Nokia J2ME feature phone." Today, he's a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. This is his story.</p> <p>Written by Elvis Chidera: <a href= "http://twitter.com/elvisnchidera">https://twitter.com/elvisnchidera</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2Bwp50Y">https://fcc.im/2Bwp50Y</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>In 2012, I was just a village boy from Nigeria who had nothing but a dream and a Nokia feature (J2ME) phone. Today, I’m a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. My name is Elvis Chidera and this is my story.</p> <p>My journey began with my curiosity about how to build a website. Growing up, I spent a lot of time online as I loved downloading games and reading Society Of Robots. I would save for weeks to buy a 10 MB internet bundle for 100 Naira ($0.28), and back in 2012, that could last for a month.</p> <p>When learning to code, I took the first and simple step of doing a Google search about how to build a website. I got millions of results. Not knowing where to start, I clicked on the first link I saw, which was from W3CSchools.</p> <p>The article explained that I need to learn some languages (HTML and CSS) to be able to build a website. I checked some other resources to confirm that I actually needed to learn these things. Then I started the W3CSchools HTML and CSS course.</p> <p>Each day after school I would head over to the website to study. Initially, the code examples and explanations didn’t make much sense to me. But I kept studying regardless. I referred to various tutorials when I was stuck. This helped me view the problems I encountered from many different angles.</p> <p>When I was younger, I struggled with my reading and writing skills in school. I was only able to get better at them through continuous practice. So I already had this model in my head: if I continue to practice — no matter how long it takes — I will ultimately be able to understand these programming languages.</p> <p>A few months of intensive learning got me acquainted with HTML, CSS, and JavaScript. While I was still learning, a friend showed me the movie “The Social Network.” And after watching it, I was super motivated to build the next big thing. Thank you, Hollywood.</p> <p>I had a eureka moment a few days later. The idea was to build a better version of Facebook. At that time, you couldn’t see your Facebook friends that were online. Also, Facebook was built to connect with people you already knew in real life.</p> <p>So that was my billion dollar startup idea: build a social network with all the features Facebook didn’t have. Mark Zuckerberg - I’m coming for you - or so I thought.</p> <p>I spent the next few months building a better social network by adding any feature I could even think of using.</p> <p>I was naively confident that I was going to win.</p> <p>After completing the project, I did what anybody without an advertising budget would do. I spammed the internet for days and days.</p> <p>After several days of marketing, reality slapped me hard in the face. I only got 200 users, which I had to keep begging to come back to the site.</p> <p>I was depressed! A few months of hard work spent in vain. This taught me two important lessons the hard way:</p> <p>I needed to recognize the cold start AKA chicken and egg problem that new platforms face early on.</p> <p>I was building something I thought people needed. But I ended up building just another feature factory.</p> <p>While it’s okay to be motivated by a project, you also need to know when you’re headed down a dead end. I spent a few more months trying to see if I could get more people on my site, but retention numbers kept dancing toward 0%, and I eventually gave up on the project.</p> <p>But I was motivated by the motto of Lewis in Meet the Robinsons, “Keep moving forward.”</p> <p>Seeking inspiration for my next project, I reflected on the needs of my local community. This time around, I wanted to build something that people actually needed and are willing to pay for.</p> <p>I came up with an idea to make text messages cheaper and easier to send to multiple people at a time. This was more like Whatsapp backed by SMS. After speaking to different people about it, I decided this was the next thing to do.</p> <p>I named the project Xmx Me. It was going to be a J2ME app. This meant I had to learn Java. Looking back in time, I have to admit that it was the biggest challenge I’d yet encountered. I had to read some tutorials several times to fully understand them.</p> <p>After completing a few Java courses, I was ready for work. Relentlessly typing one line of code after another, I carefully built the backend with PHP, the frontend with HTML and CSS, and the mobile app with J2ME. The app was coming to life.</p> <p>But here’s the thing — I didn’t own a laptop. I was building out all of these pieces of my app on my J2ME feature phone.</p> <p>Wait. What?</p> <p>You read that right.</p> <p>I wrote my code on a Nokia 2690</p> <p>How I built my production apps on a feature phone</p> <p>At this point in my life, I had never actually programmed on a laptop. I simply couldn’t afford one. My parents wanted to help me. But it was difficult for them because they had to choose between paying my school fees (and other necessities) versus buying me a laptop.</p> <p>I hadn’t used a laptop before, and my only interaction with computers was at cyber cafes. I remember watching some videos about how to use a computer (left click, drag, drop, and other basic stuff) and then walking into a cyber cafe to practice them.</p> <p>I was lucky that a relative had gifted me a feature phone (The Nokia 2690). This phone changed my life. It’s what I used to develop Xmx Me, my failed social network, and several other projects.</p> <p>With nothing but a phone and the will to succeed, hour after hour I typed my code on that tiny keyboard. I was lucky again to have found an app that allowed me to compile my J2ME projects. Yes, building a J2ME app on a J2ME phone is possible.</p> <p>The SDK was resource hungry, so my battery often died. I would carry on, writing out all my code on paper and try to review it for any syntax errors.</p> <p>I don’t think I’ll fail any Java whiteboard coding tests after having done this for so long. :)</p> <p>Launching my group SMS app</p> <p>After several months, I had the product ready. I was able to convince someone I met on an internet forum to help me pay for the website hosting and the bulk SMS service for a limited number of SMS units.</p> <p>The app launch went well — at least better than my first project. We got some local press, and one of Kenya’s top blogs even wrote about the app. We grew organically to about 5,000 users.</p> <p>We were in business. And we were getting transactions a couple of times a day.</p> <p>With no prior experience running a business, I made some huge mistakes, some of which were:</p> <p>There was no easy way to charge users in Nigeria. Not everybody has a debit card. So I allowed people to pay using their mobile phone credit. The problem here was, there was no official way to convert this credit into money. I had to sell to vendors, who bought it back at a ridiculously low rates.</p> <p>There was little to no accounting. I was losing money and I didn’t know about it. I didn’t factor in some overhead costs. There were several missing pieces.</p> <p>I was considering selling the App to buy a laptop. Not knowing what to do, I went online to beg. Yes, I was that shameless and hungry. It didn’t turn out well. Somebody accused of being a scammer, which I eventually resolved. Again, I was inexperienced and I handled the situation poorly.</p> <p>After borrowing money multiple times to keep the business running, I decided to throw in the towel. Looking back, I think this was a bad decision. With a little more learning and experience, I would have been able to make things better. Maybe I didn’t see any future in an SMS app. Well, I released a throwback app recently, and many of the users still use it and love it.</p> <p>Lessons I learned along the way</p> <p>I realized that if I was going to be able to afford a computer anytime soon, I would need to work hard for it. So I began saving all the money I could. I cut my daily expenses and lived as simple a life as possible. I asked my relatives for help. I even sold some personal belongings to raise money for the laptop.</p> <p>Still, it wasn’t enough. Determined to achieve my goal, I took on a freelance job of building a website so I could earn the remaining sum.</p> <p>How do you use a feature phone to build a website designed for PC users? Simple: have a Facebook friend who you disturb every night to view your website on his computer and give you feedback. It was cheaper than going to a cyber cafe repeatedly.</p> <p>I also made heavy use of Ideone which allowed me to run my PHP scripts to see if they work before uploading them.</p> <p>Well, I finally was able to get that laptop. I can still remember the feeling of joy I had. That smell of plastic when you unbox a brand new cheap computer. I could now work on any project I wanted without feeling restricted because of my phone.</p> <p>Since J2ME devices were slowly dying out, I eventually switched to building for the Android platform. My Java skills were still relevant there. I just needed to learn some platform-specific things.</p> <p>The next year in 2015, after high school, I decided to start working to support my family. So I began freelancing. I was always active in local forums and groups, looking for people who wanted help with building an Android app.</p> <p>Because I didn’t have a good portfolio, I would build apps for some people before they even paid, without any guarantee that I’d be paid. I was stung by this approach several times, but it allowed me to build a good enough portfolio.</p> <p>I would like to share something I wish I knew while I was freelancing:</p> <p>Don’t spread yourself too thin. Taking up too many responsibilities is not good for your health, your family, or the clients.</p> <p>I worked with several clients from different parts of Nigeria who loved my work. I eventually got a full-time job in Lagos, Nigeria after working with a client remotely.</p> <p>Then, while going through my news feed, I saw a job advert for an Android developer position at Dot Learn. I looked them up and realized they are an MIT startup working in an education technology field that I was passionate about, and in a market I understood. They had a unique idea: to solve the problem of access to online education by making educational videos that are extremely data-light — as low as 1MB for every hour of video.</p> <p>This was almost unbelievable, and I knew it was key to making education very accessible to a lot of people.</p> <p>I am very passionate about revolutionizing education in Africa. In fact, I have already built a free (ad-supported) exam prep app called PrepUp that has over 30,000+ installs and was one of the finalists at the West Africa Mobile Awards in 2016. So I wanted to be part of what Dot Learn was building.</p> <p>So I went through the developer job requirements and I felt I had a chance. But impostor syndrome didn’t want me to be great.</p> <p>For days I had conflicting thoughts. Should I apply or not?</p> <p>Then I realized one thing: I had nothing to lose.</p> <p>The worst that could happen would be that I got rejected. But I wouldn’t die. So, I went ahead and applied.</p> <p>Fingers crossed, I started re-watching several of the videos I had downloaded from MIT OCW. I also spent some nights watching some coding interview solution videos. In the past, I had mostly been hired based on my strong portfolio and previous job experience, but I didn’t want to be caught off guard if they gave me a coding interview.</p> <p>Well, long story short: after lots of preparation, answering some difficult questions, a phone interview, and some coding projects, I was accepted.</p> <p>I couldn’t believe it. I was ecstatic.</p> <p>Looking back at it, this was one of my best decisions.</p> <p>Working at Dotlearn, I have had exponential growth in my career and have met with lots of awesome people from MIT, Harvard, and other great places.</p> <p>From attending big events like the Techcrunch Battlefield (I ended up missing my flight) to realizing I could rap, it’s been a fun and exciting experience so far.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Elvis was "just a village boy from Nigeria who had nothing but a dream and a Nokia J2ME feature phone." Today, he's a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. This is his story.</p> <p>Written by Elvis Chidera: <a href= "http://twitter.com/elvisnchidera">https://twitter.com/elvisnchidera</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Original article: <a href= "https://fcc.im/2Bwp50Y">https://fcc.im/2Bwp50Y</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org/">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>In 2012, I was just a village boy from Nigeria who had nothing but a dream and a Nokia feature (J2ME) phone. Today, I’m a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. My name is Elvis Chidera and this is my story.</p> <p>My journey began with my curiosity about how to build a website. Growing up, I spent a lot of time online as I loved downloading games and reading Society Of Robots. I would save for weeks to buy a 10 MB internet bundle for 100 Naira ($0.28), and back in 2012, that could last for a month.</p> <p>When learning to code, I took the first and simple step of doing a Google search about how to build a website. I got millions of results. Not knowing where to start, I clicked on the first link I saw, which was from W3CSchools.</p> <p>The article explained that I need to learn some languages (HTML and CSS) to be able to build a website. I checked some other resources to confirm that I actually needed to learn these things. Then I started the W3CSchools HTML and CSS course.</p> <p>Each day after school I would head over to the website to study. Initially, the code examples and explanations didn’t make much sense to me. But I kept studying regardless. I referred to various tutorials when I was stuck. This helped me view the problems I encountered from many different angles.</p> <p>When I was younger, I struggled with my reading and writing skills in school. I was only able to get better at them through continuous practice. So I already had this model in my head: if I continue to practice — no matter how long it takes — I will ultimately be able to understand these programming languages.</p> <p>A few months of intensive learning got me acquainted with HTML, CSS, and JavaScript. While I was still learning, a friend showed me the movie “The Social Network.” And after watching it, I was super motivated to build the next big thing. Thank you, Hollywood.</p> <p>I had a eureka moment a few days later. The idea was to build a better version of Facebook. At that time, you couldn’t see your Facebook friends that were online. Also, Facebook was built to connect with people you already knew in real life.</p> <p>So that was my billion dollar startup idea: build a social network with all the features Facebook didn’t have. Mark Zuckerberg - I’m coming for you - or so I thought.</p> <p>I spent the next few months building a better social network by adding any feature I could even think of using.</p> <p>I was naively confident that I was going to win.</p> <p>After completing the project, I did what anybody without an advertising budget would do. I spammed the internet for days and days.</p> <p>After several days of marketing, reality slapped me hard in the face. I only got 200 users, which I had to keep begging to come back to the site.</p> <p>I was depressed! A few months of hard work spent in vain. This taught me two important lessons the hard way:</p> <p>I needed to recognize the cold start AKA chicken and egg problem that new platforms face early on.</p> <p>I was building something I thought people needed. But I ended up building just another feature factory.</p> <p>While it’s okay to be motivated by a project, you also need to know when you’re headed down a dead end. I spent a few more months trying to see if I could get more people on my site, but retention numbers kept dancing toward 0%, and I eventually gave up on the project.</p> <p>But I was motivated by the motto of Lewis in Meet the Robinsons, “Keep moving forward.”</p> <p>Seeking inspiration for my next project, I reflected on the needs of my local community. This time around, I wanted to build something that people actually needed and are willing to pay for.</p> <p>I came up with an idea to make text messages cheaper and easier to send to multiple people at a time. This was more like Whatsapp backed by SMS. After speaking to different people about it, I decided this was the next thing to do.</p> <p>I named the project Xmx Me. It was going to be a J2ME app. This meant I had to learn Java. Looking back in time, I have to admit that it was the biggest challenge I’d yet encountered. I had to read some tutorials several times to fully understand them.</p> <p>After completing a few Java courses, I was ready for work. Relentlessly typing one line of code after another, I carefully built the backend with PHP, the frontend with HTML and CSS, and the mobile app with J2ME. The app was coming to life.</p> <p>But here’s the thing — I didn’t own a laptop. I was building out all of these pieces of my app on my J2ME feature phone.</p> <p>Wait. What?</p> <p>You read that right.</p> <p>I wrote my code on a Nokia 2690</p> <p>How I built my production apps on a feature phone</p> <p>At this point in my life, I had never actually programmed on a laptop. I simply couldn’t afford one. My parents wanted to help me. But it was difficult for them because they had to choose between paying my school fees (and other necessities) versus buying me a laptop.</p> <p>I hadn’t used a laptop before, and my only interaction with computers was at cyber cafes. I remember watching some videos about how to use a computer (left click, drag, drop, and other basic stuff) and then walking into a cyber cafe to practice them.</p> <p>I was lucky that a relative had gifted me a feature phone (The Nokia 2690). This phone changed my life. It’s what I used to develop Xmx Me, my failed social network, and several other projects.</p> <p>With nothing but a phone and the will to succeed, hour after hour I typed my code on that tiny keyboard. I was lucky again to have found an app that allowed me to compile my J2ME projects. Yes, building a J2ME app on a J2ME phone is possible.</p> <p>The SDK was resource hungry, so my battery often died. I would carry on, writing out all my code on paper and try to review it for any syntax errors.</p> <p>I don’t think I’ll fail any Java whiteboard coding tests after having done this for so long. :)</p> <p>Launching my group SMS app</p> <p>After several months, I had the product ready. I was able to convince someone I met on an internet forum to help me pay for the website hosting and the bulk SMS service for a limited number of SMS units.</p> <p>The app launch went well — at least better than my first project. We got some local press, and one of Kenya’s top blogs even wrote about the app. We grew organically to about 5,000 users.</p> <p>We were in business. And we were getting transactions a couple of times a day.</p> <p>With no prior experience running a business, I made some huge mistakes, some of which were:</p> <p>There was no easy way to charge users in Nigeria. Not everybody has a debit card. So I allowed people to pay using their mobile phone credit. The problem here was, there was no official way to convert this credit into money. I had to sell to vendors, who bought it back at a ridiculously low rates.</p> <p>There was little to no accounting. I was losing money and I didn’t know about it. I didn’t factor in some overhead costs. There were several missing pieces.</p> <p>I was considering selling the App to buy a laptop. Not knowing what to do, I went online to beg. Yes, I was that shameless and hungry. It didn’t turn out well. Somebody accused of being a scammer, which I eventually resolved. Again, I was inexperienced and I handled the situation poorly.</p> <p>After borrowing money multiple times to keep the business running, I decided to throw in the towel. Looking back, I think this was a bad decision. With a little more learning and experience, I would have been able to make things better. Maybe I didn’t see any future in an SMS app. Well, I released a throwback app recently, and many of the users still use it and love it.</p> <p>Lessons I learned along the way</p> <p>I realized that if I was going to be able to afford a computer anytime soon, I would need to work hard for it. So I began saving all the money I could. I cut my daily expenses and lived as simple a life as possible. I asked my relatives for help. I even sold some personal belongings to raise money for the laptop.</p> <p>Still, it wasn’t enough. Determined to achieve my goal, I took on a freelance job of building a website so I could earn the remaining sum.</p> <p>How do you use a feature phone to build a website designed for PC users? Simple: have a Facebook friend who you disturb every night to view your website on his computer and give you feedback. It was cheaper than going to a cyber cafe repeatedly.</p> <p>I also made heavy use of Ideone which allowed me to run my PHP scripts to see if they work before uploading them.</p> <p>Well, I finally was able to get that laptop. I can still remember the feeling of joy I had. That smell of plastic when you unbox a brand new cheap computer. I could now work on any project I wanted without feeling restricted because of my phone.</p> <p>Since J2ME devices were slowly dying out, I eventually switched to building for the Android platform. My Java skills were still relevant there. I just needed to learn some platform-specific things.</p> <p>The next year in 2015, after high school, I decided to start working to support my family. So I began freelancing. I was always active in local forums and groups, looking for people who wanted help with building an Android app.</p> <p>Because I didn’t have a good portfolio, I would build apps for some people before they even paid, without any guarantee that I’d be paid. I was stung by this approach several times, but it allowed me to build a good enough portfolio.</p> <p>I would like to share something I wish I knew while I was freelancing:</p> <p>Don’t spread yourself too thin. Taking up too many responsibilities is not good for your health, your family, or the clients.</p> <p>I worked with several clients from different parts of Nigeria who loved my work. I eventually got a full-time job in Lagos, Nigeria after working with a client remotely.</p> <p>Then, while going through my news feed, I saw a job advert for an Android developer position at Dot Learn. I looked them up and realized they are an MIT startup working in an education technology field that I was passionate about, and in a market I understood. They had a unique idea: to solve the problem of access to online education by making educational videos that are extremely data-light — as low as 1MB for every hour of video.</p> <p>This was almost unbelievable, and I knew it was key to making education very accessible to a lot of people.</p> <p>I am very passionate about revolutionizing education in Africa. In fact, I have already built a free (ad-supported) exam prep app called PrepUp that has over 30,000+ installs and was one of the finalists at the West Africa Mobile Awards in 2016. So I wanted to be part of what Dot Learn was building.</p> <p>So I went through the developer job requirements and I felt I had a chance. But impostor syndrome didn’t want me to be great.</p> <p>For days I had conflicting thoughts. Should I apply or not?</p> <p>Then I realized one thing: I had nothing to lose.</p> <p>The worst that could happen would be that I got rejected. But I wouldn’t die. So, I went ahead and applied.</p> <p>Fingers crossed, I started re-watching several of the videos I had downloaded from MIT OCW. I also spent some nights watching some coding interview solution videos. In the past, I had mostly been hired based on my strong portfolio and previous job experience, but I didn’t want to be caught off guard if they gave me a coding interview.</p> <p>Well, long story short: after lots of preparation, answering some difficult questions, a phone interview, and some coding projects, I was accepted.</p> <p>I couldn’t believe it. I was ecstatic.</p> <p>Looking back at it, this was one of my best decisions.</p> <p>Working at Dotlearn, I have had exponential growth in my career and have met with lots of awesome people from MIT, Harvard, and other great places.</p> <p>From attending big events like the Techcrunch Battlefield (I ended up missing my flight) to realizing I could rap, it’s been a fun and exciting experience so far.</p> <p> </p>]]></content:encoded>
			<enclosure length="14584499" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep_16_From_programming_on_a_Nokia_feature_phone_to_working_for_an_MIT_startup_final.mp3?dest-id=603849" />
			<itunes:duration>15:10</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Elvis was "just a village boy from Nigeria who had nothing but a dream and a Nokia J2ME feature phone." Today, he's a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. This is his story. Written by...]]></itunes:subtitle>
			<itunes:summary>Elvis was "just a village boy from Nigeria who had nothing but a dream and a Nokia J2ME feature phone." Today, he's a 19 year old Android developer who has worked on over 50 apps and currently works for an MIT startup. This is his story.

</itunes:summary>
			<itunes:episode>16</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 15 - How I replicated an $86 million project in 57 lines of code</title>
			<itunes:title>How I replicated an $86 million project in 57 lines of code</itunes:title>
			<pubDate>Thu, 01 Feb 2018 19:09:01 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[5b7100ad90afa48ed0fbfc6df9684513]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-15-how-i-replicated-an-86-million-project-in-57-lines-of-code]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>An Australian developer thought his local police force was spending way too much money on their new license plate scanning system. So he decided to build one himself. Here's how he did this, and how he ended up catching a criminal.</p> <p>Written and read by Tait Brown: <a href= "https://twitter.com/taitems">https://twitter.com/taitems</a></p> <p>Original article: <a href= "https://fcc.im/2iJWWuE">https://fcc.im/2iJWWuE</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>The Victoria Police are the primary law enforcement agency of Victoria, Australia. With over 16,000 vehicles stolen in Victoria this past year — at a cost of about $170 million — the police department is experimenting with a variety of technology-driven solutions to crackdown on car theft. They call this system BlueNet.</p> <p>To help prevent fraudulent sales of stolen vehicles, there is already a VicRoads web-based service for checking the status of vehicle registrations. The department has also invested in a stationary license plate scanner — a fixed tripod camera which scans passing traffic to automatically identify stolen vehicles.</p> <p>Don’t ask me why, but one afternoon I had the desire to prototype a vehicle-mounted license plate scanner that would automatically notify you if a vehicle had been stolen or was unregistered. Understanding that these individual components existed, I wondered how difficult it would be to wire them together.</p> <p>But it was after a bit of googling that I discovered the Victoria Police had recently undergone a trial of a similar device, and the estimated cost of roll out was somewhere in the vicinity of $86,000,000. One astute commenter pointed out that the $86M cost to fit out 220 vehicles comes in at a rather thirsty $390,909 per vehicle.</p> <p>Surely we can do a bit better than that.</p> <p>The Success Criteria</p> <p>Before getting started, I outlined a few key requirements for product design.</p> <p>Requirement #1: The image processing must be performed locally</p> <p>Streaming live video to a central processing warehouse seemed the least efficient approach to solving this problem. Besides the whopping bill for data traffic, you’re also introducing network latency into a process which may already be quite slow.</p> <p>Although a centralized machine learning algorithm is only going to get more accurate over time, I wanted to learn if an local on-device implementation would be “good enough”.</p> <p>Requirement #2: It must work with low quality images</p> <p>Since I don’t have a Raspberry Pi camera or USB webcam, so I’ll be using dashcam footage — it’s readily available and an ideal source of sample data. As an added bonus, dashcam video represents the overall quality of footage you’d expect from vehicle mounted cameras.</p> <p>Requirement #3: It needs to be built using open source technology</p> <p>Relying upon a proprietary software means you’ll get stung every time you request a change or enhancement — and the stinging will continue for every request made thereafter. Using open source technology is a no-brainer.</p> <p>My solution</p> <p>At a high level, my solution takes an image from a dashcam video, pumps it through an open source license plate recognition system installed locally on the device, queries the registration check service, and then returns the results for display.</p> <p>The data returned to the device installed in the law enforcement vehicle includes the vehicle’s make and model (which it only uses to verify whether the plates have been stolen), the registration status, and any notifications of the vehicle being reported stolen.</p> <p>If that sounds rather simple, it’s because it really is. For example, the image processing can all be handled by the openalpr library.</p> <p>This is really all that’s involved to recognize the characters on a license plate:</p> <p>A Minor Caveat</p> <p>Public access to the VicRoads APIs is not available, so license plate checks occur via web scraping for this prototype. While generally frowned upon — this is a proof of concept and I’m not slamming anyone’s servers.</p> <p>Results</p> <p>I must say I was pleasantly surprised.</p> <p>I expected the open source license plate recognition to be pretty rubbish. Additionally, the image recognition algorithms are probably not optimised for Australian license plates.</p> <p>The solution was able to recognise license plates in a wide field of view.</p> <p>Annotations added for effect. Number plate identified despite reflections and lens distortion.</p> <p>Although, the solution would occasionally have issues with particular letters.</p> <p>A few frames later, the M is correctly identified and at a higher confidence rating.</p> <p>As you can see in the above two images, processing the image a couple of frames later jumped from a confidence rating of 87% to a hair over 91%.</p> <p>I’m confident, pardon the pun, that the accuracy could be improved by increasing the sample rate, and then sorting by the highest confidence rating. Alternatively a threshold could be set that only accepts a confidence of greater than 90% before going on to validate the registration number.</p> <p>Those are very straight forward code-first fixes, and don’t preclude the training of the license plate recognition software with a local data set.</p> <p>The $86,000,000 Question</p> <p>To be fair, I have absolutely no clue what the $86M figure includes — nor can I speak to the accuracy of my open source tool with no localized training vs. the pilot BlueNet system.</p> <p>I would expect part of that budget includes the replacement of several legacy databases and software applications to support the high frequency, low latency querying of license plates several times per second, per vehicle.</p> <p>On the other hand, the cost of ~$391k per vehicle seems pretty rich — especially if the BlueNet isn’t particularly accurate and there are no large scale IT projects to decommission or upgrade dependent systems.</p> <p>Future Applications</p> <p>While it’s easy to get caught up in the Orwellian nature of an “always on” network of license plate snitchers, there are many positive applications of this technology. Imagine a passive system scanning fellow motorists for an abductors car that automatically alerts authorities and family members to their current location and direction.</p> <p>Teslas vehicles are already brimming with cameras and sensors with the ability to receive OTA updates — imagine turning these into a fleet of virtual good samaritans. Ubers and Lyft drivers could also be outfitted with these devices to dramatically increase the coverage area.</p> <p>Using open source technology and existing components, it seems possible to offer a solution that provides a much higher rate of return — for an investment much less than $86M.</p> <p>Remember the $86 million license plate scanner I replicated? I caught someone with it.</p> <p>A few weeks ago, I published what I thought at the time was a fairly innocuous article: How I replicated an $86 million project in 57 lines of code.</p> <p>I’ll admit — it was a rather click-bait claim. I was essentially saying that I’d reproduced the same license plate scanning and validating technology that the police in Victoria, Australia had just paid $86 million for.</p> <p>Since then, the reactions have been overwhelming. My article received over 100,000 hits in the first day, and at last glance sits somewhere around 450,000. I’ve been invited to speak on local radio talk shows and at a conference in California. I think someone may have misread Victoria, AU as Victoria, BC.</p> <p>Although I politely declined these offers, I have met for coffee with various local developers and big name firms alike. It’s been incredibly exciting.</p> <p>Most readers saw it for what it was: a proof of concept to spark discussion about the use of open source technology, government spending, and one man’s desire to build cool stuff from his couch.</p> <p>Pedants have pointed out the lack of training, support, and usual enterprise IT cost padders, but it’s not worth anyone’s time exploring these. I’d rather spend this post looking at my results and how others can go about shoring up their own accuracy.</p> <p>Before we get too deep into the results, I’d like to go over one thing that I feel was lost in the original post. The concept for this project started completely separate from the $86 million BlueNet project. It was by no means an attempt to knock it off.</p> <p>It started with the nagging thought that since OpenCV exists and the VicRoads website has license plate checks, there must be a way to combine the two or use something better.</p> <p>It was only when I began my write-up that I stumbled upon BlueNet. While discovering BlueNet and its price tag gave me a great editorial angle, with the code already written. There were bound to be some inconsistencies between the projects.</p> <p>I also believe part of the reason this blew up was the convenient timing of a report on wasteful government IT spending in Australia. The Federal Government’s IT bill has shot up from $5.9 billion to $10 billion, and it delivered dubious value for that blow out. Media researchers who contacted me were quick to link the two, but this is not something I am quick to encourage.</p> <p>A Disclaimer</p> <p>In the spirit of transparency, I must declare something that was also missing from the original post. My previous employer delivered smaller (less than $1 million) IT projects for Victoria Police and other state bodies. As a result, I’ve undergone police checks and completed the forms required to become a VicPol contractor.</p> <p>This may imply I have an axe to grind or have some specific insider knowledge, but instead I am proud of the projects we delivered. They were both on time and on budget.</p> <p>Visualizing the Results</p> <p>The following is a video representation of my results, composited in After Effects for a bit of fun. I recorded various test footage, and this was the most successful clip.</p> <p>I will go into detail about ideal camera setups, detection regions, and more after the video. It will help you better understand what made this iPhone video I took from through the windscreen a better video than a Contour HD angled out the side window.</p> <p>An Ethical Dilemma</p> <p>If you saw the hero graphic of this article or watched the video above, you may have noticed a very interesting development: I caught someone.</p> <p>Specifically, I caught someone driving a vehicle with a canceled registration from 2016. This could have happened for many reasons, the most innocent of which is a dodgy resale practice.</p> <p>Occasionally, when the private sale of a vehicle is not done by the book, the buyer and seller may not complete an official transfer of registration. This saves the buyer hundreds of dollars, but the vehicle is still registered to the seller. It’s not unheard of for a seller to then cancel the registration and receive an ad hoc refund of remaining months, also worth hundreds of dollars.</p> <p>Alternatively, the driver of the vehicle could well be the criminal we suspect that they are.</p> <p>So, although I jokingly named the project plate-snitch when I set it up on my computer, I’m now faced with the conundrum of whether to report what I saw.</p> <p>Ultimately, the driver was detected using a prototype of a police-only device. But driving on a 2016 registration (canceled, not expired) is a very deliberate move. Hmm.</p> <p>Back to the Results</p> <p>Of the many reactions to my article, a significant amount were quite literal and dubious. Since I said I replicated the software, they asserted that I must have a support center, warranties, and training manuals. One even attempted to replicate my results and hit the inevitable roadblocks of image quality and source material.</p> <p>Because of this, some implied that I cherry-picked my source images. To that I can only say, “Well, duh.”</p> <p>When I built my initial proof of concept (again, focusing on validating an idea, not replicating BlueNet), I used a small sample set of less than ten images. Since camera setup is one of, if not the most, important factors in ALPR, I selected them for ideal characteristics that enhance recognition.</p> <p>At the end of the day, it is very simple to take a fragile proof of concept and break it. The true innovation and challenge comes from taking a proof of concept, and making it work. Throughout my professional career, many senior developers have told me that things can’t be done or at least can’t be done in a timely manner. Sometimes they were right. Often, they were just risk averse.</p> <p>“Nothing is impossible until it is proven to be.”</p> <p>Many people bastardize this quote, and you may have seen or heard one of it’s incarnations before. To me, it neatly summarizes a healthy development mindset, in which spiking and validating ideas is almost mandatory to understanding them.</p> <p>Optimal ALPR Camera Setups</p> <p>This project is so exciting and different for me because it has a clear success metric — whether the software recognizes the plate. This can only happen with a combination of hardware, software, and networking solutions. After posting my original article, people who sell ALPR cameras quickly offered advice.</p> <p>Optical Zoom</p> <p>The most obvious solution in hindsight is the use of an optical zoom. Though I explore other important factors below, none lead to such a sheer increase in recognition as this. In general, professional ALPR solutions are offset at an angle, trained on where the license plate will be, and zoomed into the area to maximize clarity.</p> <p>This means the more zoom, more pixels to play with.</p> <p>All the cameras I had at my disposal were of a fixed lens. They included:</p> <p>A Contour HD action camera. These came out in 2009, and I use mine to record my cycling commute and to replay each week’s near death experience.</p> <p>The featured test run was recorded on my phone. My only method of replicating an optical zoom was using an app to record at 3K instead of 1080p, and then digitally zooming and cropping. Again, more pixels to play with.</p> <p>Angle & Positioning</p> <p>The viewing angle of 30° is often referenced as the standard for ideal plate recognition. This is incredibly important when you learn that BlueNet uses an array of cameras. It also makes sense when you consider what a front facing camera would generally see — not very much.</p> <p>What a front facing ALPR camera sees — not much.</p> <p>If I had to guess I’d say a mostly forward-facing array would be the ideal setup. It would consist of a single camera pointed dead center as above, two off-center at 30° each side, and a single rear-facing camera. The value in having most of the cameras pointed forward would come from the increased reaction time if the vehicle is traveling in the opposite direction. This would allow a quicker scan, process, and U-turn than if the rear facing cameras picked up a suspect vehicle already ten meters past the police vehicle.</p> <p>A four camera array would need to be angled similar to this. Icons from Freepik.</p> <p>A Gymbal</p> <p>When compositing the video, I thought about stabilizing the footage. Instead I opted to show the bumpy ride for what it was. What you saw was me holding my phone near the windscreen while my wife drove. Check out that rigorous scientific method.</p> <p>Any production-ready version of a vehicle-mounted ALPR needs some form of stabilisation. Not a hand.</p> <p>Frame Rate</p> <p>Both the attempt to replicate my project and my recordings since then explored the same misconception that ALPR sampling frame rate may be linked to success. In my experience, this did nothing but waste cycles. Instead, what is incredibly important is the shutter speed creating clean, crisp footage that feeds well into the algorithm.</p> <p>But I was also testing fairly low-speed footage. At most, two vehicles passing each other in a 60km/h zone created a 120km/h differential. BlueNet, on the other hand, can work up to an alleged 200km/h.</p> <p>As a way of solving this, a colleague suggested object detection and out-of-band processing. Identify a vehicle and draw a bounding box. Wait for it to come into the ideal recognition angle and zoom. Then shoot a burst of photos for asynchronous processing.</p> <p>I looked into using OpenCV (node-opencv) for object recognition, but I found something simpler like face detection, taking anywhere from 600–800ms. Not only less than ideal for my use, but pretty poor in general.</p> <p>Hype-train TensorFlow comes to the rescue. Able to run on-device, there are examples of projects identifying multiple vehicles per frame at an astounding 27.7fps. This version could even expose speed estimations. Legally worthless, but perhaps useful in every day policing (no fps benchmark in readme).</p> <p>To better explain how high-performance vehicle recognition could couple with slower ALPR techniques, I created another video in After Effects. I imagine that the two working hand-in-hand would look something like this:</p> <p>Idea: how vehicle object detection could remove ALPR frame limits by processing asynchronously.</p> <p>Frame Rate vs Shutter Speed</p> <p>A different manifestation of frame rate is largely influenced upon shutter speed, and more specifically, the rolling shutter issues that plague early or low end digital movie recorders. The following is a snapshot from some Contour HD footage. You can see at only 60km/h the rolling shutter issue makes the footage more or less unusable from an ALPR point of view.</p> <p>Adjusting frame rate on both the Contour HD and my iPhone did not result in noticeably less distortion. In theory, a higher shutter speed should produce clearer and crisper images. They’d become increasingly important if you were to chase the 200km/h BlueNet benchmark. Less blur and less rolling shutter distortion would ideally lead to a better read.</p> <p>Open ALPR Version</p> <p>One of the more interesting discoveries was that the node-openalpr version I was using is both out-of-date and not nearly as powerful as their proprietary solution. While an open source requirement was certainly a factor, it was amazing how accurately the cloud version could successfully read frames that I couldn’t even identify a plate on.</p> <p>ALPR Country Training Data</p> <p>I also found that the main node-openalpr package defaults to US country processing with no way of overriding it. You have to pull down someone else’s fork which allows you to then provide an extra country parameter.</p> <p>Slimline Australian plates need their own separate country detection to regular Australian plates?</p> <p>But this doesn’t always help. Using the default US algorithm I was able to produce the most results. Specifying the Australian data set actually halved the number of successful plate reads, and it only managed to find one or two that the US algorithm couldn’t. Providing the separate “Australian Wide Plate” set again halved the count and introduced a single extra plate.</p> <p>There is clearly a lot to be desired when it comes to Australian-based data sets for ALPR, and I think that the sheer number of plate styles available in Victoria is a contributing factor.</p> <p>Good luck with that.</p> <p>Planar Warps</p> <p>Open ALPR comes with one particular tool to reduce the impact of distortion from both the camera angle and rolling shutter issues. Planar warp refers to a method in which coordinates are passed to the library to skew, translate, and rotate an image until it closely resembles a straight-on plate.</p> <p>In my limited testing experience, I wasn’t able to find a planar warp that worked at all speeds. When you consider rolling shutter, it makes sense that the distortion grows relative to vehicle speed. I would imagine feeding accelerometer or GPS speed data as a coefficient might work. Or, you know, get a camera that isn’t completely rubbish.</p> <p>What others are doing in the industry</p> <p>Numerous readers reached out after the last post to share their own experiences and ideas. Perhaps one of the more interesting solutions shared with me was by Auror in New Zealand.</p> <p>They employ fixed ALPR cameras in petrol stations to report on people stealing petrol. This in itself is not particularly new and revolutionary. But when coupled with their network, they can automatically raise an alert when known offenders have returned, or are targeting petrol stations in the area.</p> <p>Independent developers in Israel, South Africa, and Argentina have shown interest in building their own hacked-together versions of BlueNet. Some will probably fare better than others, as places like Israel use a seven digit license plates with no alphabet characters.</p> <p>Key Takeaways</p> <p>There is simply too much that I’ve learned in the last few weeks of dabbling to fit into one post. While there have been plenty of detractors, I really do appreciate the support and knowledge that has been sent my way.</p> <p>There are a lot of challenges you will face in trying to build your own ALPR solution, but thankfully a lot of them are solved problems.</p> <p>To put things in perspective, I’m a designer and front end developer. I’ve spent about ten hours now on footage and code, another eight on video production, and at least another ten on write-ups alone. I’ve achieved what I have by standing on the shoulders of giants. I’m installing libraries built by intelligent people and have leveraged advice from people who sell these cameras for a living.</p> <p>The $86 million question still remains — if you can build a half-arsed solution that does an okay job by standing on the shoulders of giants, how much more money should you pour in to do a really really good job?</p> <p>My solution is not even in the same solar system as the 99.999% accurate scanner that some internet commenters seem to expect. But then again, BlueNet only has to meet a 95% accuracy target.</p> <p>So if $1 million gets you to 80% accuracy, and maybe $10 million gets you to 90% accuracy — when do you stop spending? Furthermore, considering that the technology has proven commercial applications here in Oceania, how much more taxpayer money should be poured into a proprietary, close-sourced solution when local startups could benefit? Australia is supposed to be an “innovation nation” after all.</p>]]></description>
			<content:encoded><![CDATA[<p>An Australian developer thought his local police force was spending way too much money on their new license plate scanning system. So he decided to build one himself. Here's how he did this, and how he ended up catching a criminal.</p> <p>Written and read by Tait Brown: <a href= "https://twitter.com/taitems">https://twitter.com/taitems</a></p> <p>Original article: <a href= "https://fcc.im/2iJWWuE">https://fcc.im/2iJWWuE</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>The Victoria Police are the primary law enforcement agency of Victoria, Australia. With over 16,000 vehicles stolen in Victoria this past year — at a cost of about $170 million — the police department is experimenting with a variety of technology-driven solutions to crackdown on car theft. They call this system BlueNet.</p> <p>To help prevent fraudulent sales of stolen vehicles, there is already a VicRoads web-based service for checking the status of vehicle registrations. The department has also invested in a stationary license plate scanner — a fixed tripod camera which scans passing traffic to automatically identify stolen vehicles.</p> <p>Don’t ask me why, but one afternoon I had the desire to prototype a vehicle-mounted license plate scanner that would automatically notify you if a vehicle had been stolen or was unregistered. Understanding that these individual components existed, I wondered how difficult it would be to wire them together.</p> <p>But it was after a bit of googling that I discovered the Victoria Police had recently undergone a trial of a similar device, and the estimated cost of roll out was somewhere in the vicinity of $86,000,000. One astute commenter pointed out that the $86M cost to fit out 220 vehicles comes in at a rather thirsty $390,909 per vehicle.</p> <p>Surely we can do a bit better than that.</p> <p>The Success Criteria</p> <p>Before getting started, I outlined a few key requirements for product design.</p> <p>Requirement #1: The image processing must be performed locally</p> <p>Streaming live video to a central processing warehouse seemed the least efficient approach to solving this problem. Besides the whopping bill for data traffic, you’re also introducing network latency into a process which may already be quite slow.</p> <p>Although a centralized machine learning algorithm is only going to get more accurate over time, I wanted to learn if an local on-device implementation would be “good enough”.</p> <p>Requirement #2: It must work with low quality images</p> <p>Since I don’t have a Raspberry Pi camera or USB webcam, so I’ll be using dashcam footage — it’s readily available and an ideal source of sample data. As an added bonus, dashcam video represents the overall quality of footage you’d expect from vehicle mounted cameras.</p> <p>Requirement #3: It needs to be built using open source technology</p> <p>Relying upon a proprietary software means you’ll get stung every time you request a change or enhancement — and the stinging will continue for every request made thereafter. Using open source technology is a no-brainer.</p> <p>My solution</p> <p>At a high level, my solution takes an image from a dashcam video, pumps it through an open source license plate recognition system installed locally on the device, queries the registration check service, and then returns the results for display.</p> <p>The data returned to the device installed in the law enforcement vehicle includes the vehicle’s make and model (which it only uses to verify whether the plates have been stolen), the registration status, and any notifications of the vehicle being reported stolen.</p> <p>If that sounds rather simple, it’s because it really is. For example, the image processing can all be handled by the openalpr library.</p> <p>This is really all that’s involved to recognize the characters on a license plate:</p> <p>A Minor Caveat</p> <p>Public access to the VicRoads APIs is not available, so license plate checks occur via web scraping for this prototype. While generally frowned upon — this is a proof of concept and I’m not slamming anyone’s servers.</p> <p>Results</p> <p>I must say I was pleasantly surprised.</p> <p>I expected the open source license plate recognition to be pretty rubbish. Additionally, the image recognition algorithms are probably not optimised for Australian license plates.</p> <p>The solution was able to recognise license plates in a wide field of view.</p> <p>Annotations added for effect. Number plate identified despite reflections and lens distortion.</p> <p>Although, the solution would occasionally have issues with particular letters.</p> <p>A few frames later, the M is correctly identified and at a higher confidence rating.</p> <p>As you can see in the above two images, processing the image a couple of frames later jumped from a confidence rating of 87% to a hair over 91%.</p> <p>I’m confident, pardon the pun, that the accuracy could be improved by increasing the sample rate, and then sorting by the highest confidence rating. Alternatively a threshold could be set that only accepts a confidence of greater than 90% before going on to validate the registration number.</p> <p>Those are very straight forward code-first fixes, and don’t preclude the training of the license plate recognition software with a local data set.</p> <p>The $86,000,000 Question</p> <p>To be fair, I have absolutely no clue what the $86M figure includes — nor can I speak to the accuracy of my open source tool with no localized training vs. the pilot BlueNet system.</p> <p>I would expect part of that budget includes the replacement of several legacy databases and software applications to support the high frequency, low latency querying of license plates several times per second, per vehicle.</p> <p>On the other hand, the cost of ~$391k per vehicle seems pretty rich — especially if the BlueNet isn’t particularly accurate and there are no large scale IT projects to decommission or upgrade dependent systems.</p> <p>Future Applications</p> <p>While it’s easy to get caught up in the Orwellian nature of an “always on” network of license plate snitchers, there are many positive applications of this technology. Imagine a passive system scanning fellow motorists for an abductors car that automatically alerts authorities and family members to their current location and direction.</p> <p>Teslas vehicles are already brimming with cameras and sensors with the ability to receive OTA updates — imagine turning these into a fleet of virtual good samaritans. Ubers and Lyft drivers could also be outfitted with these devices to dramatically increase the coverage area.</p> <p>Using open source technology and existing components, it seems possible to offer a solution that provides a much higher rate of return — for an investment much less than $86M.</p> <p>Remember the $86 million license plate scanner I replicated? I caught someone with it.</p> <p>A few weeks ago, I published what I thought at the time was a fairly innocuous article: How I replicated an $86 million project in 57 lines of code.</p> <p>I’ll admit — it was a rather click-bait claim. I was essentially saying that I’d reproduced the same license plate scanning and validating technology that the police in Victoria, Australia had just paid $86 million for.</p> <p>Since then, the reactions have been overwhelming. My article received over 100,000 hits in the first day, and at last glance sits somewhere around 450,000. I’ve been invited to speak on local radio talk shows and at a conference in California. I think someone may have misread Victoria, AU as Victoria, BC.</p> <p>Although I politely declined these offers, I have met for coffee with various local developers and big name firms alike. It’s been incredibly exciting.</p> <p>Most readers saw it for what it was: a proof of concept to spark discussion about the use of open source technology, government spending, and one man’s desire to build cool stuff from his couch.</p> <p>Pedants have pointed out the lack of training, support, and usual enterprise IT cost padders, but it’s not worth anyone’s time exploring these. I’d rather spend this post looking at my results and how others can go about shoring up their own accuracy.</p> <p>Before we get too deep into the results, I’d like to go over one thing that I feel was lost in the original post. The concept for this project started completely separate from the $86 million BlueNet project. It was by no means an attempt to knock it off.</p> <p>It started with the nagging thought that since OpenCV exists and the VicRoads website has license plate checks, there must be a way to combine the two or use something better.</p> <p>It was only when I began my write-up that I stumbled upon BlueNet. While discovering BlueNet and its price tag gave me a great editorial angle, with the code already written. There were bound to be some inconsistencies between the projects.</p> <p>I also believe part of the reason this blew up was the convenient timing of a report on wasteful government IT spending in Australia. The Federal Government’s IT bill has shot up from $5.9 billion to $10 billion, and it delivered dubious value for that blow out. Media researchers who contacted me were quick to link the two, but this is not something I am quick to encourage.</p> <p>A Disclaimer</p> <p>In the spirit of transparency, I must declare something that was also missing from the original post. My previous employer delivered smaller (less than $1 million) IT projects for Victoria Police and other state bodies. As a result, I’ve undergone police checks and completed the forms required to become a VicPol contractor.</p> <p>This may imply I have an axe to grind or have some specific insider knowledge, but instead I am proud of the projects we delivered. They were both on time and on budget.</p> <p>Visualizing the Results</p> <p>The following is a video representation of my results, composited in After Effects for a bit of fun. I recorded various test footage, and this was the most successful clip.</p> <p>I will go into detail about ideal camera setups, detection regions, and more after the video. It will help you better understand what made this iPhone video I took from through the windscreen a better video than a Contour HD angled out the side window.</p> <p>An Ethical Dilemma</p> <p>If you saw the hero graphic of this article or watched the video above, you may have noticed a very interesting development: I caught someone.</p> <p>Specifically, I caught someone driving a vehicle with a canceled registration from 2016. This could have happened for many reasons, the most innocent of which is a dodgy resale practice.</p> <p>Occasionally, when the private sale of a vehicle is not done by the book, the buyer and seller may not complete an official transfer of registration. This saves the buyer hundreds of dollars, but the vehicle is still registered to the seller. It’s not unheard of for a seller to then cancel the registration and receive an ad hoc refund of remaining months, also worth hundreds of dollars.</p> <p>Alternatively, the driver of the vehicle could well be the criminal we suspect that they are.</p> <p>So, although I jokingly named the project plate-snitch when I set it up on my computer, I’m now faced with the conundrum of whether to report what I saw.</p> <p>Ultimately, the driver was detected using a prototype of a police-only device. But driving on a 2016 registration (canceled, not expired) is a very deliberate move. Hmm.</p> <p>Back to the Results</p> <p>Of the many reactions to my article, a significant amount were quite literal and dubious. Since I said I replicated the software, they asserted that I must have a support center, warranties, and training manuals. One even attempted to replicate my results and hit the inevitable roadblocks of image quality and source material.</p> <p>Because of this, some implied that I cherry-picked my source images. To that I can only say, “Well, duh.”</p> <p>When I built my initial proof of concept (again, focusing on validating an idea, not replicating BlueNet), I used a small sample set of less than ten images. Since camera setup is one of, if not the most, important factors in ALPR, I selected them for ideal characteristics that enhance recognition.</p> <p>At the end of the day, it is very simple to take a fragile proof of concept and break it. The true innovation and challenge comes from taking a proof of concept, and making it work. Throughout my professional career, many senior developers have told me that things can’t be done or at least can’t be done in a timely manner. Sometimes they were right. Often, they were just risk averse.</p> <p>“Nothing is impossible until it is proven to be.”</p> <p>Many people bastardize this quote, and you may have seen or heard one of it’s incarnations before. To me, it neatly summarizes a healthy development mindset, in which spiking and validating ideas is almost mandatory to understanding them.</p> <p>Optimal ALPR Camera Setups</p> <p>This project is so exciting and different for me because it has a clear success metric — whether the software recognizes the plate. This can only happen with a combination of hardware, software, and networking solutions. After posting my original article, people who sell ALPR cameras quickly offered advice.</p> <p>Optical Zoom</p> <p>The most obvious solution in hindsight is the use of an optical zoom. Though I explore other important factors below, none lead to such a sheer increase in recognition as this. In general, professional ALPR solutions are offset at an angle, trained on where the license plate will be, and zoomed into the area to maximize clarity.</p> <p>This means the more zoom, more pixels to play with.</p> <p>All the cameras I had at my disposal were of a fixed lens. They included:</p> <p>A Contour HD action camera. These came out in 2009, and I use mine to record my cycling commute and to replay each week’s near death experience.</p> <p>The featured test run was recorded on my phone. My only method of replicating an optical zoom was using an app to record at 3K instead of 1080p, and then digitally zooming and cropping. Again, more pixels to play with.</p> <p>Angle & Positioning</p> <p>The viewing angle of 30° is often referenced as the standard for ideal plate recognition. This is incredibly important when you learn that BlueNet uses an array of cameras. It also makes sense when you consider what a front facing camera would generally see — not very much.</p> <p>What a front facing ALPR camera sees — not much.</p> <p>If I had to guess I’d say a mostly forward-facing array would be the ideal setup. It would consist of a single camera pointed dead center as above, two off-center at 30° each side, and a single rear-facing camera. The value in having most of the cameras pointed forward would come from the increased reaction time if the vehicle is traveling in the opposite direction. This would allow a quicker scan, process, and U-turn than if the rear facing cameras picked up a suspect vehicle already ten meters past the police vehicle.</p> <p>A four camera array would need to be angled similar to this. Icons from Freepik.</p> <p>A Gymbal</p> <p>When compositing the video, I thought about stabilizing the footage. Instead I opted to show the bumpy ride for what it was. What you saw was me holding my phone near the windscreen while my wife drove. Check out that rigorous scientific method.</p> <p>Any production-ready version of a vehicle-mounted ALPR needs some form of stabilisation. Not a hand.</p> <p>Frame Rate</p> <p>Both the attempt to replicate my project and my recordings since then explored the same misconception that ALPR sampling frame rate may be linked to success. In my experience, this did nothing but waste cycles. Instead, what is incredibly important is the shutter speed creating clean, crisp footage that feeds well into the algorithm.</p> <p>But I was also testing fairly low-speed footage. At most, two vehicles passing each other in a 60km/h zone created a 120km/h differential. BlueNet, on the other hand, can work up to an alleged 200km/h.</p> <p>As a way of solving this, a colleague suggested object detection and out-of-band processing. Identify a vehicle and draw a bounding box. Wait for it to come into the ideal recognition angle and zoom. Then shoot a burst of photos for asynchronous processing.</p> <p>I looked into using OpenCV (node-opencv) for object recognition, but I found something simpler like face detection, taking anywhere from 600–800ms. Not only less than ideal for my use, but pretty poor in general.</p> <p>Hype-train TensorFlow comes to the rescue. Able to run on-device, there are examples of projects identifying multiple vehicles per frame at an astounding 27.7fps. This version could even expose speed estimations. Legally worthless, but perhaps useful in every day policing (no fps benchmark in readme).</p> <p>To better explain how high-performance vehicle recognition could couple with slower ALPR techniques, I created another video in After Effects. I imagine that the two working hand-in-hand would look something like this:</p> <p>Idea: how vehicle object detection could remove ALPR frame limits by processing asynchronously.</p> <p>Frame Rate vs Shutter Speed</p> <p>A different manifestation of frame rate is largely influenced upon shutter speed, and more specifically, the rolling shutter issues that plague early or low end digital movie recorders. The following is a snapshot from some Contour HD footage. You can see at only 60km/h the rolling shutter issue makes the footage more or less unusable from an ALPR point of view.</p> <p>Adjusting frame rate on both the Contour HD and my iPhone did not result in noticeably less distortion. In theory, a higher shutter speed should produce clearer and crisper images. They’d become increasingly important if you were to chase the 200km/h BlueNet benchmark. Less blur and less rolling shutter distortion would ideally lead to a better read.</p> <p>Open ALPR Version</p> <p>One of the more interesting discoveries was that the node-openalpr version I was using is both out-of-date and not nearly as powerful as their proprietary solution. While an open source requirement was certainly a factor, it was amazing how accurately the cloud version could successfully read frames that I couldn’t even identify a plate on.</p> <p>ALPR Country Training Data</p> <p>I also found that the main node-openalpr package defaults to US country processing with no way of overriding it. You have to pull down someone else’s fork which allows you to then provide an extra country parameter.</p> <p>Slimline Australian plates need their own separate country detection to regular Australian plates?</p> <p>But this doesn’t always help. Using the default US algorithm I was able to produce the most results. Specifying the Australian data set actually halved the number of successful plate reads, and it only managed to find one or two that the US algorithm couldn’t. Providing the separate “Australian Wide Plate” set again halved the count and introduced a single extra plate.</p> <p>There is clearly a lot to be desired when it comes to Australian-based data sets for ALPR, and I think that the sheer number of plate styles available in Victoria is a contributing factor.</p> <p>Good luck with that.</p> <p>Planar Warps</p> <p>Open ALPR comes with one particular tool to reduce the impact of distortion from both the camera angle and rolling shutter issues. Planar warp refers to a method in which coordinates are passed to the library to skew, translate, and rotate an image until it closely resembles a straight-on plate.</p> <p>In my limited testing experience, I wasn’t able to find a planar warp that worked at all speeds. When you consider rolling shutter, it makes sense that the distortion grows relative to vehicle speed. I would imagine feeding accelerometer or GPS speed data as a coefficient might work. Or, you know, get a camera that isn’t completely rubbish.</p> <p>What others are doing in the industry</p> <p>Numerous readers reached out after the last post to share their own experiences and ideas. Perhaps one of the more interesting solutions shared with me was by Auror in New Zealand.</p> <p>They employ fixed ALPR cameras in petrol stations to report on people stealing petrol. This in itself is not particularly new and revolutionary. But when coupled with their network, they can automatically raise an alert when known offenders have returned, or are targeting petrol stations in the area.</p> <p>Independent developers in Israel, South Africa, and Argentina have shown interest in building their own hacked-together versions of BlueNet. Some will probably fare better than others, as places like Israel use a seven digit license plates with no alphabet characters.</p> <p>Key Takeaways</p> <p>There is simply too much that I’ve learned in the last few weeks of dabbling to fit into one post. While there have been plenty of detractors, I really do appreciate the support and knowledge that has been sent my way.</p> <p>There are a lot of challenges you will face in trying to build your own ALPR solution, but thankfully a lot of them are solved problems.</p> <p>To put things in perspective, I’m a designer and front end developer. I’ve spent about ten hours now on footage and code, another eight on video production, and at least another ten on write-ups alone. I’ve achieved what I have by standing on the shoulders of giants. I’m installing libraries built by intelligent people and have leveraged advice from people who sell these cameras for a living.</p> <p>The $86 million question still remains — if you can build a half-arsed solution that does an okay job by standing on the shoulders of giants, how much more money should you pour in to do a really really good job?</p> <p>My solution is not even in the same solar system as the 99.999% accurate scanner that some internet commenters seem to expect. But then again, BlueNet only has to meet a 95% accuracy target.</p> <p>So if $1 million gets you to 80% accuracy, and maybe $10 million gets you to 90% accuracy — when do you stop spending? Furthermore, considering that the technology has proven commercial applications here in Oceania, how much more taxpayer money should be poured into a proprietary, close-sourced solution when local startups could benefit? Australia is supposed to be an “innovation nation” after all.</p>]]></content:encoded>
			<enclosure length="25718973" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._15_-_How_I_replicated_a_86_million_dollar_project_in_57_lines_of_code.mp3?dest-id=603849" />
			<itunes:duration>26:45</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[An Australian developer thought his local police force was spending way too much money on their new license plate scanning system. So he decided to build one himself. Here's how he did this, and how he ended up catching a criminal. Written and read by...]]></itunes:subtitle>
			<itunes:summary>An Australian developer thought his local police force was spending way too much money on their new license plate scanning system. So he decided to build one himself. Here's how he did this, and how he ended up catching a criminal.</itunes:summary>
			<itunes:episode>15</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 14 - How to Go From Hobbyist to Professional Developer</title>
			<itunes:title>How to Go From Hobbyist to Professional Developer</itunes:title>
			<pubDate>Thu, 25 Jan 2018 16:16:42 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[fc69897f9ea9a8e5bc3f9714bfc51d9f]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-14-how-to-go-from-hobbyist-to-professional-developer]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>5 years ago, Ken was a college dropout who woke up every day at 4 a.m. to drive a forklift. He taught himself to code and kick-started his career by convincing a local web development company to hire him. Ken shares his advice on how to go from a hobbyist to a professional developer.</p> <p>Written and read by Ken Rogers: <a href= "https://twitter.com/KennethARogers">https://twitter.com/KennethARogers</a></p> <p>Ken's original article: <a href= "https://fcc.im/2FeA24K">https://fcc.im/2FeA24K</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>A few years ago, I was bouncing back and forth between landscaping jobs and restaurant jobs. I had just left college, and didn’t know what I was going to do with my life.</p> <p>I had a lot of ideas, but no direction. During that time, I started teaching myself programming. At first it was a hobby. I thought it was cool to be able to build things using nothing but my brain and some code.</p> <p>But then I started thinking about where my life was going, and saw this as a potential living.</p> <p>At first, I put the idea out of my head. I couldn’t afford real education. I already dropped out of college once because of money, and if I went in for computer science, I’d have to start over.</p> <p>I’d leave with 6 years of school and well over $50,000 in debt if I took that route. So that wasn’t an option.</p> <p>Then I started thinking that I could teach myself web development well enough to get an internship.</p> <p>My initial plan was to introduce myself to a few companies in my town, and ask if they would want to meet with me. I wanted to discuss the potential of me working with them while I was in school. That way I could pay for school and get some experience at the same time.</p> <p>So I got serious about web development.</p> <p>Instead of tinkering I started to build a real portfolio and document my skills.</p> <p>I started becoming active on places like Stack Overflow.</p> <p>I built a few practical applications and put them on GitHub. They were nothing fancy, but they demonstrated that I knew how to code.</p> <p>One company didn’t offer me a part time job. They didn’t say to come back after I had my degree. They offered me a full-time job on a 6 month trial basis as their new Junior Developer.</p> <p>I was over the moon. It turns out that once I got serious and started developing with a purpose, I taught myself quite a bit.</p> <p>I was able to answer their questions. I was able to walk them through the modest applications I had built. And I was able to explain how my projects worked.</p> <p>I stayed at that company for two and a half years, and then took a job as a web developer for the city I live in.</p> <p>View yourself as a lifelong apprentice</p> <p>An important part of my transition into a professional developer role was viewing the time I spent with my previous company as an apprenticeship. I learned as much as I could.</p> <p>The real-world knowledge gained from working at a company is invaluable. Knowing how to work with clients, coworkers, and within constraints is essential. This is something you can only learn in the field.</p> <p>While I may know more now than I did when I first started that job, I’ll never stop viewing myself as an apprentice. One of the requirements for being a great developer is the desire to continue learning. The minute we see ourselves as having mastered a skill is the minute we stop growing.</p> <p>Hemingway said it best:</p> <p>We are all apprentices in a craft where no one ever becomes a master.</p> <p>He was talking about writing, but it applies to development as well.</p> <p>The combination of teaching myself and working for a company has allowed me to learn so much (I’m even writing a book). I understand the technical practice of web development, and also how to go from a hobbyist to a professional. It’s a path that anyone can take, regardless of your time or abilities.</p> <p>To give you some perspective, I was working two jobs at once — one of which involved getting up at 4 a.m. to drive a forklift around.</p> <p>Learning to code as a busy adult takes determination, drive, and a stubborn persistence.</p> <p>Making the transition from Hobbyist to Professional</p> <p>Here’s a process that you can follow. The exact journey will be different for everyone, but there are steps you can take to get you on the right path.</p> <p>1. Realize that you can do this</p> <p>Anyone can teach themselves to be a developer. There’s this idea that being self-taught is something only a certain type of person can do. They’re right in a sense. You need to be self-driven and motivated by something other than immediate payment. But anyone can become this type of person.</p> <p>There’s this idea present in our society that some people are born with certain traits and others aren’t. It’s detrimental to growth, and one of the reasons why so many people feel unfulfilled in life.</p> <p>If you always felt that you either “had it” or you didn’t, it would be very easy to get discouraged.</p> <p>I want to put that myth to bed right now. Anyone can learn to be self-motivated and teach themselves programming. Or start a successful business. Or achieve a long-term goal.</p> <p>It’s not about catching a big break, or being born with the right traits. It’s about perseverance.</p> <p>If you can put your head down, push through the hard times, and commit, you can do anything you want to.</p> <p>That last part is super important, but I want to provide a warning before moving on.</p> <p>People are often too quick to embrace their own successes and the successes of others. It’s known as survivorship bias.</p> <p>There is an element of luck in everything. Sometimes things just work out. For example, I contacted a web development agency and was lucky enough that they happened to be looking for someone at that moment, and I happened to fit what they were looking for.</p> <p>But what is luck?</p> <p>Sure, I was lucky to get that job, but I never would have been lucky if I hadn’t made the decision to teach myself development. And then made the decision to apply to that job.</p> <p>Luck does play a factor, but the myth is that it is all up to luck. You can increase your odds of getting lucky, you just have to be willing to put yourself out there.</p> <p>But luck will never find you if you don’t commit to being great at something.</p> <p>2. Commit to being incredible at your craft</p> <p>One of my biggest weaknesses is that I get bored and distracted. I want to jump into the next project. This tendency will kill your success.</p> <p>It feels like freedom. Being able to bounce between whatever project happens to suit your mood that day, but...</p> <p>It’s a trap! If you take away nothing else from this article, let it be this:</p> <p>The number one key to succeeding in becoming a professional developer is to commit. Commit and never stop until you make it happen.</p> <p>This applies to everything.</p> <p>People stress out about which framework to use. But what matters is picking one and sticking with it. You can transfer and learn new languages and frameworks later.</p> <p>What matters is the problem solving skills you will gain when developing. The ability to think like a developer.</p> <p>I taught myself programming using Laravel, but the company that hired me used CakePHP. It didn’t matter. They knew I could pick up the technical skills required to switch frameworks.</p> <p>Pick a direction and see it through, no matter what. You have to remove the possibility of getting distracted by something else.</p> <p>Few feelings can compare to the relentless pursuit of mastery of a craft.</p> <p>It isn’t easy. Once you learn to ignore distractions, you will notice an increase in enjoyment of your work.</p> <p>Mike Rowe is fond of saying that people shouldn’t start with finding their passion.</p> <p>People are so unhappy because they look for the perfect career. They look for the one that they are passionate about.</p> <p>But passion comes from an unstoppable desire to be incredible at your craft. Once you adopt that mindset, your abilities as a developer will take on a new life.</p> <p>3. Start building things immediately</p> <p>Aspiring developers can get stuck in the trap of reading too much without taking action.</p> <p>Tutorials and books are great for learning the basics. The problem is that they instill a false sense of confidence in the developer.</p> <p>Have you ever finished a programming book and gone to build something on your own only to realize you had no idea how to go about doing it? Then you know what I’m talking about.</p> <p>The solution to this is simple, but not easy.</p> <p>Start building.</p> <p>Make something. Make an app that solves a problem you have in your own life, or that addresses an issue for someone close to you.</p> <p>Make something for fun.</p> <p>Make something and put it out there. Make it open source and put in on GitHub. You aren’t doing it for anyone else, it’s for you, so don’t worry about other people’s opinion of it.</p> <p>Your code will be ugly at first. I look back at some of the code I wrote even a few months ago and want to vomit. But you can’t learn development without building stuff. Books are fantastic, and I am obsessed with reading as many as possible. Then you must apply that knowledge.</p> <p>You’re going to run into issues and you’re going to struggle. That’s good. Those are the times we learn the most.</p> <p>Start off by building things that solve problems, I’ll talk more about that in step 6 below.</p> <p>4. Set up an online presence</p> <p>As soon as you start building things, you’ll want to set up an online presence. Your GitHub account will be a great start.</p> <p>This is where you’ll be able to house the projects you are working on and share them with the world.</p> <p>But you want to go further than this. I recommend setting up your own portfolio site.</p> <p>This site will do a few things:</p> <p>- It will serve as a public place to tell potential employers about yourself</p> <p>- It will be another place where you can showcase your work</p> <p>- It will serve as your platform</p> <p>- That last one is huge. Once you start building things, you should immediately start writing about them. Start a simple blog where you share what you are working on and teach everything you know.</p> <p>This is one of the best ways to give potential employers a taste of who you are and what you can do. It’s a way to get your name out there and start building a platform for yourself.</p> <p>This can lead to job opportunities and the possibility to make more income on the side by writing books or freelancing.</p> <p>Your site should serve a very specific purpose.</p> <p>Most people create an online resume, but you should do more. What is your specific goal? Your website should be designed and created around that goal.</p> <p>If you want to get a job working on a certain kind of project or with a certain framework, put that in your site.</p> <p>I recommend having 4 core areas for your site:</p> <p>1. Home page</p> <p>Your home page is the entry point to your site. It should provide a very brief overview about who you are and what you do. And should direct people to go where is most relevant for them.</p> <p>For example, you could have two main buttons. One leading people to your writing section to learn more about web development, and one leading to a hire me page if someone is interested in hiring you.</p> <p>2. Writing</p> <p>This is where your blog and your tutorials will live. Write as much as you can here, and don’t be afraid to share it.</p> <p>3. About</p> <p>A simple about section that goes into more detail about who you are and what you do. Don’t make this a life story. Again, target this section to be relevant towards what you want to do.</p> <p>Rather than talk about your personal life, talk about what led you to web development, your journey so far, and where you want to go. Mention some of your favorite projects and link to them.</p> <p>4. Hire Me</p> <p>An essential part of your site, this is where people will go if they are interested in hiring you as a developer.</p> <p>Make sure to find the right balance between selling yourself and being honest. There may be some overlap between this page and your about page, but this page will be more specific about your skills and what you bring to the table.</p> <p>This page should also have a contact form so people can get in touch.</p> <p>In addition to your own site, start offering to write for other major publications. Then you can provide a link back to your site in the bio section.</p> <p>5. Start teaching everything you know</p> <p>Nathan Barry is a big fan of teaching everything you know. He tells the story of Chris Coyier, founder of CSS Tricks.</p> <p>That site started out as Chris publicly writing about what he was learning so others could follow along. Now it’s one of the biggest web development sites out there.</p> <p>The lesson here is that you don’t have to be the world’s greatest expert to start writing about something and teaching it.</p> <p>In the online business world, there is this idea of the relative expert. It’s the idea that everyone is an expert in something relative to someone else.</p> <p>I have my issues with this, especially when it is used by someone to justify selling something that maybe they shouldn’t be selling. But it is a useful comparison to make.</p> <p>What bothers me is the use of the word expert. I don’t think there is anything wrong with teaching what you know, and even potentially selling that information if it is valuable to someone else.</p> <p>But calling yourself an expert may be taking it too far. So when you write your content, approach it honestly.</p> <p>I prefer the term learning in public.</p> <p>There are many people who got their start by simply being a public learner. They were learning a craft and documenting what they were learning along the way.</p> <p>This is the perfect way to approach teaching everything you know. As you learn more and more, you build up your content, and become a better writer in the process. Over time, others in your industry will start to see you as an authority in your space.</p> <p>This will be invaluable both when it comes to finding a job and if you ever want to strike out on your own.</p> <p>6. Build to solve problems</p> <p>One of the most important aspects of becoming a professional developer is doing everything with a specific intention.</p> <p>It’s one thing to build random apps for fun, it’s another to build apps and sites that solve specific problems.</p> <p>Web development shops aren’t really in the business of coding, they are in the business of solving problems. The coding is just their preferred tool to make that happen.</p> <p>Read any marketing or copywriting book and they will tell you to sell the benefits of your product, not the features.</p> <p>Web developers should market their apps to show how they effectively solve a customer’s problems. And then back up their claims with specific metrics. Customers are generally more responsive to this approach than if the developers talk about the bleeding edge technologies they use.</p> <p>You will be a very attractive prospect for employers if you can demonstrate your programming skills as well as your ability to code with the specific intention of solving problems and making meaningful applications.</p> <p>Think about benefits vs features when you are communicating with potential employers or clients, and when writing the content for your site.</p> <p>Of course, you should also mention your coding proficiency, but most people spend all their time on this. Mention it briefly so potential employers know what you do. If you have a portfolio of effective applications, your coding skills will mostly speak for themselves.</p> <p>7. Take on an apprentice mindset</p> <p>The day you think you have mastered something is the day you stop learning.</p> <p>Adopt the mindset of a lifelong apprentice. There is always more to learn and always more to improve on.</p> <p>This is especially important in the early stages of your career. If you get a part time job or internship or land a role as a junior developer, you need to immediately get in the mindset of learning and growing as much as possible.</p> <p>You should really be doing this right away, even before you have an actual ‘mentor’.</p> <p>In his book, The Art of Work, Jeff Goins talks about the 21st century version of the apprentice-master relationship.</p> <p>Back in medieval times, the relationship was very formal. A master would take on an apprentice for years, and they would slowly start to master their craft until they reached the title of master, at which point they would take on an apprentice.</p> <p>The relationship has changed, but it is still very important to consider yourself an apprentice. The main difference is that now you have to keep an eye out for potential mentors and learning opportunities, and there will be many throughout your journey.</p> <p>In the world of web development, we are constantly on the internet, so this can come in various forms.</p> <p>Books, tutorials, courses, forums, and other forms of learning are all valuable. I think, however, the most valuable form of apprenticeship comes from learning from someone who is currently in the position you want to be in.</p> <p>This is why it is so important to be eager and willing to learn. Getting your first development job is not the end of the journey, it’s the beginning.</p> <p>That is when you will really start learning and exponentially growing your knowledge.</p> <p>8. Learn to collaborate</p> <p>One of the biggest differences between coding as a hobby and coding for a living is learning to collaborate with people.</p> <p>You’ll need to interact and work with peers, bosses, colleagues, clients, partner companies, and all kinds of personalities throughout your career.</p> <p>Learning how to effectively work with other people is important.</p> <p>In the field of web development, communication is key. When a company comes in and tells you what they want, and you aren’t clear about exactly what that looks like, it can cause a lot of problems and headaches in the future.</p> <p>Likewise, if you can’t communicate with the people you work with, your work will suffer and you won’t be able to do your job as well.</p> <p>While you’re still learning, there are a few great ways to do this.</p> <p>Part of this will come when you start teaching everything you know. People will interact with you, sometimes negatively, and you’ll learn how to deal with those situations.</p> <p>I also highly recommend contributing to open source projects. This gives you a taste of what it is like to collaborate on a project where different people may have different ideas on the best way to do things.</p> <p>Contributing to open source projects can be intimidating, but it will do wonders for your development career.</p> <p>Check out this site to get started.</p> <p>Get out there and make a living</p> <p>Being a web developer is hard. It means a life of non-stop learning and adapting to new technologies. It’s one of those careers where you need to be well-versed in not only technology, but business and communication as well.</p> <p>It’s an extremely rewarding path. You get to make things that solve people’s problems and make their lives easier, while making a fantastic living at the same time.</p> <p>There are countless resources to help you learn to code, many of them completely free, but there seems to be a lack of resources helping people make that transition into professional developer.</p> <p>I hope this short guide provided a good road map for you to get started becoming a professional developer.</p> <p>Remember, nothing will happen unless you take action. Build a simple portfolio website, email a few potential employers, write some posts on Medium. Just start doing something.</p> <p>The more you put yourself out there, and the more you do, the sooner you’ll make the shift from amateur to professional.</p>]]></description>
			<content:encoded><![CDATA[<p>5 years ago, Ken was a college dropout who woke up every day at 4 a.m. to drive a forklift. He taught himself to code and kick-started his career by convincing a local web development company to hire him. Ken shares his advice on how to go from a hobbyist to a professional developer.</p> <p>Written and read by Ken Rogers: <a href= "https://twitter.com/KennethARogers">https://twitter.com/KennethARogers</a></p> <p>Ken's original article: <a href= "https://fcc.im/2FeA24K">https://fcc.im/2FeA24K</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript:</p> <p>A few years ago, I was bouncing back and forth between landscaping jobs and restaurant jobs. I had just left college, and didn’t know what I was going to do with my life.</p> <p>I had a lot of ideas, but no direction. During that time, I started teaching myself programming. At first it was a hobby. I thought it was cool to be able to build things using nothing but my brain and some code.</p> <p>But then I started thinking about where my life was going, and saw this as a potential living.</p> <p>At first, I put the idea out of my head. I couldn’t afford real education. I already dropped out of college once because of money, and if I went in for computer science, I’d have to start over.</p> <p>I’d leave with 6 years of school and well over $50,000 in debt if I took that route. So that wasn’t an option.</p> <p>Then I started thinking that I could teach myself web development well enough to get an internship.</p> <p>My initial plan was to introduce myself to a few companies in my town, and ask if they would want to meet with me. I wanted to discuss the potential of me working with them while I was in school. That way I could pay for school and get some experience at the same time.</p> <p>So I got serious about web development.</p> <p>Instead of tinkering I started to build a real portfolio and document my skills.</p> <p>I started becoming active on places like Stack Overflow.</p> <p>I built a few practical applications and put them on GitHub. They were nothing fancy, but they demonstrated that I knew how to code.</p> <p>One company didn’t offer me a part time job. They didn’t say to come back after I had my degree. They offered me a full-time job on a 6 month trial basis as their new Junior Developer.</p> <p>I was over the moon. It turns out that once I got serious and started developing with a purpose, I taught myself quite a bit.</p> <p>I was able to answer their questions. I was able to walk them through the modest applications I had built. And I was able to explain how my projects worked.</p> <p>I stayed at that company for two and a half years, and then took a job as a web developer for the city I live in.</p> <p>View yourself as a lifelong apprentice</p> <p>An important part of my transition into a professional developer role was viewing the time I spent with my previous company as an apprenticeship. I learned as much as I could.</p> <p>The real-world knowledge gained from working at a company is invaluable. Knowing how to work with clients, coworkers, and within constraints is essential. This is something you can only learn in the field.</p> <p>While I may know more now than I did when I first started that job, I’ll never stop viewing myself as an apprentice. One of the requirements for being a great developer is the desire to continue learning. The minute we see ourselves as having mastered a skill is the minute we stop growing.</p> <p>Hemingway said it best:</p> <p>We are all apprentices in a craft where no one ever becomes a master.</p> <p>He was talking about writing, but it applies to development as well.</p> <p>The combination of teaching myself and working for a company has allowed me to learn so much (I’m even writing a book). I understand the technical practice of web development, and also how to go from a hobbyist to a professional. It’s a path that anyone can take, regardless of your time or abilities.</p> <p>To give you some perspective, I was working two jobs at once — one of which involved getting up at 4 a.m. to drive a forklift around.</p> <p>Learning to code as a busy adult takes determination, drive, and a stubborn persistence.</p> <p>Making the transition from Hobbyist to Professional</p> <p>Here’s a process that you can follow. The exact journey will be different for everyone, but there are steps you can take to get you on the right path.</p> <p>1. Realize that you can do this</p> <p>Anyone can teach themselves to be a developer. There’s this idea that being self-taught is something only a certain type of person can do. They’re right in a sense. You need to be self-driven and motivated by something other than immediate payment. But anyone can become this type of person.</p> <p>There’s this idea present in our society that some people are born with certain traits and others aren’t. It’s detrimental to growth, and one of the reasons why so many people feel unfulfilled in life.</p> <p>If you always felt that you either “had it” or you didn’t, it would be very easy to get discouraged.</p> <p>I want to put that myth to bed right now. Anyone can learn to be self-motivated and teach themselves programming. Or start a successful business. Or achieve a long-term goal.</p> <p>It’s not about catching a big break, or being born with the right traits. It’s about perseverance.</p> <p>If you can put your head down, push through the hard times, and commit, you can do anything you want to.</p> <p>That last part is super important, but I want to provide a warning before moving on.</p> <p>People are often too quick to embrace their own successes and the successes of others. It’s known as survivorship bias.</p> <p>There is an element of luck in everything. Sometimes things just work out. For example, I contacted a web development agency and was lucky enough that they happened to be looking for someone at that moment, and I happened to fit what they were looking for.</p> <p>But what is luck?</p> <p>Sure, I was lucky to get that job, but I never would have been lucky if I hadn’t made the decision to teach myself development. And then made the decision to apply to that job.</p> <p>Luck does play a factor, but the myth is that it is all up to luck. You can increase your odds of getting lucky, you just have to be willing to put yourself out there.</p> <p>But luck will never find you if you don’t commit to being great at something.</p> <p>2. Commit to being incredible at your craft</p> <p>One of my biggest weaknesses is that I get bored and distracted. I want to jump into the next project. This tendency will kill your success.</p> <p>It feels like freedom. Being able to bounce between whatever project happens to suit your mood that day, but...</p> <p>It’s a trap! If you take away nothing else from this article, let it be this:</p> <p>The number one key to succeeding in becoming a professional developer is to commit. Commit and never stop until you make it happen.</p> <p>This applies to everything.</p> <p>People stress out about which framework to use. But what matters is picking one and sticking with it. You can transfer and learn new languages and frameworks later.</p> <p>What matters is the problem solving skills you will gain when developing. The ability to think like a developer.</p> <p>I taught myself programming using Laravel, but the company that hired me used CakePHP. It didn’t matter. They knew I could pick up the technical skills required to switch frameworks.</p> <p>Pick a direction and see it through, no matter what. You have to remove the possibility of getting distracted by something else.</p> <p>Few feelings can compare to the relentless pursuit of mastery of a craft.</p> <p>It isn’t easy. Once you learn to ignore distractions, you will notice an increase in enjoyment of your work.</p> <p>Mike Rowe is fond of saying that people shouldn’t start with finding their passion.</p> <p>People are so unhappy because they look for the perfect career. They look for the one that they are passionate about.</p> <p>But passion comes from an unstoppable desire to be incredible at your craft. Once you adopt that mindset, your abilities as a developer will take on a new life.</p> <p>3. Start building things immediately</p> <p>Aspiring developers can get stuck in the trap of reading too much without taking action.</p> <p>Tutorials and books are great for learning the basics. The problem is that they instill a false sense of confidence in the developer.</p> <p>Have you ever finished a programming book and gone to build something on your own only to realize you had no idea how to go about doing it? Then you know what I’m talking about.</p> <p>The solution to this is simple, but not easy.</p> <p>Start building.</p> <p>Make something. Make an app that solves a problem you have in your own life, or that addresses an issue for someone close to you.</p> <p>Make something for fun.</p> <p>Make something and put it out there. Make it open source and put in on GitHub. You aren’t doing it for anyone else, it’s for you, so don’t worry about other people’s opinion of it.</p> <p>Your code will be ugly at first. I look back at some of the code I wrote even a few months ago and want to vomit. But you can’t learn development without building stuff. Books are fantastic, and I am obsessed with reading as many as possible. Then you must apply that knowledge.</p> <p>You’re going to run into issues and you’re going to struggle. That’s good. Those are the times we learn the most.</p> <p>Start off by building things that solve problems, I’ll talk more about that in step 6 below.</p> <p>4. Set up an online presence</p> <p>As soon as you start building things, you’ll want to set up an online presence. Your GitHub account will be a great start.</p> <p>This is where you’ll be able to house the projects you are working on and share them with the world.</p> <p>But you want to go further than this. I recommend setting up your own portfolio site.</p> <p>This site will do a few things:</p> <p>- It will serve as a public place to tell potential employers about yourself</p> <p>- It will be another place where you can showcase your work</p> <p>- It will serve as your platform</p> <p>- That last one is huge. Once you start building things, you should immediately start writing about them. Start a simple blog where you share what you are working on and teach everything you know.</p> <p>This is one of the best ways to give potential employers a taste of who you are and what you can do. It’s a way to get your name out there and start building a platform for yourself.</p> <p>This can lead to job opportunities and the possibility to make more income on the side by writing books or freelancing.</p> <p>Your site should serve a very specific purpose.</p> <p>Most people create an online resume, but you should do more. What is your specific goal? Your website should be designed and created around that goal.</p> <p>If you want to get a job working on a certain kind of project or with a certain framework, put that in your site.</p> <p>I recommend having 4 core areas for your site:</p> <p>1. Home page</p> <p>Your home page is the entry point to your site. It should provide a very brief overview about who you are and what you do. And should direct people to go where is most relevant for them.</p> <p>For example, you could have two main buttons. One leading people to your writing section to learn more about web development, and one leading to a hire me page if someone is interested in hiring you.</p> <p>2. Writing</p> <p>This is where your blog and your tutorials will live. Write as much as you can here, and don’t be afraid to share it.</p> <p>3. About</p> <p>A simple about section that goes into more detail about who you are and what you do. Don’t make this a life story. Again, target this section to be relevant towards what you want to do.</p> <p>Rather than talk about your personal life, talk about what led you to web development, your journey so far, and where you want to go. Mention some of your favorite projects and link to them.</p> <p>4. Hire Me</p> <p>An essential part of your site, this is where people will go if they are interested in hiring you as a developer.</p> <p>Make sure to find the right balance between selling yourself and being honest. There may be some overlap between this page and your about page, but this page will be more specific about your skills and what you bring to the table.</p> <p>This page should also have a contact form so people can get in touch.</p> <p>In addition to your own site, start offering to write for other major publications. Then you can provide a link back to your site in the bio section.</p> <p>5. Start teaching everything you know</p> <p>Nathan Barry is a big fan of teaching everything you know. He tells the story of Chris Coyier, founder of CSS Tricks.</p> <p>That site started out as Chris publicly writing about what he was learning so others could follow along. Now it’s one of the biggest web development sites out there.</p> <p>The lesson here is that you don’t have to be the world’s greatest expert to start writing about something and teaching it.</p> <p>In the online business world, there is this idea of the relative expert. It’s the idea that everyone is an expert in something relative to someone else.</p> <p>I have my issues with this, especially when it is used by someone to justify selling something that maybe they shouldn’t be selling. But it is a useful comparison to make.</p> <p>What bothers me is the use of the word expert. I don’t think there is anything wrong with teaching what you know, and even potentially selling that information if it is valuable to someone else.</p> <p>But calling yourself an expert may be taking it too far. So when you write your content, approach it honestly.</p> <p>I prefer the term learning in public.</p> <p>There are many people who got their start by simply being a public learner. They were learning a craft and documenting what they were learning along the way.</p> <p>This is the perfect way to approach teaching everything you know. As you learn more and more, you build up your content, and become a better writer in the process. Over time, others in your industry will start to see you as an authority in your space.</p> <p>This will be invaluable both when it comes to finding a job and if you ever want to strike out on your own.</p> <p>6. Build to solve problems</p> <p>One of the most important aspects of becoming a professional developer is doing everything with a specific intention.</p> <p>It’s one thing to build random apps for fun, it’s another to build apps and sites that solve specific problems.</p> <p>Web development shops aren’t really in the business of coding, they are in the business of solving problems. The coding is just their preferred tool to make that happen.</p> <p>Read any marketing or copywriting book and they will tell you to sell the benefits of your product, not the features.</p> <p>Web developers should market their apps to show how they effectively solve a customer’s problems. And then back up their claims with specific metrics. Customers are generally more responsive to this approach than if the developers talk about the bleeding edge technologies they use.</p> <p>You will be a very attractive prospect for employers if you can demonstrate your programming skills as well as your ability to code with the specific intention of solving problems and making meaningful applications.</p> <p>Think about benefits vs features when you are communicating with potential employers or clients, and when writing the content for your site.</p> <p>Of course, you should also mention your coding proficiency, but most people spend all their time on this. Mention it briefly so potential employers know what you do. If you have a portfolio of effective applications, your coding skills will mostly speak for themselves.</p> <p>7. Take on an apprentice mindset</p> <p>The day you think you have mastered something is the day you stop learning.</p> <p>Adopt the mindset of a lifelong apprentice. There is always more to learn and always more to improve on.</p> <p>This is especially important in the early stages of your career. If you get a part time job or internship or land a role as a junior developer, you need to immediately get in the mindset of learning and growing as much as possible.</p> <p>You should really be doing this right away, even before you have an actual ‘mentor’.</p> <p>In his book, The Art of Work, Jeff Goins talks about the 21st century version of the apprentice-master relationship.</p> <p>Back in medieval times, the relationship was very formal. A master would take on an apprentice for years, and they would slowly start to master their craft until they reached the title of master, at which point they would take on an apprentice.</p> <p>The relationship has changed, but it is still very important to consider yourself an apprentice. The main difference is that now you have to keep an eye out for potential mentors and learning opportunities, and there will be many throughout your journey.</p> <p>In the world of web development, we are constantly on the internet, so this can come in various forms.</p> <p>Books, tutorials, courses, forums, and other forms of learning are all valuable. I think, however, the most valuable form of apprenticeship comes from learning from someone who is currently in the position you want to be in.</p> <p>This is why it is so important to be eager and willing to learn. Getting your first development job is not the end of the journey, it’s the beginning.</p> <p>That is when you will really start learning and exponentially growing your knowledge.</p> <p>8. Learn to collaborate</p> <p>One of the biggest differences between coding as a hobby and coding for a living is learning to collaborate with people.</p> <p>You’ll need to interact and work with peers, bosses, colleagues, clients, partner companies, and all kinds of personalities throughout your career.</p> <p>Learning how to effectively work with other people is important.</p> <p>In the field of web development, communication is key. When a company comes in and tells you what they want, and you aren’t clear about exactly what that looks like, it can cause a lot of problems and headaches in the future.</p> <p>Likewise, if you can’t communicate with the people you work with, your work will suffer and you won’t be able to do your job as well.</p> <p>While you’re still learning, there are a few great ways to do this.</p> <p>Part of this will come when you start teaching everything you know. People will interact with you, sometimes negatively, and you’ll learn how to deal with those situations.</p> <p>I also highly recommend contributing to open source projects. This gives you a taste of what it is like to collaborate on a project where different people may have different ideas on the best way to do things.</p> <p>Contributing to open source projects can be intimidating, but it will do wonders for your development career.</p> <p>Check out this site to get started.</p> <p>Get out there and make a living</p> <p>Being a web developer is hard. It means a life of non-stop learning and adapting to new technologies. It’s one of those careers where you need to be well-versed in not only technology, but business and communication as well.</p> <p>It’s an extremely rewarding path. You get to make things that solve people’s problems and make their lives easier, while making a fantastic living at the same time.</p> <p>There are countless resources to help you learn to code, many of them completely free, but there seems to be a lack of resources helping people make that transition into professional developer.</p> <p>I hope this short guide provided a good road map for you to get started becoming a professional developer.</p> <p>Remember, nothing will happen unless you take action. Build a simple portfolio website, email a few potential employers, write some posts on Medium. Just start doing something.</p> <p>The more you put yourself out there, and the more you do, the sooner you’ll make the shift from amateur to professional.</p>]]></content:encoded>
			<enclosure length="15342196" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._14_-_How_to_go_from_hobbyist_to_professional_developer.mp3?dest-id=603849" />
			<itunes:duration>15:57</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[5 years ago, Ken was a college dropout who woke up every day at 4 a.m. to drive a forklift. He taught himself to code and kick-started his career by convincing a local web development company to hire him. Ken shares his advice on how to go from a...]]></itunes:subtitle>
			<itunes:summary>5 years ago, Ken was a college dropout who woke up every day at 4 a.m. to drive a forklift. He taught himself to code and kick-started his career by convincing a local web development company to hire him. Ken shares his advice on how to go from a hobbyist to a professional developer.</itunes:summary>
			<itunes:episode>14</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 13 - Ten Rules for Negotiating a Job Offer Part 2</title>
			<itunes:title>Ten Rules for Negotiating a Job Offer Part 2</itunes:title>
			<pubDate>Mon, 15 Jan 2018 22:30:53 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[7bf6faf648db66a1596f268f44423444]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-13-ten-rules-for-negotiating-a-job-offer-part-2]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. In this episode, he explains how anyone can negotiate effectively.</p> <p>Written and Read by Haseeb Qureshi: <a href= "https://twitter.com/hosseeb">https://twitter.com/hosseeb</a></p> <p>Haseeb's original article: <a href= "https://fcc.im/2mBOOea">https://fcc.im/2mBOOea</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>So you’ve maneuvered through the initial offer conversation. You’ve lined up counteroffers from other companies. Now it’s time to enter the actual negotiation.</p> <p>Naturally, this is the part where everything goes horribly wrong.</p> <p>But don’t worry. I’m going to turn you into a superhero negotiator. (Or at least an eccentric billionaire negotiator, which is sometimes better?)</p> <p>Seriously though. In this article, we’re going to deep-dive into the negotiating process, and discuss my final 4 rules on how to negotiate a job offer.</p> <p>If you didn’t read my first 6 rules, you can read them here (or you can just skip ’em and keep reading):</p> <p>Ten Rules for Negotiating a Job Offer</p> <p>When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my…</p> <p>What does it take to be a good negotiator?</p> <p>Most people think negotiating well is just looking the other person in the eye, appearing confident, and asking for tons of money. But being a good negotiator is a lot more subtle than that.</p> <p>What Good Negotiators Sound Like</p> <p>You probably have a friend or family member who’s infamous for refusing to take no for an answer. The kind of person who will march into a department store and bullheadedly argue with the management until they get a purchase refunded.</p> <p>This person seems like they often get what they want. They make you cringe, but perhaps you should try to be more like them.</p> <p>Rest assured, this person is actually a terrible negotiator. They’re good at being difficult and causing a scene, which can sometimes convince a waitress or shift manager to appease them. But this style of negotiating will get you nowhere when negotiating with a business partner (that is, an employer).</p> <p>A good negotiator is empathetic and collaborative. They don’t try to control you or issue ultimatums. Rather, they try to think creatively about how to fulfill both your and their needs.</p> <p>So when you think of negotiating a job offer, don’t imagine haggling over a used car. Think more like negotiating dinner plans with a group of friends, and you’ll fare much better.</p> <p>Slicing up the cake</p> <p>Another important difference between good and bad negotiators is that bad negotiators tend to think of a negotiation as a zero-sum game.</p> <p>Imagine we’re negotiating over a cake. In a zero-sum negotiation if I get one more slice, you get one less. Any gain I make comes at your expense.</p> <p>This seems obviously true with cake, right? So what makes a job negotiation any different?</p> <p>Ah, but it’s not actually true for cake. What if I hate corner pieces and you love them? What if I really like the cherries? What if I’m full and you’re starving, but you’ll agree to treat me to my favorite cake next time?</p> <p>Of course, when I posed the question I didn’t mention anything about cherries or my feelings on corner pieces. It might seem like I just made stuff up.</p> <p>But this is exactly what good negotiators do. They bend the rules. They question assumptions and ask unexpected questions. They dig to find the core what everyone values and look for creative ways to widen the terrain of negotiation.</p> <p>While you were thinking about how to haggle over slices, I’m thinking about how to give both of us more than just half of a cake.</p> <p>Different parties in a negotiation almost always have different value functions. We may value the same things — we both care about cake, after all. But we don’t value them in exactly the same way, so there’s probably a way to give each of us more of what we want.</p> <p>Most people go into a job negotiation thinking they need to stubbornly haggle over salary like slices of cake. They don’t ever stop to ask — hey, what do I actually value? Why do I value it? What does the company value? Why do they value that?</p> <p>There are many dimensions to a job negotiation:</p> <p>- salary<br /> - signing bonuses<br /> - stock<br /> - year-end or performance bonuses<br /> - commuter benefits<br /> - relocation expenses<br /> - equipment<br /> - an educational stipend<br /> - a childcare stipend<br /> - extra vacation time<br /> - a later start date<br /> - getting a dedicated hour a day to work out or study or meditate or play solitaire.</p> <p>You could choose which team you’re assigned to, what your first project will be, what technologies you’ll be working with, and sometimes even choose your title.</p> <p>Maybe you’re a frosting person, and the company is more into cherries. You never know if you don’t ask.</p> <p>Hold onto this mindset.</p> <p>Okay.</p> <p>Let’s pick up the negotiation where we left off. All the offers are in, and recruiters are eagerly waiting for you to get the ball rolling.</p> <p>Let’s start negotiating.</p> <p>Phone VS Email</p> <p>Your first decision is whether you want to negotiate over the phone, or keep correspondence over e-mail.</p> <p>Talking on the phone not only signals confidence, but more importantly, it allows you to build a strong relationship with your recruiter.</p> <p>Talking on the phone enables bantering, telling jokes, and building connection. You want your recruiter to like you, understand you, empathize with you. You want them to want you to succeed. Likewise, you want to care about your recruiter and understand what’s motivating them.</p> <p>The best deals get made between friends. It’s hard to make friends over e-mail.</p> <p>However, if you don’t have confidence in your negotiation skills, you should try to push the negotiation to e-mail. Written, asynchronous communication will give you more time to strategize and make it easier to say uncomfortable things without being pressured by a recruiter.</p> <p>That said, recruiters will always prefer to get you on the phone. It’s essentially their home turf. They’re also well aware that negotiating is easier over e-mail, and they have little interest in making it easier on you. They’ll often be vague about the offer over e-mail and only offer to discuss specific details on the phone.</p> <p>If you want to stick to email, you have to push back against this. There’s no secret to it: just be honest and ask for what you want.</p> <p>Tell them:</p> <p>“Hi recruiter, I hope your day is treating you well!</p> <p>Re: your previous e-mail, I’d prefer to discuss the details of the offer over e-mail. I sometimes get nervous during important phone calls, so discussing the offer over e-mail helps me to keep a clear head and communicate more clearly. I hope this is okay with you. :)”</p> <p>No BS, no huff-puffery. Just telling the truth and asking for what you want.</p> <p>There’s tremendous power in honesty and directness. Take advantage of it.</p> <p>(Also, note how I wrote “discuss the details of the offer” rather than “negotiate.” Never describe what you’re doing as negotiating — that sounds immediately adversarial and haggley. Describe it instead as a discussion, and they’re less likely to recoil.)</p> <p>Having Alternatives</p> <p>I mentioned before how essential it is to have multiple offers. I’ll reiterate again — it’s very, very valuable to have multiple offers.</p> <p>With other offers on the table, if your negotiation doesn’t work out, they know you’ll just accept another offer. Your negotiating position suddenly becomes a lot more credible because they know you’re willing to walk away.</p> <p>This effect is strengthened if you get an offer from a prestigious company. And the effect goes through the roof if you have an offer from a company’s primary competitor (now they’ll really want to poach you from the big bad competitor-corp).</p> <p>Some of this behavior is stupid tribalism. And some part of it is rational in trying to deprive competitors of talent. Either way, take advantage of it, and be tactical in which companies you aim for.</p> <p>But what if you don’t manage to get any other offers? Does all the negotiating just go out the window?</p> <p>Not at all. What’s important here is not actually having other offers. More specifically, it’s in having strong alternatives. Which is why Rule #6 of negotiating is: have alternatives.</p> <p>A negotiation needs stakes. If there were no risk and you knew for sure the other side would sign a contract, what incentive would you have to offer them anything more?</p> <p>Your alternatives are what give a negotiation its stakes. By signaling your alternatives, you allow your interlocutor to develop a mental model of when and why you’ll walk away from the negotiation. Your alternatives also have an anchoring effect on how much the other side thinks you’re objectively worth.</p> <p>In negotiation literature, your best alternative is often referred to as your BATNA (Best Alternative To a Negotiated Agreement). Basically, it’s what you’d do if you walked away.</p> <p>I like the term BATNA a lot, mostly because it sounds like a gadget Batman would lob at bad guys.</p> <p>So what’s your BATNA if you don’t have other offers? Do you even have one?</p> <p>Of course you do. Your best alternative might be “interview at more companies” or “go to grad school” or “stay at your current job” or “go on sabbatical in Morocco for a few months” (as it was for a friend of mine who was deliberating between joining a startup and gallivanting through North Africa).</p> <p>The point is, you don’t need to have another offer to have a strong BATNA.</p> <p>Your BATNA’s strength comes from:</p> <p>- how strong the other side perceives it to be, and<br /> - how strong you perceive it to be.</p> <p>If your recruiter thinks that going to grad school is an awesome thing to do, then they’ll see you as having a very strong alternative, and the stakes of the negotiation will be raised.</p> <p>But even if they think grad school is ridiculous — if you convince them that you’d be totally happy to go to grad school — then the burden is on them to make this deal more attractive to you than going to grad school.</p> <p>Thus, you need to communicate your BATNA. This doesn’t need to be ham-fisted, but you need to make it a background to the negotiation. (Note: usually whenever you signal your BATNA, you should also re-emphasize your interest in reaching an agreement).</p> <p>Examples:</p> <p>“I’ve received another offer from [OTHER CORP] that’s very compelling on salary, but I really love the mission of [YOUR COMPANY] and think that it would overall be a better fit for me.”</p> <p>“I’m also considering going back to grad school and getting a Master’s degree in Postmodern Haberdashery. I’m excited about [YOUR COMPANY] though and would love to join the team, but the package has to make sense if I’m going to forego a life of ironic hatmaking.”</p> <p>Note: one of the biggest mistakes I see here is from people who are currently working. If you already have a job, staying where you are is often your BATNA.</p> <p>This means if you tell your interlocutor that you hate your job, then they know your BATNA sucks, and have no incentive to negotiate with you (on top of potentially thinking that you’re a negative person). Always emphasize the pros of your current company, your seniority, your impact, and whatever else you like about where you currently work.</p> <p>You should make your decision seem like a genuinely difficult one — then it will appear to be a strong BATNA.</p> <p>What a Job Negotiation Means to an Employer</p> <p>I’ve kept saying that in order to be an effective negotiator, you need to understand the other side. So let’s take a look at what it’s like to negotiate as an employer. (I’m going to have to use the tech industry in my examples here, but the details will differ by industry.)</p> <p>First, we have to rewind and understand what brought us to this offer in the first place. What kind of resources have they spent so far in trying to fill this position?</p> <p>- Writing and posting a job description on all appropriate channels ($300)<br /> - Reviewing ~100 or more resumes ($1,250)<br /> - About 15% of those resumes need to be phone screened, so roughly 15 phone screens ($2,250)<br /> - Around 75% of those initial phone screens warrant a technical screen, so roughly 11 technical screens ($9,000)<br /> - About 30% pass through to an on-site, so roughly 3 onsites. These onsites require the coordination of 6–7 employees ($10,800)<br /> - Finally, they make one offer. The recruiter (and potentially the executive staff) need to spend time on the phone with the offeree convincing and negotiating. ($900)</p> <p>Numbers nabbed from here.</p> <p>All-in-all this process took about 45 days from start to finish.</p> <p>Now say you end up turning down their offer. They’ve spent over $24,000 just extending this single offer to you (to say nothing of opportunity costs), and now they’ll essentially have to start over from scratch.</p> <p>This is what a company faces if you turn them down.</p> <p>Realize what a gauntlet they’ve been through!</p> <p>Realize how important it is that you’re the one!</p> <p>Out of the droves and droves who’ve shown up on their doorstep, you’re the one they want. They want to usher you into their tribe. They went through so much crap to get you here, and now they’ve found you.</p> <p>And you’re worried that if you negotiate, they’ll take it away?</p> <p>Further yet, understand that salary is only one part of the cost of employing you. An employer also has to pay for your benefits, your equipment, space, utilities, other random expenses, and employment taxes on top of all of that. All-in, your actual salary often comprises less than 50% of the total cost of employing you.</p> <p>Which means they expect that your value to the company — in terms of the revenue you’ll generate — to be more than 2x your salary. If they didn’t believe that, they wouldn’t be hiring you at all.</p> <p>So, this is all to say: everything is stacked in your favor. It doesn’t feel that way, but it absolutely is.</p> <p>Realize that, while you are agonizing over whether to ask for another few thousand dollars, they’re just praying with bated breath that you’ll sign the offer.</p> <p>If you don’t sign the offer, they lose. Losing a good candidate sucks. No one wants to believe that their company isn’t worth working for.</p> <p>They want to win. They will pay to win.</p> <p>And yet, you might worry: “but if end up negotiating more, won’t they have higher expectations? Won’t my boss end up hating me for negotiating?”</p> <p>No, and no.</p> <p>It’s your role that will determine your performance expectations, not how much you negotiated. Making 5k more or less in salary doesn’t matter at all. Your manager will literally just not care about this.</p> <p>Remember how expensive it is to even employ you in the first place! Nobody’s going to fire you because you’re performing 5K worse than they expected you to. The cost of firing you and hiring someone else is a lot more than 5K to begin with.</p> <p>And no, your boss won’t hate you now. And in fact, at most big companies the person you’re negotiating with won’t even be your boss. Recruiting and management are totally separate departments, completely abstracted from one another. And even if you’re at a startup, trust me that your boss is used to negotiating with candidates and doesn’t place nearly as much significance on it as you do.</p> <p>In short: negotiating is easier and more normal than you think. Companies are completely willing to negotiate with you. If your intuition tells you otherwise, trust that your mental model is wrong.</p> <p>How to Give the First Number</p> <p>In part 1, I mentioned how valuable it is not to have to give the first number. But there are times when you just can’t avoid it. In these situations, there are ways to give the first number without actually giving the first number.</p> <p>If a company asks you “what are your salary expectations?” you might say:</p> <p>“I don’t have any particular numbers in mind. I’m more interested in learning whether this will be a good mutual fit. If it is, I’m open to exploring any offer so long as it’s competitive.”</p> <p>Sounds good. But they push back, “I understand that, but we need to have a clear idea of what you think is competitive. I need to know whether it’s worth going through the interview process. We’re a young startup, so I need to make sure we’re on the same page as far as compensation.”</p> <p>That’s a strong push. But you can still push back.</p> <p>“I completely hear you, and I agree it’s important that we’re on the same page. I really have no particular numbers in my head. It all depends on the fit and the composition of the offer. Once we decide we want to work together, I think that’s the best time to figure out a compensation package that makes sense.”</p> <p>Most employers will relent here. But there’s a small chance they push further: “Okay, look, you’re being difficult. Let’s not waste each other’s time. What’s an offer that you’d be willing to take?”</p> <p>This is a decision point. They’re trying to take away your negotiating power and pin you to a premature decision.</p> <p>That said, you probably will have to say a number at this point, or risk damaging the trust in this relationship. (They are making a valid point that startups can’t offer the same kind of cash as large companies, nor should you expect them to. They might be sensing that you’re not aware of this.)</p> <p>But you can give a number here without actually giving a number.</p> <p>“Well, okay. I know that the average software engineer in Silicon Valley makes roughly 120K a year in salary. So I think that’s a good place to start.”</p> <p>Notice what I did here. I didn’t actually answer the question “what’s an offer you’d be willing to take,” I merely anchored the conversation around the fulcrum of “the average software engineer salary.”</p> <p>So if you’re forced to give a number, do so by appealing to an objective metric, such as an industry average (or your current salary). And make it clear that you’re merely starting the negotiation there, not ending it.</p> <p>How to Ask for More</p> <p>An offer is out there, and now you want to improve it. As always, be direct and ask for what you want. Here are generally the steps you should take.</p> <p>First, reiterate your interest in the company. This is as simple as “I’m really excited about the problems you guys are working on at Evil Corp…”</p> <p>Now frame why you’re asking for more. There are two choices here: you can say that you’re on the fence and that an improvement might convince you, or you can go stronger and say that you’re outright dissatisfied with the offer. Which approach you choose depends on how much leverage you have, how weak the offer is relative to your BATNA, and whether you have other offers (the weaker your negotiating position, generally the more tentative you should be).</p> <p>Either way, be unfailingly polite.</p> <p>If you’re dissatisfied with the offer, you might say something like “I appreciate the work you guys put into constructing this offer. But there were a couple things I was unsatisfied with.”</p> <p>If you want to be more reserved, you can say something like:</p> <p>“The offer you guys extended was strong. Right now my decision is basically between you and [XYZ CORP]. It’s a genuinely difficult decision for me, but there are a couple of dimensions where if this offer improved, it would be much more compelling.”</p> <p>Don’t just say something like “Thanks for the offer. Here are some ways I think it could improve.” This makes you sound like an ass. Be polite, and if you want to strengthen the offer, tell them clearly how you feel about it. This builds trust and conveys seriousness.</p> <p>Let’s say you want to raise the salary. Now that you have a specific ask, it’s time to employ rule #7: proclaim reasons for everything.</p> <p>We all implicitly know the catch-22 of negotiation: if you say you want more salary, you’ll sound greedy. And no one likes greedy people, right? So why would they want to give more money to a greedy person?</p> <p>I suspect this is the primary reason why so many candidates recoil from negotiating. They don’t want to feel greedy. It goes against all of their social conditioning. And yet, there are some situations in which most people would be totally fine negotiating.</p> <p>Specifically, when they have to.</p> <p>If you had to raise your salary or you wouldn’t be able to afford rent, or if you had to negotiate health insurance to cover a medical condition, you’d negotiate without a twinge of regret. The difference? That you have a reason for what you’re requesting.</p> <p>It’s kind of a brain-hack, both for yourself and for your negotiating partner. Just stating a reason — any reason — makes your request feel human and important. It’s not you being greedy, it’s you trying to fulfill your goals.</p> <p>The more unobjectionable and sympathetic your reason, the better. If it’s medical expenses, or paying off student loans, or taking care of family, you’ll bring tears to their eyes. I told employers that I was earning-to-give, so since I was donating 33% of my income to charity, I had tonegotiate aggressively to leave myself enough to live off.</p> <p>But honestly, even if your reason is inane and unimpressive, it will still carry this effect.</p> <p>Just saying “can you improve the salary?” sounds like you’re boringly motivated by money. But if you say “I really want to buy a house within the next year; what can we do to improve the salary?” This suddenly seems a lot more legitimate.</p> <p>If they turn down your request now, they’re implicitly telling you “No, Jennifer, you can’t buy your house. I guess you don’t deserve one.” No one wants to do that. They want to be the one who says, “All right Jennifer, I talked with the director and I made it happen. You’re getting that new house!”</p> <p>(Of course, it goes without saying that you want money so you can spend it on things. I know. It’s stupid. But it works.)</p> <p>Just go with it, state a reason for everything, and you’ll find recruiters more willing to become your advocate.</p> <p>Assert your Value</p> <p>One effective move you can make in a negotiation, especially after an ask, is to emphasize the unique value you’ll be bringing to the company. Example:</p> <p>“Blah blah blah, I want X, Y, and Z.</p> <p>I know that you guys are looking for someone to build out your Android team. I believe I bring a lot of experience leading a team of Android developers and I’m confident that I’ll be able to bring your mobile offerings up to parity with your competitors.</p> <p>Let me know your thoughts.”</p> <p>Be confident without boasting or trying to hold yourself to specific metrics (unless you’re supremely confident). Whatever you assert should be something you’ve touched on earlier in your discussions. But it’s okay to repeat it now as a gentle reminder. It reminds them of the carrot, and shows that you’re still excited to add value.</p> <p>This is not appropriate in every negotiation, especially for very junior positions, where it’s harder to differentiate yourself. But later in your career (or for more specialized/consulting roles) this can be a really valuable nudge.</p> <p>What to Ask For</p> <p>This brings me to rule #8: be motivated by more than just money.</p> <p>Note, this is not code for “if you seem like you’re motivated by more than just money, you’ll get more money.”</p> <p>There is no bigger turn-off to a company than somebody who only cares about money. This is something you’re not going to be able to fake.</p> <p>Actually be motivated by other things. You should be motivated by money, too, of course, but it should be one among many dimensions you’re optimizing for. How much training you get, what your first project will be, which team you join, or even who your mentor will be — these are all things you can and should negotiate.</p> <p>Among these factors, salary is perhaps the least important.</p> <p>What do you really value? Be creative. Don’t try to haggle over slices of cake when there’s so much more on the table.</p> <p>Of course, to negotiate well you need to understand the other side’s preferences. You want to make the deal better for both of you. That’s why rule #9 is: understand what the company values.</p> <p>How do you figure this out? Well, there are a few good rules of thumb.</p> <p>First, salary is almost always the hardest thing to give, for a few reasons:</p> <p>- It must be paid year after year, so it becomes part of a company’s long-term burn rate.<br /> - It is almost always the thing that people gossip about, so paying someone significantly more salary can cause unrest.<br /> - It tends to be the most tightly constrained by pay bands, especially at large companies.</p> <p>So if you want more financial compensation, you should think about structuring as much of it as possible outside of salary. A signing bonus, for example, is easier to give than salary. A signing bonus has the advantage of only needing to be paid once. It gets the candidate excited about joining (because everyone likes wads of cash), and it’s generally not as public.</p> <p>Remember that you can always get salary raises as you continue to work at the company, but there’s only one point at which you can get a signing bonus.</p> <p>The easiest thing for a company to give though is stock (if the company offers stock). Companies like giving stock because it invests you in the company and aligns interests. It also shifts some of the risk from the company over to you and burns less cash.</p> <p>If you are genuinely risk-neutral or early in your career, then you should generally try to assume as much stock as possible. If you aggressively trade cash for stock, you can end up with a higher expected value offer (albeit with higher risk).</p> <p>A Brief Primer on Equity</p> <p>First, understand there are two completely different classes of companies: public companies and private companies.</p> <p>If the company is public (i.e., it has IPO’d and is listed on the stock market), then its stock is as good as cash.</p> <p>You will usually be granted RSUs (Restricted Stock Units), which are just shares like you can purchase on the stock market. Once these shares vest (that is, are released to you), you can turn around and sell them on the stock market. This is how they turn into money.</p> <p>If the company is private, then things get a lot more complicated.</p> <p>For private companies, most of the time they will not actually issue you stock grants. Usually, they will issue you stock options. An option is a pre-agreed right to purchase shares of stock at a frozen price.</p> <p>It’s important to note that when you want to leave a company, if you have options, your life becomes really complicated. You may have to pay a bunch of money to actually exercise your option (that is, buy your pre-agreed upon stock at the previous frozen price, or risk losing it), with no way to actually sell it yet. The only way to truly liquidate your options is when the company IPOs or is acquired. And many companies don’t ever do this.</p> <p>Thus, options are very risky. It’s easier to get screwed by options, especially on tax implications. For a lot more information, see this post by Scott Kupor of a16z.</p> <p>Equity Shenanigans</p> <p>Many companies will try to play mind games with you when it comes to equity. Several companies pulled these on me.</p> <p>A common one is presenting the total value of the stock grant rather than the annualized value, despite the stock not vesting evenly, or vesting over 5 years instead of the standard 4.</p> <p>But the most egregious thing that companies will do is tell you absurd stories about the value of their stock. They’ll say: “okay, we’re worth this much now, but at the rate we’re growing, we’re going to be worth 10X that in a year. So really, the value of your options is many millions of dollars!”</p> <p>To not mince words: this is cynically dishonest BS. Don’t buy it even for a second. I got this a few times, and the only reason I didn’t walk away from the offer immediately was because it was always a recruiter pulling this crap. If it was a manager I would’ve turned down the offer outright.</p> <p>Here’s why this is infuriatingly stupid: a company’s valuation is determined by investors. These investors see the financials and the growth rate of the company, and invest at a price that reflects the current growth rate of the company.</p> <p>In other words, they invested at a valuation that already took their 10x growth rate into account. Investors are not idiots. And unless you (or your recruiter) think you have privileged information or insight that the company’s investors don’t, you should probably take the investors’ word for it.</p> <p>Also, a company’s nominal valuation is almost always inflated due to preferred shares, debt, and survivorship bias. But let’s ignore that for now.</p> <p>So if a company gives you this hock of crap, fire back and tell them thank you, but you’ll be considering the stock at the same valuation their investors valued it at.</p> <p>I mean, be nice. But don’t let them try to strong-arm you into accepting this garbage.</p> <p>A job is not a suicide pact. Choose a company that is judicious and transparent, and you’ll be much more likely to find yourself respected and taken care of.</p> <p>Other things you can ask for</p> <p>Because I’d be remiss if I didn’t point out a few other things.</p> <p>Relocation expenses often come out of separate budgets at big companies, so this is generally very easy to get.</p> <p>Look for creative benefits that would be particularly valuable to you. Maybe it’s covering your commuter expenses, asking for dedicated volunteer or learning time, getting sponsored for conferences, or even charity donation matching.</p> <p>Don’t assume anything’s off the table until you’ve tried bringing it up.</p> <p>That said, don’t throw the entire kitchen sink at them. A negotiation can quickly become cumbersome for an employer if you bring up a litany of changes. Keep the changeset as pithy as you can.</p> <p>Negotiating Jiu Jitsu</p> <p>Recruiters love trying to trick you into ending the negotiation early. They’re going to do this relentlessly. Don’t fault them for it — I suspect they can’t help themselves.</p> <p>Just keep breaking out of their shenanigans. Don’t let yourself be pressured into ending a negotiation until you’re actually ready to make a final decision.</p> <p>This is especially grave if you have multiple offers, and you let one company pressure you into canceling the others. Companies succeed in doing this all the time, so I want to equip you with the skills to jiu jitsu out of these techniques.</p> <p>Here are two situations you can break out of. These are both real situations that happened to me during my negotiations, though the numbers and details are invented.</p> <p>Situation 1:</p> <p>I ask for a 10K increase in signing bonus. The company gets back to me and says, “That’s really tough for us to do. I’m going to try. I think you’re worth it. But I can’t really go to my boss and fight for you unless she knows you’re going to sign. Are you going to sign if I get you that 10K?”</p> <p>You should be thinking: ah, this person is trying to force me to a decision point and take away my negotiating power.</p> <p>I respond, “Okay, so what I’m hearing is that you’ll have to expend some personal reputation to get me a 10K bonus. If you end up going to bat for me, are you confident you’ll be able to get that 10K?”</p> <p>“I think I can, it just comes down to you Haseeb. If you’re serious about joining us, then I’ll go fight for you. But I need to know for sure you’ll sign.”</p> <p>Great. Time to jiu jitsu.</p> <p>“That makes sense. Unfortunately I can’t commit to signing yet; I’m not yet at the stage where I can make a final decision. Like I told you before, this weekend I’m going to sit down with my family and talk things over with them. Choosing the company I’m going to spend the next few years at is a commitment I take really seriously. So I want to be sure I’m making a well-considered decision.</p> <p>“But since you’re confident that you can get an extra 10K, let’s do this instead: in my mind, I’ll pretend this offer is [X + 10K] and as I’m considering my final decision, that’s where I’ll value it. I know it’s tough for you to go and get that from your boss, so I don’t want you to do that until I’m certain I’m going to sign.”</p> <p>They then vaguely recant and promptly get approval for the 10K bonus.</p> <p>Situation 2:</p> <p>I ask for a 20% increase in stock package. The hiring manager, knowing that I’m negotiating with other companies, then fires back: “I want to get this stock package for you. And I know I can, we’ve got the budget. But before I do that, I need your word on something.”</p> <p>“What’s that?”</p> <p>“I need you to give me your word that if I improve your offer, you’re not going to just turn around and take our counter-offer to [COMPETITOR_COMPANY] to improve your offer with them.”</p> <p>You should be thinking: so basically they’re asking me not to negotiate.</p> <p>“Let me see if I understand what you’re saying. You are willing to improve my offer, but only if I agree that I won’t tell [COMPETITOR] what you’re offering me. Is that correct?”</p> <p>“Well no, I can’t legally do that. What I mean is… what I mean is, look. I like you. But if I improve your offer and you just take our offer to [COMPETITOR], you’ll be violating my trust.”</p> <p>“Okay, let me be sure I understand you here. If you give me this offer and I tell [COMPETITOR], I will be violating the trust under which you’re granting me this improved offer. Is that correct?”</p> <p>“Uhh… Look. How about this. In my mind, I’m going to go get you this stock package okay? And in my head, I’m going to do it with the assumption that you’re the kind of person I think you are, and you’re going to consider our offer in its own right and not just shop it around. Fair enough?”</p> <p>I nod. He gets the improved offer. I continue to negotiate. Antics averted.</p> <p>(In case you’re wondering, if he had said “yes,” I would have turned down the proposal.)</p> <p>The Path to Signing</p> <p>It’s not enough to just continually ask for stuff. Companies need to sense that you’re actually moving toward a final decision, and not just playing games with them.</p> <p>Your goal in a negotiation is not to be difficult or elusive. True, you should assert your value and carefully consider your options, but you can do so in a way that’s respectful and considerate toward the companies you’re talking to.</p> <p>Don’t go dark on people. Be open and communicative. I keep saying be honest and I mean it — be honest.</p> <p>Aside: I keep talking about honesty, and you might protest that this is antithetical to my earlier rule of “protect information.” It’s not. True, you should protect information that might weaken your negotiating position, but you should be as communicative as possible about everything else (which is most things).</p> <p>Negotiating is all about relationship, and communication is the bedrock of any relationship.</p> <p>This brings me to the final rule, Rule #10: be winnable. This is more than just giving the company the impression that you like them (which you continually should). But more so that you must give any company you’re talking to a clear path on how to win you. Don’t BS them or play stupid games. Be clear and unequivocal with your preferences and timeline.</p> <p>If there is nothing that a company could do to sign you, or you don’t actually want to work for them, then don’t negotiate with them. Period.</p> <p>Don’t waste their time or play games for your own purposes. Even if the company isn’t your dream company, you must be able to imagine at least some package they could offer you that would make you sign. If not, politely turn them down.</p> <p>It costs each company money to interview you and to negotiate with you. I didn’t negotiate with every company I received an offer from, but if there was one key mistake I made in my job search, it was that I still negotiated with too many (in large part because I didn’t think my job search would be successful).</p> <p>Making the Final Decision</p> <p>Okay, it’s decision time.</p> <p>(Yes, you do have to make one.)</p> <p>Three things to keep in mind here:</p> <p>- be clear about your deadline<br /> - assert your deadline continually<br /> - use your final decision as your trump card</p> <p>When you start negotiating, you don’t have to be clear about your timeline because you probably don’t have one yet. But once you get into intermediary stages, you should set for yourself a deadline on which you’ll sign. It can be for an arbitrary reason (or no reason at all), but just pre-committing to a deadline will allow you to negotiate more clearly and powerfully.</p> <p>“A weekend with the family” I found works nicely, as it has the added benefit of roping other decision makers in. Then when companies push you to end negotiations early, you can re-assert this deadline.</p> <p>Companies should all be totally aware of when you’re going to make your decision. This will raise the stakes and galvanize negotiations as the deadline approaches.</p> <p>This deadline also lets you defer your decision while still improving offers. Your narrative should basically be “I want to see the strongest offer your company can muster. Then I will go into my cave, meditate for 10 days, and when I emerge I will have decided in my heart which company to join.” This gives you enormous power to avoid any on-the-spot decision points or premature promises.</p> <p>Eventually, deadline day will come. Try to make this a business day (say, a Friday or a Monday) so that you can communicate with recruiters during this day. If a hail mary is going to happen, it’ll happen here.</p> <p>Even if there’s only one company in the running, you should always always wait until the last day to sign your offer. Yes, even if you’re certain you’re going to sign and even if it’s your dream job. I’ve seen many scenarios in which offers spontaneously improved as deadlines approached, or a fallen player gets up and presents you the holy grail in the 11th hour. Either way, there’s no harm.</p> <p>Finally, your trump card. Save this for the very end. Your trump card is these words:</p> <p>“If you can do X, I will sign.”</p> <p>Note, this is NOT “If you give me X, the offer will be more compelling blah blah blah.” We’re past that. It’s time to make a promise.</p> <p>Every company that’s still on the table, let them know what it would take to sign you (unless there’s nothing they could do). And when you make the final ask, don’t forget reason-giving, even if it’s the same reason as before!</p> <p>“Hi Joel, I’ve been thinking it over and it’s genuinely a really tough decision for me. I loved everyone at [COMPANY] but the one thing that makes it hard for me is the salary. As you know I’m trying to pay off my student loans so salary is really important to me right now. If you can improve the salary by 10K a year, then I’ll be totally ready to sign.”</p> <p>With luck, they meet you half-way. Or, with a little more luck, they’ll meet all of it.</p> <p>And just because I know someone will ask — yes, once say you’re going to sign, you should always sign. Never go back on your word. It’s a small world. People talk. These kind of things will come back to haunt you. (More importantly, never go back on your word because you’re the kind of person who never goes back on their word.)</p> <p>Tell all of the other parties that you’ve made your final decision. Thank them for the negotiation. If you did it well, they’ll usually thank you back, tell you to keep in touch, and to reach out again in a couple years next time you’re on the market.</p> <p>And that’s it. You did it! Congratulations! You’re still alive, right?</p> <p>… You’re not moving.</p> <p>Well, that’s fine. It’s time to celebrate your new job, you beautiful fool! (Drinks are on you.)</p> <p>If you got some value out of this article, share it with a friend who’d benefit from it. Or better yet, follow me on Twitter and I can be your friend.</p> <p>There’s a lot more in the works.</p> <p>Until next time,</p> <p>—Haseeb</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. In this episode, he explains how anyone can negotiate effectively.</p> <p>Written and Read by Haseeb Qureshi: <a href= "https://twitter.com/hosseeb">https://twitter.com/hosseeb</a></p> <p>Haseeb's original article: <a href= "https://fcc.im/2mBOOea">https://fcc.im/2mBOOea</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>So you’ve maneuvered through the initial offer conversation. You’ve lined up counteroffers from other companies. Now it’s time to enter the actual negotiation.</p> <p>Naturally, this is the part where everything goes horribly wrong.</p> <p>But don’t worry. I’m going to turn you into a superhero negotiator. (Or at least an eccentric billionaire negotiator, which is sometimes better?)</p> <p>Seriously though. In this article, we’re going to deep-dive into the negotiating process, and discuss my final 4 rules on how to negotiate a job offer.</p> <p>If you didn’t read my first 6 rules, you can read them here (or you can just skip ’em and keep reading):</p> <p>Ten Rules for Negotiating a Job Offer</p> <p>When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my…</p> <p>What does it take to be a good negotiator?</p> <p>Most people think negotiating well is just looking the other person in the eye, appearing confident, and asking for tons of money. But being a good negotiator is a lot more subtle than that.</p> <p>What Good Negotiators Sound Like</p> <p>You probably have a friend or family member who’s infamous for refusing to take no for an answer. The kind of person who will march into a department store and bullheadedly argue with the management until they get a purchase refunded.</p> <p>This person seems like they often get what they want. They make you cringe, but perhaps you should try to be more like them.</p> <p>Rest assured, this person is actually a terrible negotiator. They’re good at being difficult and causing a scene, which can sometimes convince a waitress or shift manager to appease them. But this style of negotiating will get you nowhere when negotiating with a business partner (that is, an employer).</p> <p>A good negotiator is empathetic and collaborative. They don’t try to control you or issue ultimatums. Rather, they try to think creatively about how to fulfill both your and their needs.</p> <p>So when you think of negotiating a job offer, don’t imagine haggling over a used car. Think more like negotiating dinner plans with a group of friends, and you’ll fare much better.</p> <p>Slicing up the cake</p> <p>Another important difference between good and bad negotiators is that bad negotiators tend to think of a negotiation as a zero-sum game.</p> <p>Imagine we’re negotiating over a cake. In a zero-sum negotiation if I get one more slice, you get one less. Any gain I make comes at your expense.</p> <p>This seems obviously true with cake, right? So what makes a job negotiation any different?</p> <p>Ah, but it’s not actually true for cake. What if I hate corner pieces and you love them? What if I really like the cherries? What if I’m full and you’re starving, but you’ll agree to treat me to my favorite cake next time?</p> <p>Of course, when I posed the question I didn’t mention anything about cherries or my feelings on corner pieces. It might seem like I just made stuff up.</p> <p>But this is exactly what good negotiators do. They bend the rules. They question assumptions and ask unexpected questions. They dig to find the core what everyone values and look for creative ways to widen the terrain of negotiation.</p> <p>While you were thinking about how to haggle over slices, I’m thinking about how to give both of us more than just half of a cake.</p> <p>Different parties in a negotiation almost always have different value functions. We may value the same things — we both care about cake, after all. But we don’t value them in exactly the same way, so there’s probably a way to give each of us more of what we want.</p> <p>Most people go into a job negotiation thinking they need to stubbornly haggle over salary like slices of cake. They don’t ever stop to ask — hey, what do I actually value? Why do I value it? What does the company value? Why do they value that?</p> <p>There are many dimensions to a job negotiation:</p> <p>- salary - signing bonuses - stock - year-end or performance bonuses - commuter benefits - relocation expenses - equipment - an educational stipend - a childcare stipend - extra vacation time - a later start date - getting a dedicated hour a day to work out or study or meditate or play solitaire.</p> <p>You could choose which team you’re assigned to, what your first project will be, what technologies you’ll be working with, and sometimes even choose your title.</p> <p>Maybe you’re a frosting person, and the company is more into cherries. You never know if you don’t ask.</p> <p>Hold onto this mindset.</p> <p>Okay.</p> <p>Let’s pick up the negotiation where we left off. All the offers are in, and recruiters are eagerly waiting for you to get the ball rolling.</p> <p>Let’s start negotiating.</p> <p>Phone VS Email</p> <p>Your first decision is whether you want to negotiate over the phone, or keep correspondence over e-mail.</p> <p>Talking on the phone not only signals confidence, but more importantly, it allows you to build a strong relationship with your recruiter.</p> <p>Talking on the phone enables bantering, telling jokes, and building connection. You want your recruiter to like you, understand you, empathize with you. You want them to want you to succeed. Likewise, you want to care about your recruiter and understand what’s motivating them.</p> <p>The best deals get made between friends. It’s hard to make friends over e-mail.</p> <p>However, if you don’t have confidence in your negotiation skills, you should try to push the negotiation to e-mail. Written, asynchronous communication will give you more time to strategize and make it easier to say uncomfortable things without being pressured by a recruiter.</p> <p>That said, recruiters will always prefer to get you on the phone. It’s essentially their home turf. They’re also well aware that negotiating is easier over e-mail, and they have little interest in making it easier on you. They’ll often be vague about the offer over e-mail and only offer to discuss specific details on the phone.</p> <p>If you want to stick to email, you have to push back against this. There’s no secret to it: just be honest and ask for what you want.</p> <p>Tell them:</p> <p>“Hi recruiter, I hope your day is treating you well!</p> <p>Re: your previous e-mail, I’d prefer to discuss the details of the offer over e-mail. I sometimes get nervous during important phone calls, so discussing the offer over e-mail helps me to keep a clear head and communicate more clearly. I hope this is okay with you. :)”</p> <p>No BS, no huff-puffery. Just telling the truth and asking for what you want.</p> <p>There’s tremendous power in honesty and directness. Take advantage of it.</p> <p>(Also, note how I wrote “discuss the details of the offer” rather than “negotiate.” Never describe what you’re doing as negotiating — that sounds immediately adversarial and haggley. Describe it instead as a discussion, and they’re less likely to recoil.)</p> <p>Having Alternatives</p> <p>I mentioned before how essential it is to have multiple offers. I’ll reiterate again — it’s very, very valuable to have multiple offers.</p> <p>With other offers on the table, if your negotiation doesn’t work out, they know you’ll just accept another offer. Your negotiating position suddenly becomes a lot more credible because they know you’re willing to walk away.</p> <p>This effect is strengthened if you get an offer from a prestigious company. And the effect goes through the roof if you have an offer from a company’s primary competitor (now they’ll really want to poach you from the big bad competitor-corp).</p> <p>Some of this behavior is stupid tribalism. And some part of it is rational in trying to deprive competitors of talent. Either way, take advantage of it, and be tactical in which companies you aim for.</p> <p>But what if you don’t manage to get any other offers? Does all the negotiating just go out the window?</p> <p>Not at all. What’s important here is not actually having other offers. More specifically, it’s in having strong alternatives. Which is why Rule #6 of negotiating is: have alternatives.</p> <p>A negotiation needs stakes. If there were no risk and you knew for sure the other side would sign a contract, what incentive would you have to offer them anything more?</p> <p>Your alternatives are what give a negotiation its stakes. By signaling your alternatives, you allow your interlocutor to develop a mental model of when and why you’ll walk away from the negotiation. Your alternatives also have an anchoring effect on how much the other side thinks you’re objectively worth.</p> <p>In negotiation literature, your best alternative is often referred to as your BATNA (Best Alternative To a Negotiated Agreement). Basically, it’s what you’d do if you walked away.</p> <p>I like the term BATNA a lot, mostly because it sounds like a gadget Batman would lob at bad guys.</p> <p>So what’s your BATNA if you don’t have other offers? Do you even have one?</p> <p>Of course you do. Your best alternative might be “interview at more companies” or “go to grad school” or “stay at your current job” or “go on sabbatical in Morocco for a few months” (as it was for a friend of mine who was deliberating between joining a startup and gallivanting through North Africa).</p> <p>The point is, you don’t need to have another offer to have a strong BATNA.</p> <p>Your BATNA’s strength comes from:</p> <p>- how strong the other side perceives it to be, and - how strong you perceive it to be.</p> <p>If your recruiter thinks that going to grad school is an awesome thing to do, then they’ll see you as having a very strong alternative, and the stakes of the negotiation will be raised.</p> <p>But even if they think grad school is ridiculous — if you convince them that you’d be totally happy to go to grad school — then the burden is on them to make this deal more attractive to you than going to grad school.</p> <p>Thus, you need to communicate your BATNA. This doesn’t need to be ham-fisted, but you need to make it a background to the negotiation. (Note: usually whenever you signal your BATNA, you should also re-emphasize your interest in reaching an agreement).</p> <p>Examples:</p> <p>“I’ve received another offer from [OTHER CORP] that’s very compelling on salary, but I really love the mission of [YOUR COMPANY] and think that it would overall be a better fit for me.”</p> <p>“I’m also considering going back to grad school and getting a Master’s degree in Postmodern Haberdashery. I’m excited about [YOUR COMPANY] though and would love to join the team, but the package has to make sense if I’m going to forego a life of ironic hatmaking.”</p> <p>Note: one of the biggest mistakes I see here is from people who are currently working. If you already have a job, staying where you are is often your BATNA.</p> <p>This means if you tell your interlocutor that you hate your job, then they know your BATNA sucks, and have no incentive to negotiate with you (on top of potentially thinking that you’re a negative person). Always emphasize the pros of your current company, your seniority, your impact, and whatever else you like about where you currently work.</p> <p>You should make your decision seem like a genuinely difficult one — then it will appear to be a strong BATNA.</p> <p>What a Job Negotiation Means to an Employer</p> <p>I’ve kept saying that in order to be an effective negotiator, you need to understand the other side. So let’s take a look at what it’s like to negotiate as an employer. (I’m going to have to use the tech industry in my examples here, but the details will differ by industry.)</p> <p>First, we have to rewind and understand what brought us to this offer in the first place. What kind of resources have they spent so far in trying to fill this position?</p> <p>- Writing and posting a job description on all appropriate channels ($300) - Reviewing ~100 or more resumes ($1,250) - About 15% of those resumes need to be phone screened, so roughly 15 phone screens ($2,250) - Around 75% of those initial phone screens warrant a technical screen, so roughly 11 technical screens ($9,000) - About 30% pass through to an on-site, so roughly 3 onsites. These onsites require the coordination of 6–7 employees ($10,800) - Finally, they make one offer. The recruiter (and potentially the executive staff) need to spend time on the phone with the offeree convincing and negotiating. ($900)</p> <p>Numbers nabbed from here.</p> <p>All-in-all this process took about 45 days from start to finish.</p> <p>Now say you end up turning down their offer. They’ve spent over $24,000 just extending this single offer to you (to say nothing of opportunity costs), and now they’ll essentially have to start over from scratch.</p> <p>This is what a company faces if you turn them down.</p> <p>Realize what a gauntlet they’ve been through!</p> <p>Realize how important it is that you’re the one!</p> <p>Out of the droves and droves who’ve shown up on their doorstep, you’re the one they want. They want to usher you into their tribe. They went through so much crap to get you here, and now they’ve found you.</p> <p>And you’re worried that if you negotiate, they’ll take it away?</p> <p>Further yet, understand that salary is only one part of the cost of employing you. An employer also has to pay for your benefits, your equipment, space, utilities, other random expenses, and employment taxes on top of all of that. All-in, your actual salary often comprises less than 50% of the total cost of employing you.</p> <p>Which means they expect that your value to the company — in terms of the revenue you’ll generate — to be more than 2x your salary. If they didn’t believe that, they wouldn’t be hiring you at all.</p> <p>So, this is all to say: everything is stacked in your favor. It doesn’t feel that way, but it absolutely is.</p> <p>Realize that, while you are agonizing over whether to ask for another few thousand dollars, they’re just praying with bated breath that you’ll sign the offer.</p> <p>If you don’t sign the offer, they lose. Losing a good candidate sucks. No one wants to believe that their company isn’t worth working for.</p> <p>They want to win. They will pay to win.</p> <p>And yet, you might worry: “but if end up negotiating more, won’t they have higher expectations? Won’t my boss end up hating me for negotiating?”</p> <p>No, and no.</p> <p>It’s your role that will determine your performance expectations, not how much you negotiated. Making 5k more or less in salary doesn’t matter at all. Your manager will literally just not care about this.</p> <p>Remember how expensive it is to even employ you in the first place! Nobody’s going to fire you because you’re performing 5K worse than they expected you to. The cost of firing you and hiring someone else is a lot more than 5K to begin with.</p> <p>And no, your boss won’t hate you now. And in fact, at most big companies the person you’re negotiating with won’t even be your boss. Recruiting and management are totally separate departments, completely abstracted from one another. And even if you’re at a startup, trust me that your boss is used to negotiating with candidates and doesn’t place nearly as much significance on it as you do.</p> <p>In short: negotiating is easier and more normal than you think. Companies are completely willing to negotiate with you. If your intuition tells you otherwise, trust that your mental model is wrong.</p> <p>How to Give the First Number</p> <p>In part 1, I mentioned how valuable it is not to have to give the first number. But there are times when you just can’t avoid it. In these situations, there are ways to give the first number without actually giving the first number.</p> <p>If a company asks you “what are your salary expectations?” you might say:</p> <p>“I don’t have any particular numbers in mind. I’m more interested in learning whether this will be a good mutual fit. If it is, I’m open to exploring any offer so long as it’s competitive.”</p> <p>Sounds good. But they push back, “I understand that, but we need to have a clear idea of what you think is competitive. I need to know whether it’s worth going through the interview process. We’re a young startup, so I need to make sure we’re on the same page as far as compensation.”</p> <p>That’s a strong push. But you can still push back.</p> <p>“I completely hear you, and I agree it’s important that we’re on the same page. I really have no particular numbers in my head. It all depends on the fit and the composition of the offer. Once we decide we want to work together, I think that’s the best time to figure out a compensation package that makes sense.”</p> <p>Most employers will relent here. But there’s a small chance they push further: “Okay, look, you’re being difficult. Let’s not waste each other’s time. What’s an offer that you’d be willing to take?”</p> <p>This is a decision point. They’re trying to take away your negotiating power and pin you to a premature decision.</p> <p>That said, you probably will have to say a number at this point, or risk damaging the trust in this relationship. (They are making a valid point that startups can’t offer the same kind of cash as large companies, nor should you expect them to. They might be sensing that you’re not aware of this.)</p> <p>But you can give a number here without actually giving a number.</p> <p>“Well, okay. I know that the average software engineer in Silicon Valley makes roughly 120K a year in salary. So I think that’s a good place to start.”</p> <p>Notice what I did here. I didn’t actually answer the question “what’s an offer you’d be willing to take,” I merely anchored the conversation around the fulcrum of “the average software engineer salary.”</p> <p>So if you’re forced to give a number, do so by appealing to an objective metric, such as an industry average (or your current salary). And make it clear that you’re merely starting the negotiation there, not ending it.</p> <p>How to Ask for More</p> <p>An offer is out there, and now you want to improve it. As always, be direct and ask for what you want. Here are generally the steps you should take.</p> <p>First, reiterate your interest in the company. This is as simple as “I’m really excited about the problems you guys are working on at Evil Corp…”</p> <p>Now frame why you’re asking for more. There are two choices here: you can say that you’re on the fence and that an improvement might convince you, or you can go stronger and say that you’re outright dissatisfied with the offer. Which approach you choose depends on how much leverage you have, how weak the offer is relative to your BATNA, and whether you have other offers (the weaker your negotiating position, generally the more tentative you should be).</p> <p>Either way, be unfailingly polite.</p> <p>If you’re dissatisfied with the offer, you might say something like “I appreciate the work you guys put into constructing this offer. But there were a couple things I was unsatisfied with.”</p> <p>If you want to be more reserved, you can say something like:</p> <p>“The offer you guys extended was strong. Right now my decision is basically between you and [XYZ CORP]. It’s a genuinely difficult decision for me, but there are a couple of dimensions where if this offer improved, it would be much more compelling.”</p> <p>Don’t just say something like “Thanks for the offer. Here are some ways I think it could improve.” This makes you sound like an ass. Be polite, and if you want to strengthen the offer, tell them clearly how you feel about it. This builds trust and conveys seriousness.</p> <p>Let’s say you want to raise the salary. Now that you have a specific ask, it’s time to employ rule #7: proclaim reasons for everything.</p> <p>We all implicitly know the catch-22 of negotiation: if you say you want more salary, you’ll sound greedy. And no one likes greedy people, right? So why would they want to give more money to a greedy person?</p> <p>I suspect this is the primary reason why so many candidates recoil from negotiating. They don’t want to feel greedy. It goes against all of their social conditioning. And yet, there are some situations in which most people would be totally fine negotiating.</p> <p>Specifically, when they have to.</p> <p>If you had to raise your salary or you wouldn’t be able to afford rent, or if you had to negotiate health insurance to cover a medical condition, you’d negotiate without a twinge of regret. The difference? That you have a reason for what you’re requesting.</p> <p>It’s kind of a brain-hack, both for yourself and for your negotiating partner. Just stating a reason — any reason — makes your request feel human and important. It’s not you being greedy, it’s you trying to fulfill your goals.</p> <p>The more unobjectionable and sympathetic your reason, the better. If it’s medical expenses, or paying off student loans, or taking care of family, you’ll bring tears to their eyes. I told employers that I was earning-to-give, so since I was donating 33% of my income to charity, I had tonegotiate aggressively to leave myself enough to live off.</p> <p>But honestly, even if your reason is inane and unimpressive, it will still carry this effect.</p> <p>Just saying “can you improve the salary?” sounds like you’re boringly motivated by money. But if you say “I really want to buy a house within the next year; what can we do to improve the salary?” This suddenly seems a lot more legitimate.</p> <p>If they turn down your request now, they’re implicitly telling you “No, Jennifer, you can’t buy your house. I guess you don’t deserve one.” No one wants to do that. They want to be the one who says, “All right Jennifer, I talked with the director and I made it happen. You’re getting that new house!”</p> <p>(Of course, it goes without saying that you want money so you can spend it on things. I know. It’s stupid. But it works.)</p> <p>Just go with it, state a reason for everything, and you’ll find recruiters more willing to become your advocate.</p> <p>Assert your Value</p> <p>One effective move you can make in a negotiation, especially after an ask, is to emphasize the unique value you’ll be bringing to the company. Example:</p> <p>“Blah blah blah, I want X, Y, and Z.</p> <p>I know that you guys are looking for someone to build out your Android team. I believe I bring a lot of experience leading a team of Android developers and I’m confident that I’ll be able to bring your mobile offerings up to parity with your competitors.</p> <p>Let me know your thoughts.”</p> <p>Be confident without boasting or trying to hold yourself to specific metrics (unless you’re supremely confident). Whatever you assert should be something you’ve touched on earlier in your discussions. But it’s okay to repeat it now as a gentle reminder. It reminds them of the carrot, and shows that you’re still excited to add value.</p> <p>This is not appropriate in every negotiation, especially for very junior positions, where it’s harder to differentiate yourself. But later in your career (or for more specialized/consulting roles) this can be a really valuable nudge.</p> <p>What to Ask For</p> <p>This brings me to rule #8: be motivated by more than just money.</p> <p>Note, this is not code for “if you seem like you’re motivated by more than just money, you’ll get more money.”</p> <p>There is no bigger turn-off to a company than somebody who only cares about money. This is something you’re not going to be able to fake.</p> <p>Actually be motivated by other things. You should be motivated by money, too, of course, but it should be one among many dimensions you’re optimizing for. How much training you get, what your first project will be, which team you join, or even who your mentor will be — these are all things you can and should negotiate.</p> <p>Among these factors, salary is perhaps the least important.</p> <p>What do you really value? Be creative. Don’t try to haggle over slices of cake when there’s so much more on the table.</p> <p>Of course, to negotiate well you need to understand the other side’s preferences. You want to make the deal better for both of you. That’s why rule #9 is: understand what the company values.</p> <p>How do you figure this out? Well, there are a few good rules of thumb.</p> <p>First, salary is almost always the hardest thing to give, for a few reasons:</p> <p>- It must be paid year after year, so it becomes part of a company’s long-term burn rate. - It is almost always the thing that people gossip about, so paying someone significantly more salary can cause unrest. - It tends to be the most tightly constrained by pay bands, especially at large companies.</p> <p>So if you want more financial compensation, you should think about structuring as much of it as possible outside of salary. A signing bonus, for example, is easier to give than salary. A signing bonus has the advantage of only needing to be paid once. It gets the candidate excited about joining (because everyone likes wads of cash), and it’s generally not as public.</p> <p>Remember that you can always get salary raises as you continue to work at the company, but there’s only one point at which you can get a signing bonus.</p> <p>The easiest thing for a company to give though is stock (if the company offers stock). Companies like giving stock because it invests you in the company and aligns interests. It also shifts some of the risk from the company over to you and burns less cash.</p> <p>If you are genuinely risk-neutral or early in your career, then you should generally try to assume as much stock as possible. If you aggressively trade cash for stock, you can end up with a higher expected value offer (albeit with higher risk).</p> <p>A Brief Primer on Equity</p> <p>First, understand there are two completely different classes of companies: public companies and private companies.</p> <p>If the company is public (i.e., it has IPO’d and is listed on the stock market), then its stock is as good as cash.</p> <p>You will usually be granted RSUs (Restricted Stock Units), which are just shares like you can purchase on the stock market. Once these shares vest (that is, are released to you), you can turn around and sell them on the stock market. This is how they turn into money.</p> <p>If the company is private, then things get a lot more complicated.</p> <p>For private companies, most of the time they will not actually issue you stock grants. Usually, they will issue you stock options. An option is a pre-agreed right to purchase shares of stock at a frozen price.</p> <p>It’s important to note that when you want to leave a company, if you have options, your life becomes really complicated. You may have to pay a bunch of money to actually exercise your option (that is, buy your pre-agreed upon stock at the previous frozen price, or risk losing it), with no way to actually sell it yet. The only way to truly liquidate your options is when the company IPOs or is acquired. And many companies don’t ever do this.</p> <p>Thus, options are very risky. It’s easier to get screwed by options, especially on tax implications. For a lot more information, see this post by Scott Kupor of a16z.</p> <p>Equity Shenanigans</p> <p>Many companies will try to play mind games with you when it comes to equity. Several companies pulled these on me.</p> <p>A common one is presenting the total value of the stock grant rather than the annualized value, despite the stock not vesting evenly, or vesting over 5 years instead of the standard 4.</p> <p>But the most egregious thing that companies will do is tell you absurd stories about the value of their stock. They’ll say: “okay, we’re worth this much now, but at the rate we’re growing, we’re going to be worth 10X that in a year. So really, the value of your options is many millions of dollars!”</p> <p>To not mince words: this is cynically dishonest BS. Don’t buy it even for a second. I got this a few times, and the only reason I didn’t walk away from the offer immediately was because it was always a recruiter pulling this crap. If it was a manager I would’ve turned down the offer outright.</p> <p>Here’s why this is infuriatingly stupid: a company’s valuation is determined by investors. These investors see the financials and the growth rate of the company, and invest at a price that reflects the current growth rate of the company.</p> <p>In other words, they invested at a valuation that already took their 10x growth rate into account. Investors are not idiots. And unless you (or your recruiter) think you have privileged information or insight that the company’s investors don’t, you should probably take the investors’ word for it.</p> <p>Also, a company’s nominal valuation is almost always inflated due to preferred shares, debt, and survivorship bias. But let’s ignore that for now.</p> <p>So if a company gives you this hock of crap, fire back and tell them thank you, but you’ll be considering the stock at the same valuation their investors valued it at.</p> <p>I mean, be nice. But don’t let them try to strong-arm you into accepting this garbage.</p> <p>A job is not a suicide pact. Choose a company that is judicious and transparent, and you’ll be much more likely to find yourself respected and taken care of.</p> <p>Other things you can ask for</p> <p>Because I’d be remiss if I didn’t point out a few other things.</p> <p>Relocation expenses often come out of separate budgets at big companies, so this is generally very easy to get.</p> <p>Look for creative benefits that would be particularly valuable to you. Maybe it’s covering your commuter expenses, asking for dedicated volunteer or learning time, getting sponsored for conferences, or even charity donation matching.</p> <p>Don’t assume anything’s off the table until you’ve tried bringing it up.</p> <p>That said, don’t throw the entire kitchen sink at them. A negotiation can quickly become cumbersome for an employer if you bring up a litany of changes. Keep the changeset as pithy as you can.</p> <p>Negotiating Jiu Jitsu</p> <p>Recruiters love trying to trick you into ending the negotiation early. They’re going to do this relentlessly. Don’t fault them for it — I suspect they can’t help themselves.</p> <p>Just keep breaking out of their shenanigans. Don’t let yourself be pressured into ending a negotiation until you’re actually ready to make a final decision.</p> <p>This is especially grave if you have multiple offers, and you let one company pressure you into canceling the others. Companies succeed in doing this all the time, so I want to equip you with the skills to jiu jitsu out of these techniques.</p> <p>Here are two situations you can break out of. These are both real situations that happened to me during my negotiations, though the numbers and details are invented.</p> <p>Situation 1:</p> <p>I ask for a 10K increase in signing bonus. The company gets back to me and says, “That’s really tough for us to do. I’m going to try. I think you’re worth it. But I can’t really go to my boss and fight for you unless she knows you’re going to sign. Are you going to sign if I get you that 10K?”</p> <p>You should be thinking: ah, this person is trying to force me to a decision point and take away my negotiating power.</p> <p>I respond, “Okay, so what I’m hearing is that you’ll have to expend some personal reputation to get me a 10K bonus. If you end up going to bat for me, are you confident you’ll be able to get that 10K?”</p> <p>“I think I can, it just comes down to you Haseeb. If you’re serious about joining us, then I’ll go fight for you. But I need to know for sure you’ll sign.”</p> <p>Great. Time to jiu jitsu.</p> <p>“That makes sense. Unfortunately I can’t commit to signing yet; I’m not yet at the stage where I can make a final decision. Like I told you before, this weekend I’m going to sit down with my family and talk things over with them. Choosing the company I’m going to spend the next few years at is a commitment I take really seriously. So I want to be sure I’m making a well-considered decision.</p> <p>“But since you’re confident that you can get an extra 10K, let’s do this instead: in my mind, I’ll pretend this offer is [X + 10K] and as I’m considering my final decision, that’s where I’ll value it. I know it’s tough for you to go and get that from your boss, so I don’t want you to do that until I’m certain I’m going to sign.”</p> <p>They then vaguely recant and promptly get approval for the 10K bonus.</p> <p>Situation 2:</p> <p>I ask for a 20% increase in stock package. The hiring manager, knowing that I’m negotiating with other companies, then fires back: “I want to get this stock package for you. And I know I can, we’ve got the budget. But before I do that, I need your word on something.”</p> <p>“What’s that?”</p> <p>“I need you to give me your word that if I improve your offer, you’re not going to just turn around and take our counter-offer to [COMPETITOR_COMPANY] to improve your offer with them.”</p> <p>You should be thinking: so basically they’re asking me not to negotiate.</p> <p>“Let me see if I understand what you’re saying. You are willing to improve my offer, but only if I agree that I won’t tell [COMPETITOR] what you’re offering me. Is that correct?”</p> <p>“Well no, I can’t legally do that. What I mean is… what I mean is, look. I like you. But if I improve your offer and you just take our offer to [COMPETITOR], you’ll be violating my trust.”</p> <p>“Okay, let me be sure I understand you here. If you give me this offer and I tell [COMPETITOR], I will be violating the trust under which you’re granting me this improved offer. Is that correct?”</p> <p>“Uhh… Look. How about this. In my mind, I’m going to go get you this stock package okay? And in my head, I’m going to do it with the assumption that you’re the kind of person I think you are, and you’re going to consider our offer in its own right and not just shop it around. Fair enough?”</p> <p>I nod. He gets the improved offer. I continue to negotiate. Antics averted.</p> <p>(In case you’re wondering, if he had said “yes,” I would have turned down the proposal.)</p> <p>The Path to Signing</p> <p>It’s not enough to just continually ask for stuff. Companies need to sense that you’re actually moving toward a final decision, and not just playing games with them.</p> <p>Your goal in a negotiation is not to be difficult or elusive. True, you should assert your value and carefully consider your options, but you can do so in a way that’s respectful and considerate toward the companies you’re talking to.</p> <p>Don’t go dark on people. Be open and communicative. I keep saying be honest and I mean it — be honest.</p> <p>Aside: I keep talking about honesty, and you might protest that this is antithetical to my earlier rule of “protect information.” It’s not. True, you should protect information that might weaken your negotiating position, but you should be as communicative as possible about everything else (which is most things).</p> <p>Negotiating is all about relationship, and communication is the bedrock of any relationship.</p> <p>This brings me to the final rule, Rule #10: be winnable. This is more than just giving the company the impression that you like them (which you continually should). But more so that you must give any company you’re talking to a clear path on how to win you. Don’t BS them or play stupid games. Be clear and unequivocal with your preferences and timeline.</p> <p>If there is nothing that a company could do to sign you, or you don’t actually want to work for them, then don’t negotiate with them. Period.</p> <p>Don’t waste their time or play games for your own purposes. Even if the company isn’t your dream company, you must be able to imagine at least some package they could offer you that would make you sign. If not, politely turn them down.</p> <p>It costs each company money to interview you and to negotiate with you. I didn’t negotiate with every company I received an offer from, but if there was one key mistake I made in my job search, it was that I still negotiated with too many (in large part because I didn’t think my job search would be successful).</p> <p>Making the Final Decision</p> <p>Okay, it’s decision time.</p> <p>(Yes, you do have to make one.)</p> <p>Three things to keep in mind here:</p> <p>- be clear about your deadline - assert your deadline continually - use your final decision as your trump card</p> <p>When you start negotiating, you don’t have to be clear about your timeline because you probably don’t have one yet. But once you get into intermediary stages, you should set for yourself a deadline on which you’ll sign. It can be for an arbitrary reason (or no reason at all), but just pre-committing to a deadline will allow you to negotiate more clearly and powerfully.</p> <p>“A weekend with the family” I found works nicely, as it has the added benefit of roping other decision makers in. Then when companies push you to end negotiations early, you can re-assert this deadline.</p> <p>Companies should all be totally aware of when you’re going to make your decision. This will raise the stakes and galvanize negotiations as the deadline approaches.</p> <p>This deadline also lets you defer your decision while still improving offers. Your narrative should basically be “I want to see the strongest offer your company can muster. Then I will go into my cave, meditate for 10 days, and when I emerge I will have decided in my heart which company to join.” This gives you enormous power to avoid any on-the-spot decision points or premature promises.</p> <p>Eventually, deadline day will come. Try to make this a business day (say, a Friday or a Monday) so that you can communicate with recruiters during this day. If a hail mary is going to happen, it’ll happen here.</p> <p>Even if there’s only one company in the running, you should always always wait until the last day to sign your offer. Yes, even if you’re certain you’re going to sign and even if it’s your dream job. I’ve seen many scenarios in which offers spontaneously improved as deadlines approached, or a fallen player gets up and presents you the holy grail in the 11th hour. Either way, there’s no harm.</p> <p>Finally, your trump card. Save this for the very end. Your trump card is these words:</p> <p>“If you can do X, I will sign.”</p> <p>Note, this is NOT “If you give me X, the offer will be more compelling blah blah blah.” We’re past that. It’s time to make a promise.</p> <p>Every company that’s still on the table, let them know what it would take to sign you (unless there’s nothing they could do). And when you make the final ask, don’t forget reason-giving, even if it’s the same reason as before!</p> <p>“Hi Joel, I’ve been thinking it over and it’s genuinely a really tough decision for me. I loved everyone at [COMPANY] but the one thing that makes it hard for me is the salary. As you know I’m trying to pay off my student loans so salary is really important to me right now. If you can improve the salary by 10K a year, then I’ll be totally ready to sign.”</p> <p>With luck, they meet you half-way. Or, with a little more luck, they’ll meet all of it.</p> <p>And just because I know someone will ask — yes, once say you’re going to sign, you should always sign. Never go back on your word. It’s a small world. People talk. These kind of things will come back to haunt you. (More importantly, never go back on your word because you’re the kind of person who never goes back on their word.)</p> <p>Tell all of the other parties that you’ve made your final decision. Thank them for the negotiation. If you did it well, they’ll usually thank you back, tell you to keep in touch, and to reach out again in a couple years next time you’re on the market.</p> <p>And that’s it. You did it! Congratulations! You’re still alive, right?</p> <p>… You’re not moving.</p> <p>Well, that’s fine. It’s time to celebrate your new job, you beautiful fool! (Drinks are on you.)</p> <p>If you got some value out of this article, share it with a friend who’d benefit from it. Or better yet, follow me on Twitter and I can be your friend.</p> <p>There’s a lot more in the works.</p> <p>Until next time,</p> <p>—Haseeb</p> <p> </p>]]></content:encoded>
			<enclosure length="33275571" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._13_-_Ten_Rules_for_Negotiating_a_Job_Offer_Part_2.mp3?dest-id=603849" />
			<itunes:duration>34:35</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly...]]></itunes:subtitle>
			<itunes:summary>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. He explains how anyone can negotiate effectively.</itunes:summary>
			<itunes:episode>13</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 12 - Ten Rules for Negotiating a Job Offer</title>
			<itunes:title>Ten Rules for Negotiating a Job Offer</itunes:title>
			<pubDate>Tue, 09 Jan 2018 19:21:03 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[57c07c4547f3a76a0b2899fbd1d82783]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-12-ten-rules-for-negotiating-a-job-offer]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. In this episode, he explains how anyone can negotiate effectively.</p> <p>Written and Read by Haseeb Qureshi: <a href= "https://twitter.com/hosseeb">https://twitter.com/hosseeb</a></p> <p>Haseeb's original article: <a href= "https://fcc.im/2FiLq0v">https://fcc.im/2FiLq0v</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my negotiations. Media stories portrayed me as some kind of master negotiator — a wily ex-poker-player who was able to con the tech giants into a lucrative job offer.</p> <p>This is silly. It’s silly for a lot of reasons, but one of the main ones is that in reality, my negotiation skills are nothing special. There are lots of job candidates who are better negotiators than I, to speak nothing of recruiters and other professional negotiators.</p> <p>It just so happens that most people don’t negotiate at all, or if they do, they negotiate just enough to satisfy themselves that they did.</p> <p>Worse yet, most of the advice out there on negotiation is borderline useless. Almost anything you read on the subject will be a vague and long-winded exhortation to “make sure you negotiate” and “never say the first number.” Beyond those two morsels of advice, you’re pretty much on your own.</p> <p>I thought to myself: why is there so little actionable advice out there about negotiation? I suspect it’s because deep down, many people believe that negotiation is inexplicable, that it’s something some people can do and others can’t, and that there’s no real way to break it down so anyone can learn it.</p> <p>I say that’s BS. Negotiation is a skill that can be learned, just like any other. I don’t believe it’s particularly elusive or hard to understand. So I’m going to try to explain how anyone can do it.</p> <p>Three caveats.</p> <p>First: I’m not an expert. There are people who really are experts at this, and when my advice contradicts theirs, you should assume I’m wrong.</p> <p>Second: negotiation is tricky to generalize about because it’s deeply intertwined with social dynamics and power. The appropriate advice for an Asian male in Silicon Valley may not be appropriate for a black woman in Birmingham, Alabama. Racial, sexual, and political dynamics accompany you to the negotiating table.</p> <p>At the same time, I want to caution against overemphasizing these factors. Being afraid to negotiate out of fear of discrimination can often be just as deleterious as discrimination itself.</p> <p>Ceteris paribus, negotiate aggressively.</p> <p>Third: I’m the first to admit that negotiation is stupid. It’s a practice that inherently benefits those who are good at it, and is an absurd axis on which to reward people. But it’s a reality of our economic system. And like most collective action problems, we’re probably not going to be able to abolish it any time soon. In which case, you might as well improve at it.</p> <p>So here’s my guide to negotiation. It’s going to be split into two parts: this first part will be about conceptualizing the negotiating process, about how to begin the process and set yourself up for maximal success. The second part will be advice on the actual back-and-forth portion of negotiating and how to ask for what you want.</p> <p>Let’s take it from the top.</p> <p>What it means to “get a job”</p> <p>In our culture we call entering the employment market “trying to get a job.” This is an unfortunate turn of phrase. “Getting a job” implies that jobs are a resource out in the world, and you’re attempting to secure one of these resources. But that’s completely backwards. What you are actually doing is selling your labor, and a company is bidding for it.</p> <p>Employment is just striking a mutual deal in the labor market.</p> <p>Like any market, the labor market only functions well if it’s competitive. This is the only way to ensure fair and equitable pricing. Imagine you were a farmer selling watermelons. Would you just sell your watermelons to the first buyer who agreed to purchase them? Or would you survey the marketplace of buyers, see the best price (and business partner) you could get, and then make an informed decision on which buyer to sell to?</p> <p>And yet, when people talk about the labor market, they think “oh, a company wants to give me a job! What a relief!” As though having a job were in itself some special privilege for which a company is the gatekeeper.</p> <p>Dispel yourself of this mindset.</p> <p>A job is just a deal. It is a deal between you and a company to exchange labor for money (and other things you value).</p> <p>This might sound like an abstract point, but you should absolutely approach negotiation from this perspective.</p> <p>The role of negotiation</p> <p>Negotiating is a natural and expected part of the process of trying to make a deal. It’s also a signal of competence and seriousness. Companies generally respect candidates who negotiate, and most highly attractive candidates negotiate (if for no other reason, because they often have too many options to choose from).</p> <p>At the risk of spouting truisms: always, always negotiate. It doesn’t matter how good or bad you think you are. You never damage a relationship by negotiating.</p> <p>In all my time as an instructor at App Academy, out of hundreds of offers negotiated, only once or twice were offers ever rescinded in negotiations. It basically never happens. And when it does, usually the candidate was being an unconscionable asshole, or the company was imploding and needed an excuse to rescind the offer.</p> <p>You might think to yourself: “well, I don’t want to set high expectations, and the offer is already generous, so I ought to just take it.”</p> <p>No. Negotiate.</p> <p>Or maybe: “I don’t want to start off on the wrong foot and look greedy with my future employer.”</p> <p>No. Negotiate.</p> <p>“But this company is small and — “</p> <p>No. Shut up. Negotiate.</p> <p>We’ll talk more in the next section about why a lot of these objections are BS, and fundamentally misapprehend the dynamics of hiring. But for now, just trust me that you should always negotiate.</p> <p>The ten rules of negotiating<br /> I’ve tried to boil down negotiation to ten rules. The rules, in order of appearance, are:</p> <p>- Get everything in writing<br /> - Always keep the door open<br /> - Information is power<br /> - Always be positive<br /> - Don’t be the decision maker<br /> - Have alternatives<br /> - Proclaim reasons for everything<br /> - Be motivated by more than just money<br /> - Understand what they value<br /> - Be winnable</p> <p>We’ll only get through some of these in this blog post, and the rest will appear in the second part. But I’ll explain each rule as we get to it.</p> <p>So let’s start from the top and try to walk through a negotiation process from the very beginning. For most, that starts when you receive an offer.</p> <p>The offer conversation</p> <p>You’ve just received the phone call: your interview went well, and after much deliberation they decided they like you. They want to make you an offer. Congratulations!</p> <p>Don’t get too excited though. The fun is just getting started.</p> <p>Thank your recruiter. Sound excited — hopefully this won’t be hard. Before jumping into details, try to ask for specific feedback on your interview performance. If they give it to you, this will help you gauge how much they want you, as well as tell you things you can improve on in your next interview(s).</p> <p>Now time to explore the offer.</p> <p>Rule #1 of negotiating: have everything in writing.</p> <p>Eventually, they’ll give you information about the offer. Write it all down. Doesn’t matter if they’re going to send you a written version later, write everything down. Even if there are things that are not directly monetary, if they relate to the job, write them down. If they tell you “we’re working on porting the front-end to Angular,” write that down. If they say they have 20 employees, write that down. You want as much information as you can. You’ll forget a lot of this stuff, and it’s going to be important in informing your final decision.</p> <p>Depending on the company, they’ll also tell you about the equity package. We’ll look more specifically at equity in part II, but be sure to write everything down.</p> <p>The rule from here on out is that everything significant you discuss will have some kind of a paper trail. Often, the company won’t even send you an official offer letter until a deal is finalized. So it falls to you to confirm all of the important details in subsequent e-mails.</p> <p>So yadda yadda, lots of details, writing stuff down, oh there’s a joke, time to laugh. Now the recruiter is done talking and you’re done asking all of your questions.</p> <p>Your recruiter will now say something along the lines of “so what do you think?”</p> <p>This seems innocuous, but your reply here is critical, because there’s a lot you can say to weaken your position. This is your first decision point.</p> <p>A decision point is a moment in the negotiation where your interlocutor wants to compel you to make a decision. If they succeed in tying you to a position, they will close the door on further negotiating. Of course “what do you think?” is a subtle prod. But it is the beginning of many attempts to get you to make a premature commitment.</p> <p>This leads to rule #2 of negotiating: always keep the door open. Never give up your negotiating power until you’re absolutely ready to make an informed, deliberate final decision.</p> <p>This means your job is to traverse as many of these decision points as possible without giving up the power to continue negotiating. Very frequently, your interlocutor will try to trick you into making a decision, or tie you to a decision you didn’t commit to. You must keep verbally jiu-jitsu-ing out of these antics until you’re actually ready to make your final decision.</p> <p>Protecting information</p> <p>There’s an uncomfortable silence by now, and their “what do you think?” is hanging in the air.</p> <p>If you say “yes, that sounds amazing, when do I start?” you implicitly accept the offer and completely close the door on the negotiation. This is your recruiter’s number one favorite thing to hear. It stands to reason you probably shouldn’t do this.</p> <p>But their second favorite thing to hear you say is “can you do 90K instead of 85K?” This also closes the door, but for a different and more subtle reason. And it’s the number one reason why most people suck at negotiation.</p> <p>Rule #3 of negotiating: information is power. To protect your power in the negotiation, you must protect information as much as possible.</p> <p>A company doesn’t give you insight into what it’s thinking. It doesn’t tell you its price range, how much it paid the previous candidate with your experience, or anything like that. It intentionally obfuscates those things. But it wants you not to do the same.</p> <p>A company wants to be like a bidder in a secret auction. But unlike the other bidders, it wants to know exactly how high all of the other bids are. It then openly intends to exploit that knowledge, often by bidding one cent more than the second highest bid.</p> <p>Yeah, no. Screw that. It’s a silent auction, and to keep it that way, you must protect information.</p> <p>In many situations, the only reason why you have any negotiating power at all is because the employer doesn’t actually know what you’re thinking. They might not know how good your other offers are, or how much you were making in your last job, or how you weigh salary vs equity, or even how rational you are as a decision-maker. Bottom line, you want them to be uncertain on exactly what it would take to sign you.</p> <p>When you say “can you do 90K instead of 85K,” you’ve told them exactly what it will take to make you sign. The sheet’s pulled back, the secret auction is up, and they’re going to bid 90K (or more likely, 87K). And they know there’s almost no risk in doing so, because you’ll probably accept.</p> <p>What if you were the kind of person who wouldn’t even consider an offer below 110K? Or the kind of person who wouldn’t consider an offer below 120K? If you were, you wouldn’t ask for 90K, and if they offered it as conciliation, you’d tell them to stop wasting your time.</p> <p>By staying silent, they don’t actually know which of those kinds of people you are. In their mind, you could be any of the three.</p> <p>A corollary of this rule is that you should not reveal to companies what you’re currently making. There are some exceptions, but as a rule you should assume this. If you must divulge what you’re making, you should be liberal in noting the total value of your package (incorporate bonuses, unvested stock, nearness to promotion etc.), and always mention it in a context like “[XYZ] is what I’m currently making, and I’m definitely looking for a step up in my career for my next role.”</p> <p>Companies will ask about your current compensation at different stages in the process — some before they ever interview you, some after they decide to make you an offer. But be mindful of this, and protect information.</p> <p>So given this offer, don’t ask for more money or equity or anything of the sort. Don’t comment on any specific details of the offer except to clarify them.</p> <p>Give away nothing. Retain your power.</p> <p>Say instead:</p> <p>“Yeah, [COMPANY_NAME] sounds great! I really thought this was a good fit, and I’m glad that you guys agree. Right now I’m talking with a few other companies so I can’t speak to the specific details of the offer until I’m done with the process and get closer to making a decision. But I’m sure we’ll be able to find a package that we’re both happy with, because I really would love to be a part of the team.”</p> <p>Think like the watermelon farmer. This offer is just the first businessman who’s stopped by your watermelon patch, glanced over your crops, and announced “I’ll take all of these right now for $2 a melon.”</p> <p>Cool. It’s a big market, and you’re patient — you’re a farmer after all. Just smile and tell them you’ll keep their offer in mind.</p> <p>And this is super important: always be unequivocally positive.</p> <p>The importance of positivity</p> <p>Staying positive is rule #4 of negotiation. Even if the offer sucks, it’s extremely important to remain positive and excited about the company. This is because your excitement is one of your most valuable assets in a negotiation.</p> <p>A company is making you an offer because they think you’ll do hard work for them if they pay you. If you lose your excitement for the company during the interview process, then they’ll lose confidence that you’ll actually want to work hard or stay there for a long time. Each of those makes you less attractive as an investment. Remember, you are the product! If you become less excited, then the product you’re selling actually loses value.</p> <p>Imagine you were negotiating with someone over buying your watermelons, but the negotiation took so long that by the time you’d reached an agreement, your watermelons had gone bad.</p> <p>Companies are terrified of that. They don’t want their candidates to go bad during a negotiation. Hence why they hire professional recruiters to manage the process and make sure they remain amicable. You and the recruiter share the same interest in that regard. If a company feels like you’ve gone bad, suddenly they’re a lot less willing to pay for you.</p> <p>So despite whatever is happening in the negotiation, give the company the impression that 1) you still like the company, and that 2) you’re still excited to work there, even if the numbers or the money or the timing is not working out. Generally the most convincing thing to signal this is to reiterate you love the mission, the team, or the problem they’re working on, and really want to see things work out.</p> <p>Don’t be the decision-maker</p> <p>You can wrap up the conversation now by saying:</p> <p>“I’ll look over some of these details and discuss it with my [FAMILY / CLOSE_FRIENDS / SIGNIFICANT_OTHER]. I’ll reach out to you if I have any questions. Thanks so much for sharing the good news with me, and I’ll be in touch!”</p> <p>So not only are you ending the conversation with the power all in your hands, but note there’s another important move here: you’re roping in other decision-makers.</p> <p>Rule #5 of negotiation: don’t be the decision-maker. Even if you don’t particularly care what your friends/family/husband/mother thinks, by mentioning them, you’re no longer the only person the recruiter needs to win over. There’s no point in them trying to bully and intimidate you; the “true decision-maker” is beyond their reach.</p> <p>This is a classic technique in customer support and remediation. It’s never the person on the phone’s fault, they’re just some poor schmuck doing their job. It’s not their decision to make. This helps to defuse tension and give them more control of the situation.</p> <p>It’s much harder to pressure someone if they’re not the final decision-maker. So take advantage of that.</p> <p>Okay!</p> <p>We have our first offer. Send a follow-up e-mail confirming all of the details you discussed with your recruiter so you have a paper trail. Just say “just wanted to confirm I had all the details right.”</p> <p>Groovy. Next step is to leverage this to land other offers and find the best deal we can find in the job market.</p> <p>Getting other offers</p> <p>Turns out, it doesn’t matter that much where your first offer is from, or even how much they’re offering you. Just having an offer in hand will get the engine running.</p> <p>If you’re already in the pipeline with other companies (which you should be if you’re doing it right), you should proactively reach out and let them know that you’ve just received an offer. Try to build a sense of urgency. Regardless of whether you know the expiration date, all offers expire at some point, so take advantage of that.</p> <p>“Hello [PERSON], I just wanted to update you on my own process. I’ve just received an offer from [COMPANY] which is quite strong. That said, I’m really excited about [YOUR AMAZING COMPANY] and really want to see if we can make it work. Since my timeline is now compressed, is there anything you can do to expedite the process?”</p> <p>Should you specifically mention the company that gave you an offer? Depends. If it’s a well-known company or a competitor, then definitely mention it. If it’s a no-name or unsexy company, you should just say you received an offer. If it’s expiring soon, you should mention that as well.</p> <p>Either way, send out a letter like this to every single company you’re talking to. No matter how hopeless or pointless you think your application is, you want to send this signal to everyone who is considering you in the market.</p> <p>Second, if there are any other companies you are looking to apply to (whether through referral or cold application), or even companies at which you’ve already applied but haven’t heard back, I would also follow up with a similar e-mail.</p> <p>So why do this? Isn’t this tacky, annoying, or even desperate?</p> <p>None of the above. It is the oldest method in history to galvanize a marketplace — show that supplies are limited and build urgency. Demand breeds demand. Not every company will respond to this, but many will.</p> <p>Isn’t it stupid that companies respond to this though?</p> <p>Why companies care about other offers</p> <p>When I wrote about the story of my own job search, I mentioned how having an offer from Google made companies turn around and expedite me through their funnels. Many commentators lamented at the capriciousness of these companies. If Uber or Twitch only talked to me because of Google and until then weren’t willing to look at me, what did that say about their hiring processes? What legitimately are they evaluating, if anything at all?</p> <p>I think this response is totally backwards. The behavior of tech companies here is actually very rational, and you would do well to understand it.</p> <p>First, you must realize what a company’s goal is. A company’s goal is to hire someone who will become an effective employee and produce more value than their cost. How do you figure out who will do that? Well, you can’t know for certain without actually hiring them, but there are a few proxies. Pedigree is the strongest signal; if they did it at other companies, they can probably do it at yours. And if someone trusted within the organization can vouch for them, that’s often a strong signal as well.</p> <p>But turns out, almost everything else is a weak signal. Weak in the sense that it’s just not very reliable. Interviews, if you think about it, are long, sweaty, uncomfortable affairs that only glancingly resemble actual employment. They’re weird and can’t tell you that much about whether an individual will be good at their job. There’s no way around this. There are a few stronger signals, like bringing someone in for a week or two on a contract-to-hire position, but strong candidates won’t consider this. So candidates as a whole have effectively forced companies to assume almost all of the risk in hiring.</p> <p>The truth is, knowing that someone has passed your interview just doesn’t say that much about whether they’ll be a good employee. It’s as though you knew nothing about a student other than their SAT score. It’s just not a lot of data to go off.</p> <p>Nobody has solved this problem. Not Google nor anyone else.</p> <p>And this is precisely why it’s rational for companies to care that you’ve received other offers. They care because each company knows that their own process is noisy, and the processes of most other companies are also noisy. But a candidate having multiple offers means that they have multiple weak signals in their favor. Combined, these converge into a much stronger signal than any single interview. It’s like knowing that a student has a strong SAT score, and GPA, and won various scholarships. Sure, it’s still possible that they’re a dunce, but it’s much harder for that to be true.</p> <p>This is not to say that companies respond proportionally to these signals, or that they don’t overvalue credentials and brands. They do. But caring about whether you have other offers and valuing you accordingly is completely rational.</p> <p>So this is all to say — tell other companies that you’ve received offers. Give them more signal so that they know you’re a valued and compelling candidate. And understand why this changes their mind about whether to interview you.</p> <p>As you continue interviewing, remember to keep practicing your interview skills. The single strongest determinant of your final offer will be the number and strength of offers that you receive.</p> <p>Some advice on timing</p> <p>You want to be strategic about the timing of your offers. Generally, you should try to start interviewing at larger companies earlier. Their processes are slower and their offer windows are wider (meaning they allow you more time to decide). Startups are the other way around.</p> <p>Your goal should be to have as many offers overlapping at the same time as possible. This will maximize your window for negotiating.</p> <p>When you receive an offer, often the first thing you should ask for is more time to make your decision. Especially in your first offer, more time is by far the most valuable thing you can ask for. It’s time that enables you to activate other companies and end up with the strongest possible offer. So be prepared to fight for time.</p> <p>How to approach exploding offers</p> <p>Hoo boy.</p> <p>Exploding offers are offers that expire within 24–72 hours. You won’t see this much at big companies, but they’re becoming increasingly common among startups and mid-sized companies.</p> <p>Exploding offers suck, and I share most people’s disdain for this practice. But I do understand it. Exploding offers are a natural weapon for employers to combat a strong hiring market for tech workers. Companies know exactly what they’re doing with exploding offers — they play on fear and limit your ability to seek out counteroffers.</p> <p>In a sense, it’s unsurprising that if startups have more difficulty attracting and securing talent, they’d resort to this practice. What I don’t like is the dishonesty about it. Employers often justify this by saying:</p> <p>“If you need more time than this, then that’s a sign you’re not the kind of person we’re looking for.”</p> <p>Please don’t buy this crap or feel guilty over it. They’re simply doing this to improve their chance of closing candidates. Needing more than three days to make a life decision isn’t a sign of anything other than thoughtfulness.</p> <p>So what should you do if you receive an exploding offer?</p> <p>Exploding offers are anathema to your ability to effectively navigate the labor market. Thus, there is only one thing to do. Treat the offer as a non-offer unless the expiration window is widened.</p> <p>In no uncertain terms, convey that if the offer is exploding, it’s useless to you.</p> <p>Example conversation:</p> <p>“I have one big concern. You mentioned that this offer explodes in 48 hours. I’m afraid this doesn’t work at all for me. There’s no way that I can make a decision on this offer within a 48 hour window. I’m currently wrapping up my interview process at a few other companies, which is likely to take me another week or so. So I’m going to need more time to make an informed decision.”</p> <p>If they push back and say this is the best they can do, then politely reply:</p> <p>“That’s really unfortunate. I like [YOUR COMPANY] and was really excited about the team, but like I said, there’s no way I can consider this offer. 48 hours is just too unreasonable of a window. The next company I join will be a big life decision for me, and I take my commitments very seriously. I also need to consult with my [EXTERNAL_DECISION_MAKER]. There’s no way that I can make a decision I’m comfortable with in this short an amount of time.”</p> <p>Pretty much any company will relent at this point. If they persist, don’t be afraid to walk away over it. (They probably won’t let that happen, and will come grab you as you’re walking out the door. But if they don’t, then honestly, screw ‘em.)</p> <p>I was given several exploding offers during my job search. And every time, I did essentially this. Every single offer immediately widened to become more reasonable, sometimes by several weeks.</p> <p>I want to emphasize, lest I be misunderstood here — what I’m saying is not to just silently let an exploding offer expire, and assume that everything will be fine and they’ll still hire you. They won’t. For exploding offers to be a credible weapon, a company has to have a reputation of enforcing them. I’m saying explicitly call this out as an issue when they make the offer.</p> <p>Don’t let a company bully you into giving away your negotiating power.</p> <p>The Negotiating Mindset</p> <p>Before we enter into the actual back-and-forth, I want to examine the mindset you should have as a negotiator. This applies not just to how you approach the conversation, but also to how you think about the company.</p> <p>Do not fall into the trap of valuing companies solely along one dimension. That means don’t just value companies based on salary, equity, or even on prestige. Those are all important dimensions, but so are cultural fit, the challenge of the work, learning potential, later career options, quality of life, growth potential, and just overall happiness. None of these inherently trump any of the other. Anyone who tells you “just choose wherever you think you’ll be happiest” is being just as simplistic as someone who says “just choose the one that offers the most money.” All of these things matter, and your decision should be genuinely multi-dimensional.</p> <p>Be open to being surprised as you explore different companies.</p> <p>It’s also important to understand that companies don’t all value you along the same dimension either. That is, different companies are genuinely looking for different skills, and there are some companies at which you will be more and less valuable. Even at peer companies this is true, especially so if you have a specialized skill-set.</p> <p>The more companies you talk to, the more likely you are to find a company to which you are significantly more valuable than the rest. Chances are this is where you’ll be able to negotiate your strongest offer. It might surprise you which company this turns out to be; keep an open mind, and remember that a job search is a 2-sided process.</p> <p>One of the most valuable things you can do for yourself in this process is to really try to understand how employers think and what motivates them. Understanding your interlocutor is extremely important in negotiation, and we’ll be exploring that a lot in the next blog post.</p> <p>But most of all I want to emphasize: be curious about the other side. Try to understand why employers think the way they do. Be sympathetic toward them. Care about what they want and help them try to get it. Adopting this mindset will make you a much stronger negotiator, and accordingly, a much better employee and team member.</p> <p>Okay. That’s as far as we’re going for today. In the next blog post, I’m going to cover the last four rules of negotiation. I’ll also go over the actual back-and-forth process — how to ask for what you want, how to strengthen offers, and how to dismantle the tricks that companies will try to pull on you. Also a lot more on the theory of negotiation, which I really dig.</p>]]></description>
			<content:encoded><![CDATA[<p>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. In this episode, he explains how anyone can negotiate effectively.</p> <p>Written and Read by Haseeb Qureshi: <a href= "https://twitter.com/hosseeb">https://twitter.com/hosseeb</a></p> <p>Haseeb's original article: <a href= "https://fcc.im/2FiLq0v">https://fcc.im/2FiLq0v</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>When the story of how I landed a job at Airbnb went viral, I was surprised at how infatuated people were with my negotiations. Media stories portrayed me as some kind of master negotiator — a wily ex-poker-player who was able to con the tech giants into a lucrative job offer.</p> <p>This is silly. It’s silly for a lot of reasons, but one of the main ones is that in reality, my negotiation skills are nothing special. There are lots of job candidates who are better negotiators than I, to speak nothing of recruiters and other professional negotiators.</p> <p>It just so happens that most people don’t negotiate at all, or if they do, they negotiate just enough to satisfy themselves that they did.</p> <p>Worse yet, most of the advice out there on negotiation is borderline useless. Almost anything you read on the subject will be a vague and long-winded exhortation to “make sure you negotiate” and “never say the first number.” Beyond those two morsels of advice, you’re pretty much on your own.</p> <p>I thought to myself: why is there so little actionable advice out there about negotiation? I suspect it’s because deep down, many people believe that negotiation is inexplicable, that it’s something some people can do and others can’t, and that there’s no real way to break it down so anyone can learn it.</p> <p>I say that’s BS. Negotiation is a skill that can be learned, just like any other. I don’t believe it’s particularly elusive or hard to understand. So I’m going to try to explain how anyone can do it.</p> <p>Three caveats.</p> <p>First: I’m not an expert. There are people who really are experts at this, and when my advice contradicts theirs, you should assume I’m wrong.</p> <p>Second: negotiation is tricky to generalize about because it’s deeply intertwined with social dynamics and power. The appropriate advice for an Asian male in Silicon Valley may not be appropriate for a black woman in Birmingham, Alabama. Racial, sexual, and political dynamics accompany you to the negotiating table.</p> <p>At the same time, I want to caution against overemphasizing these factors. Being afraid to negotiate out of fear of discrimination can often be just as deleterious as discrimination itself.</p> <p>Ceteris paribus, negotiate aggressively.</p> <p>Third: I’m the first to admit that negotiation is stupid. It’s a practice that inherently benefits those who are good at it, and is an absurd axis on which to reward people. But it’s a reality of our economic system. And like most collective action problems, we’re probably not going to be able to abolish it any time soon. In which case, you might as well improve at it.</p> <p>So here’s my guide to negotiation. It’s going to be split into two parts: this first part will be about conceptualizing the negotiating process, about how to begin the process and set yourself up for maximal success. The second part will be advice on the actual back-and-forth portion of negotiating and how to ask for what you want.</p> <p>Let’s take it from the top.</p> <p>What it means to “get a job”</p> <p>In our culture we call entering the employment market “trying to get a job.” This is an unfortunate turn of phrase. “Getting a job” implies that jobs are a resource out in the world, and you’re attempting to secure one of these resources. But that’s completely backwards. What you are actually doing is selling your labor, and a company is bidding for it.</p> <p>Employment is just striking a mutual deal in the labor market.</p> <p>Like any market, the labor market only functions well if it’s competitive. This is the only way to ensure fair and equitable pricing. Imagine you were a farmer selling watermelons. Would you just sell your watermelons to the first buyer who agreed to purchase them? Or would you survey the marketplace of buyers, see the best price (and business partner) you could get, and then make an informed decision on which buyer to sell to?</p> <p>And yet, when people talk about the labor market, they think “oh, a company wants to give me a job! What a relief!” As though having a job were in itself some special privilege for which a company is the gatekeeper.</p> <p>Dispel yourself of this mindset.</p> <p>A job is just a deal. It is a deal between you and a company to exchange labor for money (and other things you value).</p> <p>This might sound like an abstract point, but you should absolutely approach negotiation from this perspective.</p> <p>The role of negotiation</p> <p>Negotiating is a natural and expected part of the process of trying to make a deal. It’s also a signal of competence and seriousness. Companies generally respect candidates who negotiate, and most highly attractive candidates negotiate (if for no other reason, because they often have too many options to choose from).</p> <p>At the risk of spouting truisms: always, always negotiate. It doesn’t matter how good or bad you think you are. You never damage a relationship by negotiating.</p> <p>In all my time as an instructor at App Academy, out of hundreds of offers negotiated, only once or twice were offers ever rescinded in negotiations. It basically never happens. And when it does, usually the candidate was being an unconscionable asshole, or the company was imploding and needed an excuse to rescind the offer.</p> <p>You might think to yourself: “well, I don’t want to set high expectations, and the offer is already generous, so I ought to just take it.”</p> <p>No. Negotiate.</p> <p>Or maybe: “I don’t want to start off on the wrong foot and look greedy with my future employer.”</p> <p>No. Negotiate.</p> <p>“But this company is small and — “</p> <p>No. Shut up. Negotiate.</p> <p>We’ll talk more in the next section about why a lot of these objections are BS, and fundamentally misapprehend the dynamics of hiring. But for now, just trust me that you should always negotiate.</p> <p>The ten rules of negotiating I’ve tried to boil down negotiation to ten rules. The rules, in order of appearance, are:</p> <p>- Get everything in writing - Always keep the door open - Information is power - Always be positive - Don’t be the decision maker - Have alternatives - Proclaim reasons for everything - Be motivated by more than just money - Understand what they value - Be winnable</p> <p>We’ll only get through some of these in this blog post, and the rest will appear in the second part. But I’ll explain each rule as we get to it.</p> <p>So let’s start from the top and try to walk through a negotiation process from the very beginning. For most, that starts when you receive an offer.</p> <p>The offer conversation</p> <p>You’ve just received the phone call: your interview went well, and after much deliberation they decided they like you. They want to make you an offer. Congratulations!</p> <p>Don’t get too excited though. The fun is just getting started.</p> <p>Thank your recruiter. Sound excited — hopefully this won’t be hard. Before jumping into details, try to ask for specific feedback on your interview performance. If they give it to you, this will help you gauge how much they want you, as well as tell you things you can improve on in your next interview(s).</p> <p>Now time to explore the offer.</p> <p>Rule #1 of negotiating: have everything in writing.</p> <p>Eventually, they’ll give you information about the offer. Write it all down. Doesn’t matter if they’re going to send you a written version later, write everything down. Even if there are things that are not directly monetary, if they relate to the job, write them down. If they tell you “we’re working on porting the front-end to Angular,” write that down. If they say they have 20 employees, write that down. You want as much information as you can. You’ll forget a lot of this stuff, and it’s going to be important in informing your final decision.</p> <p>Depending on the company, they’ll also tell you about the equity package. We’ll look more specifically at equity in part II, but be sure to write everything down.</p> <p>The rule from here on out is that everything significant you discuss will have some kind of a paper trail. Often, the company won’t even send you an official offer letter until a deal is finalized. So it falls to you to confirm all of the important details in subsequent e-mails.</p> <p>So yadda yadda, lots of details, writing stuff down, oh there’s a joke, time to laugh. Now the recruiter is done talking and you’re done asking all of your questions.</p> <p>Your recruiter will now say something along the lines of “so what do you think?”</p> <p>This seems innocuous, but your reply here is critical, because there’s a lot you can say to weaken your position. This is your first decision point.</p> <p>A decision point is a moment in the negotiation where your interlocutor wants to compel you to make a decision. If they succeed in tying you to a position, they will close the door on further negotiating. Of course “what do you think?” is a subtle prod. But it is the beginning of many attempts to get you to make a premature commitment.</p> <p>This leads to rule #2 of negotiating: always keep the door open. Never give up your negotiating power until you’re absolutely ready to make an informed, deliberate final decision.</p> <p>This means your job is to traverse as many of these decision points as possible without giving up the power to continue negotiating. Very frequently, your interlocutor will try to trick you into making a decision, or tie you to a decision you didn’t commit to. You must keep verbally jiu-jitsu-ing out of these antics until you’re actually ready to make your final decision.</p> <p>Protecting information</p> <p>There’s an uncomfortable silence by now, and their “what do you think?” is hanging in the air.</p> <p>If you say “yes, that sounds amazing, when do I start?” you implicitly accept the offer and completely close the door on the negotiation. This is your recruiter’s number one favorite thing to hear. It stands to reason you probably shouldn’t do this.</p> <p>But their second favorite thing to hear you say is “can you do 90K instead of 85K?” This also closes the door, but for a different and more subtle reason. And it’s the number one reason why most people suck at negotiation.</p> <p>Rule #3 of negotiating: information is power. To protect your power in the negotiation, you must protect information as much as possible.</p> <p>A company doesn’t give you insight into what it’s thinking. It doesn’t tell you its price range, how much it paid the previous candidate with your experience, or anything like that. It intentionally obfuscates those things. But it wants you not to do the same.</p> <p>A company wants to be like a bidder in a secret auction. But unlike the other bidders, it wants to know exactly how high all of the other bids are. It then openly intends to exploit that knowledge, often by bidding one cent more than the second highest bid.</p> <p>Yeah, no. Screw that. It’s a silent auction, and to keep it that way, you must protect information.</p> <p>In many situations, the only reason why you have any negotiating power at all is because the employer doesn’t actually know what you’re thinking. They might not know how good your other offers are, or how much you were making in your last job, or how you weigh salary vs equity, or even how rational you are as a decision-maker. Bottom line, you want them to be uncertain on exactly what it would take to sign you.</p> <p>When you say “can you do 90K instead of 85K,” you’ve told them exactly what it will take to make you sign. The sheet’s pulled back, the secret auction is up, and they’re going to bid 90K (or more likely, 87K). And they know there’s almost no risk in doing so, because you’ll probably accept.</p> <p>What if you were the kind of person who wouldn’t even consider an offer below 110K? Or the kind of person who wouldn’t consider an offer below 120K? If you were, you wouldn’t ask for 90K, and if they offered it as conciliation, you’d tell them to stop wasting your time.</p> <p>By staying silent, they don’t actually know which of those kinds of people you are. In their mind, you could be any of the three.</p> <p>A corollary of this rule is that you should not reveal to companies what you’re currently making. There are some exceptions, but as a rule you should assume this. If you must divulge what you’re making, you should be liberal in noting the total value of your package (incorporate bonuses, unvested stock, nearness to promotion etc.), and always mention it in a context like “[XYZ] is what I’m currently making, and I’m definitely looking for a step up in my career for my next role.”</p> <p>Companies will ask about your current compensation at different stages in the process — some before they ever interview you, some after they decide to make you an offer. But be mindful of this, and protect information.</p> <p>So given this offer, don’t ask for more money or equity or anything of the sort. Don’t comment on any specific details of the offer except to clarify them.</p> <p>Give away nothing. Retain your power.</p> <p>Say instead:</p> <p>“Yeah, [COMPANY_NAME] sounds great! I really thought this was a good fit, and I’m glad that you guys agree. Right now I’m talking with a few other companies so I can’t speak to the specific details of the offer until I’m done with the process and get closer to making a decision. But I’m sure we’ll be able to find a package that we’re both happy with, because I really would love to be a part of the team.”</p> <p>Think like the watermelon farmer. This offer is just the first businessman who’s stopped by your watermelon patch, glanced over your crops, and announced “I’ll take all of these right now for $2 a melon.”</p> <p>Cool. It’s a big market, and you’re patient — you’re a farmer after all. Just smile and tell them you’ll keep their offer in mind.</p> <p>And this is super important: always be unequivocally positive.</p> <p>The importance of positivity</p> <p>Staying positive is rule #4 of negotiation. Even if the offer sucks, it’s extremely important to remain positive and excited about the company. This is because your excitement is one of your most valuable assets in a negotiation.</p> <p>A company is making you an offer because they think you’ll do hard work for them if they pay you. If you lose your excitement for the company during the interview process, then they’ll lose confidence that you’ll actually want to work hard or stay there for a long time. Each of those makes you less attractive as an investment. Remember, you are the product! If you become less excited, then the product you’re selling actually loses value.</p> <p>Imagine you were negotiating with someone over buying your watermelons, but the negotiation took so long that by the time you’d reached an agreement, your watermelons had gone bad.</p> <p>Companies are terrified of that. They don’t want their candidates to go bad during a negotiation. Hence why they hire professional recruiters to manage the process and make sure they remain amicable. You and the recruiter share the same interest in that regard. If a company feels like you’ve gone bad, suddenly they’re a lot less willing to pay for you.</p> <p>So despite whatever is happening in the negotiation, give the company the impression that 1) you still like the company, and that 2) you’re still excited to work there, even if the numbers or the money or the timing is not working out. Generally the most convincing thing to signal this is to reiterate you love the mission, the team, or the problem they’re working on, and really want to see things work out.</p> <p>Don’t be the decision-maker</p> <p>You can wrap up the conversation now by saying:</p> <p>“I’ll look over some of these details and discuss it with my [FAMILY / CLOSE_FRIENDS / SIGNIFICANT_OTHER]. I’ll reach out to you if I have any questions. Thanks so much for sharing the good news with me, and I’ll be in touch!”</p> <p>So not only are you ending the conversation with the power all in your hands, but note there’s another important move here: you’re roping in other decision-makers.</p> <p>Rule #5 of negotiation: don’t be the decision-maker. Even if you don’t particularly care what your friends/family/husband/mother thinks, by mentioning them, you’re no longer the only person the recruiter needs to win over. There’s no point in them trying to bully and intimidate you; the “true decision-maker” is beyond their reach.</p> <p>This is a classic technique in customer support and remediation. It’s never the person on the phone’s fault, they’re just some poor schmuck doing their job. It’s not their decision to make. This helps to defuse tension and give them more control of the situation.</p> <p>It’s much harder to pressure someone if they’re not the final decision-maker. So take advantage of that.</p> <p>Okay!</p> <p>We have our first offer. Send a follow-up e-mail confirming all of the details you discussed with your recruiter so you have a paper trail. Just say “just wanted to confirm I had all the details right.”</p> <p>Groovy. Next step is to leverage this to land other offers and find the best deal we can find in the job market.</p> <p>Getting other offers</p> <p>Turns out, it doesn’t matter that much where your first offer is from, or even how much they’re offering you. Just having an offer in hand will get the engine running.</p> <p>If you’re already in the pipeline with other companies (which you should be if you’re doing it right), you should proactively reach out and let them know that you’ve just received an offer. Try to build a sense of urgency. Regardless of whether you know the expiration date, all offers expire at some point, so take advantage of that.</p> <p>“Hello [PERSON], I just wanted to update you on my own process. I’ve just received an offer from [COMPANY] which is quite strong. That said, I’m really excited about [YOUR AMAZING COMPANY] and really want to see if we can make it work. Since my timeline is now compressed, is there anything you can do to expedite the process?”</p> <p>Should you specifically mention the company that gave you an offer? Depends. If it’s a well-known company or a competitor, then definitely mention it. If it’s a no-name or unsexy company, you should just say you received an offer. If it’s expiring soon, you should mention that as well.</p> <p>Either way, send out a letter like this to every single company you’re talking to. No matter how hopeless or pointless you think your application is, you want to send this signal to everyone who is considering you in the market.</p> <p>Second, if there are any other companies you are looking to apply to (whether through referral or cold application), or even companies at which you’ve already applied but haven’t heard back, I would also follow up with a similar e-mail.</p> <p>So why do this? Isn’t this tacky, annoying, or even desperate?</p> <p>None of the above. It is the oldest method in history to galvanize a marketplace — show that supplies are limited and build urgency. Demand breeds demand. Not every company will respond to this, but many will.</p> <p>Isn’t it stupid that companies respond to this though?</p> <p>Why companies care about other offers</p> <p>When I wrote about the story of my own job search, I mentioned how having an offer from Google made companies turn around and expedite me through their funnels. Many commentators lamented at the capriciousness of these companies. If Uber or Twitch only talked to me because of Google and until then weren’t willing to look at me, what did that say about their hiring processes? What legitimately are they evaluating, if anything at all?</p> <p>I think this response is totally backwards. The behavior of tech companies here is actually very rational, and you would do well to understand it.</p> <p>First, you must realize what a company’s goal is. A company’s goal is to hire someone who will become an effective employee and produce more value than their cost. How do you figure out who will do that? Well, you can’t know for certain without actually hiring them, but there are a few proxies. Pedigree is the strongest signal; if they did it at other companies, they can probably do it at yours. And if someone trusted within the organization can vouch for them, that’s often a strong signal as well.</p> <p>But turns out, almost everything else is a weak signal. Weak in the sense that it’s just not very reliable. Interviews, if you think about it, are long, sweaty, uncomfortable affairs that only glancingly resemble actual employment. They’re weird and can’t tell you that much about whether an individual will be good at their job. There’s no way around this. There are a few stronger signals, like bringing someone in for a week or two on a contract-to-hire position, but strong candidates won’t consider this. So candidates as a whole have effectively forced companies to assume almost all of the risk in hiring.</p> <p>The truth is, knowing that someone has passed your interview just doesn’t say that much about whether they’ll be a good employee. It’s as though you knew nothing about a student other than their SAT score. It’s just not a lot of data to go off.</p> <p>Nobody has solved this problem. Not Google nor anyone else.</p> <p>And this is precisely why it’s rational for companies to care that you’ve received other offers. They care because each company knows that their own process is noisy, and the processes of most other companies are also noisy. But a candidate having multiple offers means that they have multiple weak signals in their favor. Combined, these converge into a much stronger signal than any single interview. It’s like knowing that a student has a strong SAT score, and GPA, and won various scholarships. Sure, it’s still possible that they’re a dunce, but it’s much harder for that to be true.</p> <p>This is not to say that companies respond proportionally to these signals, or that they don’t overvalue credentials and brands. They do. But caring about whether you have other offers and valuing you accordingly is completely rational.</p> <p>So this is all to say — tell other companies that you’ve received offers. Give them more signal so that they know you’re a valued and compelling candidate. And understand why this changes their mind about whether to interview you.</p> <p>As you continue interviewing, remember to keep practicing your interview skills. The single strongest determinant of your final offer will be the number and strength of offers that you receive.</p> <p>Some advice on timing</p> <p>You want to be strategic about the timing of your offers. Generally, you should try to start interviewing at larger companies earlier. Their processes are slower and their offer windows are wider (meaning they allow you more time to decide). Startups are the other way around.</p> <p>Your goal should be to have as many offers overlapping at the same time as possible. This will maximize your window for negotiating.</p> <p>When you receive an offer, often the first thing you should ask for is more time to make your decision. Especially in your first offer, more time is by far the most valuable thing you can ask for. It’s time that enables you to activate other companies and end up with the strongest possible offer. So be prepared to fight for time.</p> <p>How to approach exploding offers</p> <p>Hoo boy.</p> <p>Exploding offers are offers that expire within 24–72 hours. You won’t see this much at big companies, but they’re becoming increasingly common among startups and mid-sized companies.</p> <p>Exploding offers suck, and I share most people’s disdain for this practice. But I do understand it. Exploding offers are a natural weapon for employers to combat a strong hiring market for tech workers. Companies know exactly what they’re doing with exploding offers — they play on fear and limit your ability to seek out counteroffers.</p> <p>In a sense, it’s unsurprising that if startups have more difficulty attracting and securing talent, they’d resort to this practice. What I don’t like is the dishonesty about it. Employers often justify this by saying:</p> <p>“If you need more time than this, then that’s a sign you’re not the kind of person we’re looking for.”</p> <p>Please don’t buy this crap or feel guilty over it. They’re simply doing this to improve their chance of closing candidates. Needing more than three days to make a life decision isn’t a sign of anything other than thoughtfulness.</p> <p>So what should you do if you receive an exploding offer?</p> <p>Exploding offers are anathema to your ability to effectively navigate the labor market. Thus, there is only one thing to do. Treat the offer as a non-offer unless the expiration window is widened.</p> <p>In no uncertain terms, convey that if the offer is exploding, it’s useless to you.</p> <p>Example conversation:</p> <p>“I have one big concern. You mentioned that this offer explodes in 48 hours. I’m afraid this doesn’t work at all for me. There’s no way that I can make a decision on this offer within a 48 hour window. I’m currently wrapping up my interview process at a few other companies, which is likely to take me another week or so. So I’m going to need more time to make an informed decision.”</p> <p>If they push back and say this is the best they can do, then politely reply:</p> <p>“That’s really unfortunate. I like [YOUR COMPANY] and was really excited about the team, but like I said, there’s no way I can consider this offer. 48 hours is just too unreasonable of a window. The next company I join will be a big life decision for me, and I take my commitments very seriously. I also need to consult with my [EXTERNAL_DECISION_MAKER]. There’s no way that I can make a decision I’m comfortable with in this short an amount of time.”</p> <p>Pretty much any company will relent at this point. If they persist, don’t be afraid to walk away over it. (They probably won’t let that happen, and will come grab you as you’re walking out the door. But if they don’t, then honestly, screw ‘em.)</p> <p>I was given several exploding offers during my job search. And every time, I did essentially this. Every single offer immediately widened to become more reasonable, sometimes by several weeks.</p> <p>I want to emphasize, lest I be misunderstood here — what I’m saying is not to just silently let an exploding offer expire, and assume that everything will be fine and they’ll still hire you. They won’t. For exploding offers to be a credible weapon, a company has to have a reputation of enforcing them. I’m saying explicitly call this out as an issue when they make the offer.</p> <p>Don’t let a company bully you into giving away your negotiating power.</p> <p>The Negotiating Mindset</p> <p>Before we enter into the actual back-and-forth, I want to examine the mindset you should have as a negotiator. This applies not just to how you approach the conversation, but also to how you think about the company.</p> <p>Do not fall into the trap of valuing companies solely along one dimension. That means don’t just value companies based on salary, equity, or even on prestige. Those are all important dimensions, but so are cultural fit, the challenge of the work, learning potential, later career options, quality of life, growth potential, and just overall happiness. None of these inherently trump any of the other. Anyone who tells you “just choose wherever you think you’ll be happiest” is being just as simplistic as someone who says “just choose the one that offers the most money.” All of these things matter, and your decision should be genuinely multi-dimensional.</p> <p>Be open to being surprised as you explore different companies.</p> <p>It’s also important to understand that companies don’t all value you along the same dimension either. That is, different companies are genuinely looking for different skills, and there are some companies at which you will be more and less valuable. Even at peer companies this is true, especially so if you have a specialized skill-set.</p> <p>The more companies you talk to, the more likely you are to find a company to which you are significantly more valuable than the rest. Chances are this is where you’ll be able to negotiate your strongest offer. It might surprise you which company this turns out to be; keep an open mind, and remember that a job search is a 2-sided process.</p> <p>One of the most valuable things you can do for yourself in this process is to really try to understand how employers think and what motivates them. Understanding your interlocutor is extremely important in negotiation, and we’ll be exploring that a lot in the next blog post.</p> <p>But most of all I want to emphasize: be curious about the other side. Try to understand why employers think the way they do. Be sympathetic toward them. Care about what they want and help them try to get it. Adopting this mindset will make you a much stronger negotiator, and accordingly, a much better employee and team member.</p> <p>Okay. That’s as far as we’re going for today. In the next blog post, I’m going to cover the last four rules of negotiation. I’ll also go over the actual back-and-forth process — how to ask for what you want, how to strengthen offers, and how to dismantle the tricks that companies will try to pull on you. Also a lot more on the theory of negotiation, which I really dig.</p>]]></content:encoded>
			<enclosure length="26443380" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._12_-_Ten_Rules_for_Negotiating_a_Job_Offer.mp3?dest-id=603849" />
			<itunes:duration>27:29</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly...]]></itunes:subtitle>
			<itunes:summary>For Haseeb's first software developer job, he was able to negotiate a total compensation package of US $250,000 for his first year at Airbnb. He believes negotiation is a skill that can be learned, just like any other. And it isn't particularly elusive or hard to understand. He explains how anyone can negotiate effectively.</itunes:summary>
			<itunes:episode>12</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 11 - Programming is hard. That’s precisely why you should learn it.</title>
			<itunes:title>Programming is hard. That’s precisely why you should learn it.</itunes:title>
			<pubDate>Mon, 18 Dec 2017 18:48:08 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[58bd88337265e38c843ca175258ad944]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-11-programming-is-hard-thats-precisely-why-you-should-learn-it]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Roger explains why everyone should learn to code, even if they don't intend to go pro. "Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the mind."</p> <p>Written and Read by Roger Collier: <a href= "https://twitter.com/RogerAFCollier">https://twitter.com/RogerAFCollier</a></p> <p>Original article: <a href= "https://fcc.im/2keLLrU">https://fcc.im/2keLLrU</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>It was far past midnight. My wife and kids had long gone to bed. But sleep was not an option for me. I had to figure it out. So I tweaked the code again, for the googolth time, and hit run.</p> <p>Hmm, looks promising.</p> <p>If I click here, the program should call the “compute next move” function. Yes. And if I click here, that function should call itself. Good. Now, if I click here, I should get…not that.</p> <p>Argh.</p> <p>More tweaks. More errors. More hours tick by.</p> <p>Learning programming is hard, I thought. My next thought?</p> <p>Yes, and that’s why I like it.</p> <p>How programming became my hobby</p> <p>I began to learn how to code using JavaScript four months ago, starting with freeCodeCamp’s front-end curriculum. For me, programming became a hobby.</p> <p>Over the past few years, I had become disappointed with my creation-to-consumption ratio. Too much of my free time was spent consuming. Netflix, podcasts, Twitter, magazines, televised sports, Facebook, blogs, Medium, newspapers, novels — the list goes on.</p> <p>There is nothing wrong with any of these activities, but they are all pure input. Even reading a great book is an act of consumption.</p> <p>Sure, I was generating plenty of output in my job as a journalist, but I could no longer accept the fact that hard work was something I did only when it would result in a paycheck.</p> <p>With a family and a career and other obligations, I had only so much free time. I was spending far too much of it scarfing down media. And I felt like a pig.</p> <p>So far, my programming hobby hasn’t result in all that much output. I made one simple app, which I wrote about in a previous article. I’ve completed all the front-end challenges and projects on freeCodeCamp.</p> <p>But it’s a start. My goal is not to create amazing things to impress people. It is simply to immerse myself in the act of creation, to challenge myself, to attempt something difficult — if for no other reason than to finish it.</p> <p>Harder is better</p> <p>In my home province — Ontario, Canada — there is a movement to improve physical health called Make Your Day Harder. The basic premise is that making small tweaks to daily routines to increase physical activity can add up and improve health.</p> <p>Take the stairs instead of the elevator. Get off the bus one stop before your destination. Take the parking spot farthest away from the entrance at work.</p> <p>I couldn’t agree more. Those elevator-hating far-parkers are onto something.</p> <p>Of course, sitting in front of a computer writing code isn’t going to improve your physical health. JavaScript is great for building apps, not abs.</p> <p>I don’t think it’s too much of a stretch, though, to suggest that learning how to program is healthy for your brain. Healthier, at least, than bingeing Iron Fist or thumbing through celebrity Instagram accounts.</p> <p>For me, even after I started coding, the default during downtime is still too often leisure. This month, for instance, I have already spent dozens of hours watching genetic outliers throw a ball at a metal ring. This is otherwise known as the NBA playoffs. Since I’m a Toronto Raptors fan, you could also call it self-induced torture.</p> <p>Does watching so much basketball — alone, in my basement — benefit me in any way? Well, I drink more beer when I watch sports. I eat more nachos and wings and potato chips. Mike and Ikes have made several appearances. Oh, and I often stay up late to watch the West Coast games, so I’m getting less sleep.</p> <p>In other words, watching sports, for me, is a vice. I enjoy it, but it’s actually bad for me. It provides me with entertainment, but nothing else. Except for love handles and the occasional mid-afternoon yawn attack.</p> <p>But it’s easy. It’s oh so easy. Plop on couch. Crack open Corona. Kick up your feet. Sit there for three hours.</p> <p>The easy path is more tempting. The difficult path is more rewarding.</p> <p>Embracing difficulty</p> <p>I was again reminded of the value of embracing difficulty while watching the movie Hidden Figures. The film featured an excerpt of John F Kennedy’s “We choose to go to the moon” speech. The United States pursued space travel not despite it being difficult, the president declared, but rather because it was difficult.</p> <p>“We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we are willing to accept, one we are unwilling to postpone, and one which we intend to win, and the others, too.” — John F Kennedy</p> <p>The words “hard” and “difficult” are often used to describe something negative. In many cases, that’s appropriate. It is hard to watch a loved one fall ill and suffer. It is difficult when a relationship fails or a pet dies. Some situations are all pain, no profit.</p> <p>Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the mind.</p> <p>If you happen, along the way, to create something amazing and users flock to your app with open wallets, that’s great. If not, code anyway. If you master JavaScript and become a YouTube guru with more subscribers than the New York Times, that’s great. If not, code anyway.</p> <p>Many people learn programming to attain a specific goal. Perhaps your job is boring and you want a more challenging one. Nothing wrong with that. Maybe you want to break into tech because you need a higher income to support your family. Hey, someone has to buy the bagels and flip flops, and keep the WiFi pumping.</p> <p>But you don’t need an endgame in mind to start your coding journey. Just begin. And if that journey becomes difficult, don’t despair. It means you’re on the right path. The hard one.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Roger explains why everyone should learn to code, even if they don't intend to go pro. "Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the mind."</p> <p>Written and Read by Roger Collier: <a href= "https://twitter.com/RogerAFCollier">https://twitter.com/RogerAFCollier</a></p> <p>Original article: <a href= "https://fcc.im/2keLLrU">https://fcc.im/2keLLrU</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Transcript: </p> <p>It was far past midnight. My wife and kids had long gone to bed. But sleep was not an option for me. I had to figure it out. So I tweaked the code again, for the googolth time, and hit run.</p> <p>Hmm, looks promising.</p> <p>If I click here, the program should call the “compute next move” function. Yes. And if I click here, that function should call itself. Good. Now, if I click here, I should get…not that.</p> <p>Argh.</p> <p>More tweaks. More errors. More hours tick by.</p> <p>Learning programming is hard, I thought. My next thought?</p> <p>Yes, and that’s why I like it.</p> <p>How programming became my hobby</p> <p>I began to learn how to code using JavaScript four months ago, starting with freeCodeCamp’s front-end curriculum. For me, programming became a hobby.</p> <p>Over the past few years, I had become disappointed with my creation-to-consumption ratio. Too much of my free time was spent consuming. Netflix, podcasts, Twitter, magazines, televised sports, Facebook, blogs, Medium, newspapers, novels — the list goes on.</p> <p>There is nothing wrong with any of these activities, but they are all pure input. Even reading a great book is an act of consumption.</p> <p>Sure, I was generating plenty of output in my job as a journalist, but I could no longer accept the fact that hard work was something I did only when it would result in a paycheck.</p> <p>With a family and a career and other obligations, I had only so much free time. I was spending far too much of it scarfing down media. And I felt like a pig.</p> <p>So far, my programming hobby hasn’t result in all that much output. I made one simple app, which I wrote about in a previous article. I’ve completed all the front-end challenges and projects on freeCodeCamp.</p> <p>But it’s a start. My goal is not to create amazing things to impress people. It is simply to immerse myself in the act of creation, to challenge myself, to attempt something difficult — if for no other reason than to finish it.</p> <p>Harder is better</p> <p>In my home province — Ontario, Canada — there is a movement to improve physical health called Make Your Day Harder. The basic premise is that making small tweaks to daily routines to increase physical activity can add up and improve health.</p> <p>Take the stairs instead of the elevator. Get off the bus one stop before your destination. Take the parking spot farthest away from the entrance at work.</p> <p>I couldn’t agree more. Those elevator-hating far-parkers are onto something.</p> <p>Of course, sitting in front of a computer writing code isn’t going to improve your physical health. JavaScript is great for building apps, not abs.</p> <p>I don’t think it’s too much of a stretch, though, to suggest that learning how to program is healthy for your brain. Healthier, at least, than bingeing Iron Fist or thumbing through celebrity Instagram accounts.</p> <p>For me, even after I started coding, the default during downtime is still too often leisure. This month, for instance, I have already spent dozens of hours watching genetic outliers throw a ball at a metal ring. This is otherwise known as the NBA playoffs. Since I’m a Toronto Raptors fan, you could also call it self-induced torture.</p> <p>Does watching so much basketball — alone, in my basement — benefit me in any way? Well, I drink more beer when I watch sports. I eat more nachos and wings and potato chips. Mike and Ikes have made several appearances. Oh, and I often stay up late to watch the West Coast games, so I’m getting less sleep.</p> <p>In other words, watching sports, for me, is a vice. I enjoy it, but it’s actually bad for me. It provides me with entertainment, but nothing else. Except for love handles and the occasional mid-afternoon yawn attack.</p> <p>But it’s easy. It’s oh so easy. Plop on couch. Crack open Corona. Kick up your feet. Sit there for three hours.</p> <p>The easy path is more tempting. The difficult path is more rewarding.</p> <p>Embracing difficulty</p> <p>I was again reminded of the value of embracing difficulty while watching the movie Hidden Figures. The film featured an excerpt of John F Kennedy’s “We choose to go to the moon” speech. The United States pursued space travel not despite it being difficult, the president declared, but rather because it was difficult.</p> <p>“We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we are willing to accept, one we are unwilling to postpone, and one which we intend to win, and the others, too.” — John F Kennedy</p> <p>The words “hard” and “difficult” are often used to describe something negative. In many cases, that’s appropriate. It is hard to watch a loved one fall ill and suffer. It is difficult when a relationship fails or a pet dies. Some situations are all pain, no profit.</p> <p>Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the mind.</p> <p>If you happen, along the way, to create something amazing and users flock to your app with open wallets, that’s great. If not, code anyway. If you master JavaScript and become a YouTube guru with more subscribers than the New York Times, that’s great. If not, code anyway.</p> <p>Many people learn programming to attain a specific goal. Perhaps your job is boring and you want a more challenging one. Nothing wrong with that. Maybe you want to break into tech because you need a higher income to support your family. Hey, someone has to buy the bagels and flip flops, and keep the WiFi pumping.</p> <p>But you don’t need an endgame in mind to start your coding journey. Just begin. And if that journey becomes difficult, don’t despair. It means you’re on the right path. The hard one.</p> <p> </p>]]></content:encoded>
			<enclosure length="10399724" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._11_-_Learning_to_code_is_hard._That_is_precisely_why_you_should_learn_it.mp3?dest-id=603849" />
			<itunes:duration>10:50</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Roger explains why everyone should learn to code, even if they don't intend to go pro. "Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the...]]></itunes:subtitle>
			<itunes:summary>Roger explains why everyone should learn to code, even if they don't intend to go pro. "Learning something difficult, however, is beneficial in and of itself. The process is the prize. Struggling with code, while frustrating, is medicine for the mind."</itunes:summary>
			<itunes:episode>11</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 10 - We fired our top developer talent. Best decision we ever made.</title>
			<itunes:title>We fired our top developer talent. Best decision we ever made.</itunes:title>
			<pubDate>Mon, 11 Dec 2017 15:15:19 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[f8e3970ae3c187e8f3f99b64bff7c962]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-9-we-fired-our-top-developer-talent-best-decision-we-ever-made]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference.</p> <p>In this episode we explore "brilliant jerks" and how to save your development team from them.</p> <p>Written and Read by: Jonathan Solórzano-Hamilton</p> <p>Follow him on Twitter: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>His full article on freeCodeCamp's Medium publication: <a href= "https://fcc.im/2BAhnm6">https://fcc.im/2BAhnm6</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p> </p> <p>Transcript:</p> <p>“You will never be able to understand any of what I’ve created. I am Albert F***ing Einstein and you are all monkeys scrabbling in the dirt.”</p> <p>And so our resident genius, our Dr. Jekyll, explosively completed his transformation into Mr. Hyde.</p> <p>He declared this in front of the product design team, developers, management, and pre-launch customers. One of our project sponsors had the temerity to ask when the problem crippling our product would be fixed.</p> <p>Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference.</p> <p>This story is about the fall from grace of an extremely gifted team member with a deep understanding of our product’s architecture. He had an uncanny ability to forecast future requirements, and a ton of domain-specific knowledge.</p> <p>He was our top contributor. He was killing our flagship project.</p> <p>We’ll call this person “Rick.”</p> <p>Rick was universally recognized on the team as the top talent. He was the lead developer and architect of our software projects.</p> <p>Any time anyone had a question about code or needed help with a task, they would go to Rick. Rick had a giant whiteboard installed in his office used only for this purpose. It was always cluttered with the ghosts of past discussions that wouldn’t quite erase.</p> <p>Any time there was a particularly challenging problem, Rick would handle it. Rick had a server with the same specs as our production server installed at his desk. He used this to run the entire application stack independently and troubleshoot every layer at once.</p> <p>Rick didn’t need anybody else. Rick preferred to work alone in his private work-space.</p> <p>Rick didn’t need anything anybody else built. He built everything he needed from scratch because it was infinitely better than the paltry offerings of mere mortals.</p> <p>Soon, Rick stopped attending meetings. Rick didn’t have time for meetings any more because there was too much to code.</p> <p>Rick closed his door. His whiteboard lay fallow. Rick no longer had time to train anyone because he had too much to solve on his own.</p> <p>A backlog grew behind Rick. Bugs were popping up in old tools he’d built. They sapped his attention from meeting commitments on new product development.</p> <p>Of course, these bugs were happening because the users had misstated their assumptions. Of course there wasn’t any problem in his work. Of course.</p> <p>On our project dashboard, green flags changed to yellow. Yellow changed to red. Red lights started blinking. One by one, task statuses changed to “Impeded.” Everyone was waiting for Rick.</p> <p>The project manager got a six-month extension from the sponsor. At the end of the six months, production-readiness was estimated to be seven months away. At the end of a year, production-readiness was two years out.</p> <p>Rick was churning out code faster than ever. He was working seven-day weeks, twelve hours a day.</p> <p>Everyone knew only Rick could pull the team out of this mess. Everyone held their breath and waited for Rick to invent the miracle cure that would mend this crippled project.</p> <p>Every day, Rick grew more belligerent and isolated. The mask was coming off. Jekyll was becoming Hyde.</p> <p>I participated in my first meeting with the project team about two years after the original agreed release date. I’d been aware of the project for a while, because it had grown infamous in my organization, but hadn’t been assigned to it.</p> <p>I was sent in to see if we could save it.</p> <p>My first meeting on the project was the aforementioned “Albert Einstein” meeting.</p> <p>Hmm.</p> <p>I dove into the source code. Rick was right: no-one could possibly understand what Rick had created. Except for Rick. It was a reflection of the workings of his own mind. Some of it was very clever, a lot of it was copy-pasta, it was all very idiosyncratic, and it was not at all documented.</p> <p>I went to our CIO with the verdict. Only Rick would ever be able to maintain this product. Plus, every day that Rick worked on the project moved the delivery date back a week. Rick was destroying our product faster than he was creating it.</p> <p>We sat down with Rick and had a conversation about his role in the project. We reviewed our concerns. We sidestepped his self-comparison to Albert Einstein.</p> <p>We explained our new strategy. The team was going to collaborate on building a new product from scratch.</p> <p>This effort would be very limited in scope and would only provide the bare essentials to get us to production. The whole team would contribute and be able to support it. No more bottlenecks.</p> <p>How did Rick react to this?</p> <p>The only way Rick could. Rick exploded.</p> <p>Rick wanted no part of this farce. If we couldn’t appreciate his genius, that was our fault, not his. Rick predicted that within months we’d come crawling back to him begging him to save us.</p> <p>Rick screamed that we lacked the basic mental capacity to appreciate genius when it was staring us in the face.</p> <p>Sadly, after this, Rick rejected months of overtures by leadership. He refused to take time off or allow any work to be delegated. He rejected repeated attempts to introduce free open source frameworks to replace his hard-to-maintain bespoke tools.</p> <p>He reverted code changes — including tested bug fixes — by other developers. He asserted that he wouldn’t be held accountable for supporting other people’s work. He continued publicly belittling his colleagues.</p> <p>We fired Rick.</p> <p>It took about a week for the dust to settle. It took time for the shocked team to gather themselves after losing their embattled guru.</p> <p>Then I saw them huddled around a whiteboard.</p> <p>They collaborated. They designed a replacement product. It would be much simpler.</p> <p>It wouldn’t have all the bells and whistles. Nor would it anticipate requirements from five years down the product road map.</p> <p>Rick’s product supported a dynamic workflow with over fifteen thousand permutations. In reality 99% of our use cases followed one of three paths. The team hard-coded the workflow. This removed over 30% of Rick’s work.</p> <p>It wouldn’t have custom hand-coded components for every task. They stripped out every bespoke dependency that they could buy instead of build.</p> <p>This removed hundreds of hours of Rick’s contribution. But it also removed thousands of hours of technical debt.</p> <p>We obtained an agreement from the project sponsor to shut off some edge-case functionality.</p> <p>This had served only 5% of our pre-launch user group and was responsible for about a quarter of the product’s complexity.</p> <p>We re-released the product to this group. It consisted of 10% of Rick’s original code which was pretty stable. It also had a few thousand lines of new code to replace about 150,000 lines of incomprehensible mess.</p> <p>The team had replaced five years of work in about six months. Over the next few months we expanded from pilot to full customer release.</p> <p>Not only had we replaced what Rick had built, we sped past him and fully launched the product — all in under a year. The result was less than a fifth the size and complexity of what Rick had built.</p> <p>It was also hundreds of times faster and nearly bug-free despite having been assembled in a fraction of the time and serving ten times as many customers.</p> <p>The team went back to Rick’s other products. They threw away his old code there, too.</p> <p>They re-released another product of his after three years in development, with three months of concerted team effort.</p> <p>There were no Ricks left on the team. We didn’t have any mad geniuses building everything from scratch. But our productivity was never higher.</p> <p>Rick was a very talented developer. Rick could solve complex business logic problems and create sophisticated architectures to support his lofty designs. Rick could not solve the problem of how to work effectively on a team.</p> <p>Rick’s presence was destructive in several ways.</p> <p>First, he created a cult of dependence. Any problem eventually became a Rick problem, a myth he encouraged. Developers learned to stop trying and just wait for Rick.</p> <p>Second, he didn’t write maintainable code. He never documented or tested anything, and so failed in spite of his own intelligence. His belief in his personal infallibility trumped common sense.</p> <p>Third, he was personally destructive. Team members didn’t want to speak up and offer their own ideas because he always berated them for it. Rick only respected Rick and went out of his way to make everyone else feel small.</p> <p>Fourth, he lacked all personal accountability. No failure was his fault. He sincerely believed this, and it prevented him from learning from his own mistakes.</p> <p>I don’t believe Rick started out this way. I saw him at his worst. This was after years of working escalating overtime and facing increasing criticism from customers and colleagues.</p> <p>It’s sad that Rick descended this far. His manager shares in this responsibility. In fact, the original management team was held accountable: they were let go first.</p> <p>Unfortunately Rick was so far gone that he couldn’t, or wouldn’t, be brought back. No amount of coaching, feedback, time off, or assignment to other projects changed his toxic behavior.</p> <p>By this point the whole team knew he was destructive. But the cult of dependence was so strong that everyone believed he was the only option.</p> <p>There is always another option.</p> <p>Your team’s strength is not a function of the talent of individual members. It’s a function of their collaboration, tenacity, and mutual respect.</p> <p>Focus on building teams that value each other and try to bring the best out of one another.</p> <p>Together, they’ll be able to tackle greater challenges than Rick could ever fathom.</p> <p>I have published a follow-up story with our lessons learned if you are interested in reading more! You may also be interested in reading about my first job at a startup, which happened to be imploding around me.</p> <p>You can follow me here or on Twitter @jhsolor for more updates.</p> <p>Note: Some details (such as names) have been changed. I’ve never actually worked with anyone named Rick.</p>]]></description>
			<content:encoded><![CDATA[<p>Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference.</p> <p>In this episode we explore "brilliant jerks" and how to save your development team from them.</p> <p>Written and Read by: Jonathan Solórzano-Hamilton</p> <p>Follow him on Twitter: <a href= "https://twitter.com/jhsolor">https://twitter.com/jhsolor</a></p> <p>His full article on freeCodeCamp's Medium publication: <a href= "https://fcc.im/2BAhnm6">https://fcc.im/2BAhnm6</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p> </p> <p>Transcript:</p> <p>“You will never be able to understand any of what I’ve created. I am Albert F***ing Einstein and you are all monkeys scrabbling in the dirt.”</p> <p>And so our resident genius, our Dr. Jekyll, explosively completed his transformation into Mr. Hyde.</p> <p>He declared this in front of the product design team, developers, management, and pre-launch customers. One of our project sponsors had the temerity to ask when the problem crippling our product would be fixed.</p> <p>Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference.</p> <p>This story is about the fall from grace of an extremely gifted team member with a deep understanding of our product’s architecture. He had an uncanny ability to forecast future requirements, and a ton of domain-specific knowledge.</p> <p>He was our top contributor. He was killing our flagship project.</p> <p>We’ll call this person “Rick.”</p> <p>Rick was universally recognized on the team as the top talent. He was the lead developer and architect of our software projects.</p> <p>Any time anyone had a question about code or needed help with a task, they would go to Rick. Rick had a giant whiteboard installed in his office used only for this purpose. It was always cluttered with the ghosts of past discussions that wouldn’t quite erase.</p> <p>Any time there was a particularly challenging problem, Rick would handle it. Rick had a server with the same specs as our production server installed at his desk. He used this to run the entire application stack independently and troubleshoot every layer at once.</p> <p>Rick didn’t need anybody else. Rick preferred to work alone in his private work-space.</p> <p>Rick didn’t need anything anybody else built. He built everything he needed from scratch because it was infinitely better than the paltry offerings of mere mortals.</p> <p>Soon, Rick stopped attending meetings. Rick didn’t have time for meetings any more because there was too much to code.</p> <p>Rick closed his door. His whiteboard lay fallow. Rick no longer had time to train anyone because he had too much to solve on his own.</p> <p>A backlog grew behind Rick. Bugs were popping up in old tools he’d built. They sapped his attention from meeting commitments on new product development.</p> <p>Of course, these bugs were happening because the users had misstated their assumptions. Of course there wasn’t any problem in his work. Of course.</p> <p>On our project dashboard, green flags changed to yellow. Yellow changed to red. Red lights started blinking. One by one, task statuses changed to “Impeded.” Everyone was waiting for Rick.</p> <p>The project manager got a six-month extension from the sponsor. At the end of the six months, production-readiness was estimated to be seven months away. At the end of a year, production-readiness was two years out.</p> <p>Rick was churning out code faster than ever. He was working seven-day weeks, twelve hours a day.</p> <p>Everyone knew only Rick could pull the team out of this mess. Everyone held their breath and waited for Rick to invent the miracle cure that would mend this crippled project.</p> <p>Every day, Rick grew more belligerent and isolated. The mask was coming off. Jekyll was becoming Hyde.</p> <p>I participated in my first meeting with the project team about two years after the original agreed release date. I’d been aware of the project for a while, because it had grown infamous in my organization, but hadn’t been assigned to it.</p> <p>I was sent in to see if we could save it.</p> <p>My first meeting on the project was the aforementioned “Albert Einstein” meeting.</p> <p>Hmm.</p> <p>I dove into the source code. Rick was right: no-one could possibly understand what Rick had created. Except for Rick. It was a reflection of the workings of his own mind. Some of it was very clever, a lot of it was copy-pasta, it was all very idiosyncratic, and it was not at all documented.</p> <p>I went to our CIO with the verdict. Only Rick would ever be able to maintain this product. Plus, every day that Rick worked on the project moved the delivery date back a week. Rick was destroying our product faster than he was creating it.</p> <p>We sat down with Rick and had a conversation about his role in the project. We reviewed our concerns. We sidestepped his self-comparison to Albert Einstein.</p> <p>We explained our new strategy. The team was going to collaborate on building a new product from scratch.</p> <p>This effort would be very limited in scope and would only provide the bare essentials to get us to production. The whole team would contribute and be able to support it. No more bottlenecks.</p> <p>How did Rick react to this?</p> <p>The only way Rick could. Rick exploded.</p> <p>Rick wanted no part of this farce. If we couldn’t appreciate his genius, that was our fault, not his. Rick predicted that within months we’d come crawling back to him begging him to save us.</p> <p>Rick screamed that we lacked the basic mental capacity to appreciate genius when it was staring us in the face.</p> <p>Sadly, after this, Rick rejected months of overtures by leadership. He refused to take time off or allow any work to be delegated. He rejected repeated attempts to introduce free open source frameworks to replace his hard-to-maintain bespoke tools.</p> <p>He reverted code changes — including tested bug fixes — by other developers. He asserted that he wouldn’t be held accountable for supporting other people’s work. He continued publicly belittling his colleagues.</p> <p>We fired Rick.</p> <p>It took about a week for the dust to settle. It took time for the shocked team to gather themselves after losing their embattled guru.</p> <p>Then I saw them huddled around a whiteboard.</p> <p>They collaborated. They designed a replacement product. It would be much simpler.</p> <p>It wouldn’t have all the bells and whistles. Nor would it anticipate requirements from five years down the product road map.</p> <p>Rick’s product supported a dynamic workflow with over fifteen thousand permutations. In reality 99% of our use cases followed one of three paths. The team hard-coded the workflow. This removed over 30% of Rick’s work.</p> <p>It wouldn’t have custom hand-coded components for every task. They stripped out every bespoke dependency that they could buy instead of build.</p> <p>This removed hundreds of hours of Rick’s contribution. But it also removed thousands of hours of technical debt.</p> <p>We obtained an agreement from the project sponsor to shut off some edge-case functionality.</p> <p>This had served only 5% of our pre-launch user group and was responsible for about a quarter of the product’s complexity.</p> <p>We re-released the product to this group. It consisted of 10% of Rick’s original code which was pretty stable. It also had a few thousand lines of new code to replace about 150,000 lines of incomprehensible mess.</p> <p>The team had replaced five years of work in about six months. Over the next few months we expanded from pilot to full customer release.</p> <p>Not only had we replaced what Rick had built, we sped past him and fully launched the product — all in under a year. The result was less than a fifth the size and complexity of what Rick had built.</p> <p>It was also hundreds of times faster and nearly bug-free despite having been assembled in a fraction of the time and serving ten times as many customers.</p> <p>The team went back to Rick’s other products. They threw away his old code there, too.</p> <p>They re-released another product of his after three years in development, with three months of concerted team effort.</p> <p>There were no Ricks left on the team. We didn’t have any mad geniuses building everything from scratch. But our productivity was never higher.</p> <p>Rick was a very talented developer. Rick could solve complex business logic problems and create sophisticated architectures to support his lofty designs. Rick could not solve the problem of how to work effectively on a team.</p> <p>Rick’s presence was destructive in several ways.</p> <p>First, he created a cult of dependence. Any problem eventually became a Rick problem, a myth he encouraged. Developers learned to stop trying and just wait for Rick.</p> <p>Second, he didn’t write maintainable code. He never documented or tested anything, and so failed in spite of his own intelligence. His belief in his personal infallibility trumped common sense.</p> <p>Third, he was personally destructive. Team members didn’t want to speak up and offer their own ideas because he always berated them for it. Rick only respected Rick and went out of his way to make everyone else feel small.</p> <p>Fourth, he lacked all personal accountability. No failure was his fault. He sincerely believed this, and it prevented him from learning from his own mistakes.</p> <p>I don’t believe Rick started out this way. I saw him at his worst. This was after years of working escalating overtime and facing increasing criticism from customers and colleagues.</p> <p>It’s sad that Rick descended this far. His manager shares in this responsibility. In fact, the original management team was held accountable: they were let go first.</p> <p>Unfortunately Rick was so far gone that he couldn’t, or wouldn’t, be brought back. No amount of coaching, feedback, time off, or assignment to other projects changed his toxic behavior.</p> <p>By this point the whole team knew he was destructive. But the cult of dependence was so strong that everyone believed he was the only option.</p> <p>There is always another option.</p> <p>Your team’s strength is not a function of the talent of individual members. It’s a function of their collaboration, tenacity, and mutual respect.</p> <p>Focus on building teams that value each other and try to bring the best out of one another.</p> <p>Together, they’ll be able to tackle greater challenges than Rick could ever fathom.</p> <p>I have published a follow-up story with our lessons learned if you are interested in reading more! You may also be interested in reading about my first job at a startup, which happened to be imploding around me.</p> <p>You can follow me here or on Twitter @jhsolor for more updates.</p> <p>Note: Some details (such as names) have been changed. I’ve never actually worked with anyone named Rick.</p>]]></content:encoded>
			<enclosure length="13169143" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._10_-_We_Fired_Our_Best_Developer_Talent._Best_Decision_We_Ever_Made.mp3?dest-id=603849" />
			<itunes:duration>13:42</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference. In this episode we explore "brilliant jerks"...]]></itunes:subtitle>
			<itunes:summary>Genius is a fickle beast. Sometimes you have the good fortune to work with a mad genius. Other times you are doomed to work with pure madness. There are also times when it is hard to tell the difference.

In this episode we explore "brilliant jerks" and how to save your development team from them.</itunes:summary>
			<itunes:episode>10</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 9 - How I went from fashion model to software engineer in 1 year</title>
			<itunes:title>How I went from fashion model to software engineer in 1 year</itunes:title>
			<pubDate>Mon, 04 Dec 2017 18:45:56 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[2d9e8eeaf5015b6a97bfa09cd41e4770]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-9-how-i-went-from-fashion-model-to-software-engineer-in-1-year]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Madison tells her story of how she went from being a fashion model with no college degree to full-time software engineer in just one year. She used free online resources including freeCodeCamp, and worked for free at a startup until they hired her.</p> <p>Written and read by Madison Kanna: <a href= "https://twitter.com/MadisonKanna">https://twitter.com/MadisonKanna</a></p> <p>Article link: <a href= "https://fcc.im/2ApFnXO">https://fcc.im/2ApFnXO</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Resources mentioned:</p> <p><a href= "https://discoverpraxis.com">https://discoverpraxis.com</a></p> <p><a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p><a href= "https://www.udacity.com">https://www.udacity.com</a></p> <p><a href= "https://frontendmasters.com/">https://frontendmasters.com/</a></p> <p>Transcript:</p> <p>In 2015 I knew almost nothing about coding. Today, I’m a software engineer and a teacher at a code school for kids.</p> <p>When people find out I work as an engineer, they often ask, “How can I get a job as a software engineer coming from a nontraditional background?”</p> <p>Well, you can’t get more nontraditional than me. I was homeschooled growing up, and I’m a college dropout.</p> <p>When I dropped out, I signed with an agency and modeled for fashion brands. I didn’t know what I wanted to do with my life, but my sister was a software engineer and she loved it. So one day, I took Udacity’s “Intro to Computer Science” course. And I loved it. Coding became my biggest passion.</p> <p>I knew I would become a software engineer. I also knew it might be the hardest thing I ever did. But I resolved to see it through. I was going to make this happen.</p> <p>If you love to code, and keep working toward your goal of becoming a developer, you will get there — no matter where you come from.</p> <p>Here’s how I did it.</p> <p>Figured out how you learn best.</p> <p>After months of teaching myself to code, I knew I needed that next step, so I applied to several coding bootcamps. Yet I realized that I learn best not by studying, but when I am working.</p> <p>Figuring out how I learn most efficiently was a huge help. For you, maybe you need to immerse yourself fully at a bootcamp, or take a part-time online program. For me, I realized I would learn best by jumping headfirst into an engineering internship.</p> <p>But… how could I get one?</p> <p>Build your personal brand.</p> <p>I knew I wanted real-world experience. So I enrolled in Praxis, a program that places young people into apprenticeships at startups. But Praxis focuses on marketing and sales roles, and I was determined to become an engineer. So, I decided to find myself an engineering internship and use Praxis to help me build my personal brand to increase my chances of being hired.</p> <p>I worked with Simon from Praxis, who helped me prepare for interviews and create my online presence.</p> <p>My mom, an entrepreneur and brand expert, encouraged me to blog about coding, speak at meetups, start a YouTube channel, and continue to build my GitHub portfolio.</p> <p>I kept sharing whatever I was learning about. Eventually, when you Googled me you could immediately see that I was passionate about coding.</p> <p>Google yourself. What do you see?</p> <p>Work for free and love the work.</p> <p>While originally I had hoped to get a paying internship, I quickly realized I had a better chance of getting experience as an engineer if I did free work.</p> <p>I found a startup I wanted to work for and pitched myself to them: I’d work for for free as an engineering dev for a few months. Then they could either promote me or let me go depending on how I did. They agreed, and I spent the next few months working harder than I ever have.</p> <p>I relished every moment I spent just fixing one little bug in the app. Later on, I realized that although I didn’t have a ton of technical skills going in, my passion to learn and my excitement to be a part of the team shone through and got me the internship.</p> <p>Even though I was working for free, I loved the work and the team more than any paying job I’ve ever had.</p> <p>Make your nontraditional background a strength, not a weakness.</p> <p>At first, I didn’t want to highlight just how nontraditional my background was. I feared I already stuck out enough just being a female programmer, let alone someone without a CS background. Then my mom said, “Own who you are. Use your previous experiences as a strength.”</p> <p>For my first dev internship, I made it clear I would help out the startup in any way that I could. I talked about the variety of other skills I had picked up way back when I worked for my mom’s company, and how I could utilize those skills while I was also growing into the role of junior developer.</p> <p>I didn’t just try to be an engineering intern. The first week of my internship, I did anything from uploading YouTube videos to writing code to making copy changes.</p> <p>For many startups, they want people who are hungry to learn and get things done — not just code monkeys. What skills from your previous career can you utilize to make yourself valuable, not just as a developer but as a member of the team?</p> <p>A few months into my internship, the company’s CEO, Bryan, sent me a Slack message. “Madison, we want you to work for us.”</p> <p>I was promoted to junior developer. For the first time, I was getting paid to code.</p> <p>Use the haters to push you forward.</p> <p>Many times, when I told someone I was working towards being an engineer, they would look at me and say, “You? An engineer? Are you sure?”</p> <p>For awhile this frustrated me. Then I realized that I wasn’t going to let what anyone said stop me. Each time I heard those comments, I went home and started coding. I used the haters as fuel to keep pushing myself towards my goal.</p> <p>People will always tell you that you can’t do it. When you ignore what they say and just keep going, you develop a trust in yourself and a determination that becomes unstoppable.</p> <p>On the other hand, having a support system who believes you can do it is immensely helpful. I couldn’t have become an engineer without the support of my family.</p> <p>Just keep coding.</p> <p>Getting that first junior developer position was the toughest and most rewarding thing I’ve done. If you focus on your love of code and just keep pushing forward, you will get there. No matter where you’re coming from.</p> <p>So what are you waiting for? Let’s code!</p>]]></description>
			<content:encoded><![CDATA[<p>Madison tells her story of how she went from being a fashion model with no college degree to full-time software engineer in just one year. She used free online resources including freeCodeCamp, and worked for free at a startup until they hired her.</p> <p>Written and read by Madison Kanna: <a href= "https://twitter.com/MadisonKanna">https://twitter.com/MadisonKanna</a></p> <p>Article link: <a href= "https://fcc.im/2ApFnXO">https://fcc.im/2ApFnXO</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Resources mentioned:</p> <p><a href= "https://discoverpraxis.com">https://discoverpraxis.com</a></p> <p><a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p><a href= "https://www.udacity.com">https://www.udacity.com</a></p> <p><a href= "https://frontendmasters.com/">https://frontendmasters.com/</a></p> <p>Transcript:</p> <p>In 2015 I knew almost nothing about coding. Today, I’m a software engineer and a teacher at a code school for kids.</p> <p>When people find out I work as an engineer, they often ask, “How can I get a job as a software engineer coming from a nontraditional background?”</p> <p>Well, you can’t get more nontraditional than me. I was homeschooled growing up, and I’m a college dropout.</p> <p>When I dropped out, I signed with an agency and modeled for fashion brands. I didn’t know what I wanted to do with my life, but my sister was a software engineer and she loved it. So one day, I took Udacity’s “Intro to Computer Science” course. And I loved it. Coding became my biggest passion.</p> <p>I knew I would become a software engineer. I also knew it might be the hardest thing I ever did. But I resolved to see it through. I was going to make this happen.</p> <p>If you love to code, and keep working toward your goal of becoming a developer, you will get there — no matter where you come from.</p> <p>Here’s how I did it.</p> <p>Figured out how you learn best.</p> <p>After months of teaching myself to code, I knew I needed that next step, so I applied to several coding bootcamps. Yet I realized that I learn best not by studying, but when I am working.</p> <p>Figuring out how I learn most efficiently was a huge help. For you, maybe you need to immerse yourself fully at a bootcamp, or take a part-time online program. For me, I realized I would learn best by jumping headfirst into an engineering internship.</p> <p>But… how could I get one?</p> <p>Build your personal brand.</p> <p>I knew I wanted real-world experience. So I enrolled in Praxis, a program that places young people into apprenticeships at startups. But Praxis focuses on marketing and sales roles, and I was determined to become an engineer. So, I decided to find myself an engineering internship and use Praxis to help me build my personal brand to increase my chances of being hired.</p> <p>I worked with Simon from Praxis, who helped me prepare for interviews and create my online presence.</p> <p>My mom, an entrepreneur and brand expert, encouraged me to blog about coding, speak at meetups, start a YouTube channel, and continue to build my GitHub portfolio.</p> <p>I kept sharing whatever I was learning about. Eventually, when you Googled me you could immediately see that I was passionate about coding.</p> <p>Google yourself. What do you see?</p> <p>Work for free and love the work.</p> <p>While originally I had hoped to get a paying internship, I quickly realized I had a better chance of getting experience as an engineer if I did free work.</p> <p>I found a startup I wanted to work for and pitched myself to them: I’d work for for free as an engineering dev for a few months. Then they could either promote me or let me go depending on how I did. They agreed, and I spent the next few months working harder than I ever have.</p> <p>I relished every moment I spent just fixing one little bug in the app. Later on, I realized that although I didn’t have a ton of technical skills going in, my passion to learn and my excitement to be a part of the team shone through and got me the internship.</p> <p>Even though I was working for free, I loved the work and the team more than any paying job I’ve ever had.</p> <p>Make your nontraditional background a strength, not a weakness.</p> <p>At first, I didn’t want to highlight just how nontraditional my background was. I feared I already stuck out enough just being a female programmer, let alone someone without a CS background. Then my mom said, “Own who you are. Use your previous experiences as a strength.”</p> <p>For my first dev internship, I made it clear I would help out the startup in any way that I could. I talked about the variety of other skills I had picked up way back when I worked for my mom’s company, and how I could utilize those skills while I was also growing into the role of junior developer.</p> <p>I didn’t just try to be an engineering intern. The first week of my internship, I did anything from uploading YouTube videos to writing code to making copy changes.</p> <p>For many startups, they want people who are hungry to learn and get things done — not just code monkeys. What skills from your previous career can you utilize to make yourself valuable, not just as a developer but as a member of the team?</p> <p>A few months into my internship, the company’s CEO, Bryan, sent me a Slack message. “Madison, we want you to work for us.”</p> <p>I was promoted to junior developer. For the first time, I was getting paid to code.</p> <p>Use the haters to push you forward.</p> <p>Many times, when I told someone I was working towards being an engineer, they would look at me and say, “You? An engineer? Are you sure?”</p> <p>For awhile this frustrated me. Then I realized that I wasn’t going to let what anyone said stop me. Each time I heard those comments, I went home and started coding. I used the haters as fuel to keep pushing myself towards my goal.</p> <p>People will always tell you that you can’t do it. When you ignore what they say and just keep going, you develop a trust in yourself and a determination that becomes unstoppable.</p> <p>On the other hand, having a support system who believes you can do it is immensely helpful. I couldn’t have become an engineer without the support of my family.</p> <p>Just keep coding.</p> <p>Getting that first junior developer position was the toughest and most rewarding thing I’ve done. If you focus on your love of code and just keep pushing forward, you will get there. No matter where you’re coming from.</p> <p>So what are you waiting for? Let’s code!</p>]]></content:encoded>
			<enclosure length="11026663" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._9_-_How_I_went_from_fashion_model_to_software_engineer_in_1_year.mp3?dest-id=603849" />
			<itunes:duration>11:29</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Madison tells her story of how she went from being a fashion model with no college degree to full-time software engineer in just one year. She used free online resources including freeCodeCamp, and worked for free at a startup until they hired her....]]></itunes:subtitle>
			<itunes:summary>Madison tells her story of how she went from being a fashion model with no college degree to full-time software engineer in just one year. She used free online resources including freeCodeCamp, and worked for free at a startup until they hired her.</itunes:summary>
			<itunes:episode>9</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 8 - I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.</title>
			<itunes:title>I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned.</itunes:title>
			<pubDate>Mon, 27 Nov 2017 21:26:11 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ebbdf6d8b3e20ab0aaaafe9a15300889]]></guid>
			<link><![CDATA[https://traffic.libsyn.com/secure/freecodecamp/Ep._8_-_I_spent_3_months_applying_to_jobs_after_a_coding_bootcamp._Heres_what_I_learned.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Quincy explores Felix Feng's journey from bootcamp grad to professional developer, and how he went from getting $60,000 job offers to $125,000 job offers through sheer practice and persistence.</p> <p>Article by Felix Feng: <a href= "https://twitter.com/felix2feng">https://twitter.com/felix2feng</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Article link: <a href= "https://fcc.im/2iX0LtS">https://fcc.im/2iX0LtS</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Resources mentioned:</p> <p><a href= "https://www.interviewcake.com/">https://www.interviewcake.com</a></p> <p><a href= "https://www.hiredintech.com/classrooms/system-design/lesson/60">https://www.hiredintech.com/classrooms/system-design/lesson/60</a></p> <p><a href= "http://www.coderust.com/questions.html">https://www.educative.io/collection/5642554087309312/5679846214598656</a></p> <p><a href= "https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/"> https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/</a></p> <p><a href= "https://github.com/h5bp/Front-end-Developer-Interview-Questions">https://github.com/h5bp/Front-end-Developer-Interview-Questions</a></p> <p><a href="https://leetcode.com/">https://leetcode.com</a></p> <p>The email tool Felix uses: <a href= "https://rapportive.com/">https://rapportive.com/</a></p> <p> </p> <p>Transcript: </p> <p><br /> A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure developer position.</p> <p>< 3% of applications became offers</p> <p>I completed Hack Reactor in July 2016 and took almost 3 months before accepting an offer with Radius Intelligence. I applied to 291 companies, did 32 phone screens, 16 technical screens, 13 coding challenges, 11 on-sites, and received 8 offers. The offers ranged from $60-125k in salary from companies all over the US, and for both front end and full stack roles. In total, 2.8% of applications became offers.</p> <p>Here are 5 things I wish I’d known before I began my job search.</p> <p>Insight #1: Get through to real people</p> <p>At first, I applied for companies using the shotgun approach. I applied through Indeed.com, AngelList, LinkedIn, StackOverflow, Hacker News, company websites, and even Craigslist.</p> <p>I’d submit a resume for any role that wanted React, Node, or JavaScript experience. In the first week, I applied to 15–20 companies a day.</p> <p>Pro-Tip: Find companies using this easy-application repo.</p> <p>My yield was low. Less than five percent of companies responded to me. I was throwing applications into a black hole.</p> <p>Everything changed when one of my cohort-mates, a former recruiter, shared a guide to the job search. He told us to send emails directly to real people with each application. It could be anybody. As long as someone read it.</p> <p>From then on, whenever I submitted an application, I searched for the company on LinkedIn and emailed someone on their engineering or hiring team.</p> <p>For most small companies or C-level executives, the email format is usually firstName@dreamCompany.com. For larger companies, it may be firstName.lastName@dreamCompany.com.</p> <p>To verify emails, I used Rapportive to cross-check emails with social media accounts.</p> <p>The results were amazing. With 150+ emails sent, my response rate was a whopping 22%.</p> <p>It also felt great to hear from real people. Surprisingly, CEOs and CTOs responded to me. Sometimes they even interviewed me themselves.</p> <p>Takeaway: If you’re applying through the front door, make sure you’re getting to human beings.</p> <p>Insight #2: Start small and work your way up</p> <p>You will face Level 1 interviews (a non-tech company that needs any dev), where interviewers ask you nothing more than JavaScript trivia.</p> <p>You will face Level 9 interviews (Google/Facebook level), where interviewers ask difficult data structure and algorithm questions.</p> <p>I strategically set up my process so that I had lower-level interviews earlier, and higher-level interviews later on.</p> <p>Early on, I gained experience, built confidence, and secured offers from companies that had less intensive interviews.</p> <p>As I got more experience, I effectively “leveled up.” I became capable of completing interviews at companies with higher hiring bars. This is illustrated below as a linear correlation between the number of weeks I was into the process and the base salary I was offered.</p> <p>There’s a direct correlation between time spent interviewing and offer salary.</p> <p>I unlocked tougher questions. I unlocked higher salaries. And eventually, I unlocked the job I took.</p> <p>Takeaway: Plan to tackle easier interviews early on and more difficult ones later on.</p> <p>Insight #3: Study like your future job depends on it (because it does)</p> <p>I hate to break it to you, but the most important thing you could be doing at any point is studying and preparing.</p> <p>Why? Because you won’t get the offer if you don’t have good answers to the questions they ask you.</p> <p>People won’t refer you if they don’t think you’re prepared for their interviews.</p> <p>Coming out of Hack Reactor, my weaknesses were data structures and algorithms. A study by Triplebyte has found that bootcamp grads are weaker in these areas than computer science grads.</p> <p>So I learned and practiced. Every day.</p> <p>I devoted entire days to learning sorting algorithms. Other days, I focused on understanding how the internet worked.</p> <p>If I didn’t fully understand a concept, I’d spend the day watching YouTube videos or searching StackOverflow until I did.</p> <p>I found the following study materials useful:</p> <p>InterviewCake: My favorite resource for data structures and algorithms. It breaks down solutions into step-by-step chunks — a great alternative to Cracking the Code Interview (CTCI). My only gripe is that they don’t have more problems!</p> <p>HiredInTech’s System Design Section: A great guide for system design interview questions.</p> <p>Coderust: If you’re avoiding CTCI like the plague, Coderust 2.0 may be perfect for you. For $49, you get solutions in almost any programming language, with interactive diagrams.</p> <p>Reddit’s How to Prepare for Tech Interviews: I constantly used this as a benchmark for how prepared I was.</p> <p>Front End Interview Questions: An exhaustive list of front-end questions.</p> <p>Leetcode: The go-to resource for algorithm and data structure questions. You can filter by company, so for example, you could get all the questions that Uber or Google typically ask.</p> <p>Takeaway: There’s no such thing as too much preparation.</p> <p>Insight #4: Put your best foot forward</p> <p>Breaking into the industry is hard. You have to perform well, even when you’re not fully prepared. In order to succeed, you have to be your own advocate.</p> <p>Sell Yourself</p> <p>At Hack Reactor, we’re trained to mask our inexperience. In our personal narratives, we purposely omit our bootcamp education.</p> <p>Why? Otherwise, companies automatically categorize us into junior developer roles or tag us as “not enough experience.”</p> <p>In one interview with a startup, the interview immediately went south once they realized I’d done a bootcamp. One company used it against me and made me a $60k offer, benchmarking against junior developers.</p> <p>Ultimately, you need to convince companies that you can do the job.</p> <p>At the same time, you need to convince yourself that you can do the job.</p> <p>You can. Focus on your love for programming. Focus on what you’ve built with React and Node. Focus on demonstrating your deep knowledge in JavaScript and any other languages you’ve learned.</p> <p>Only then can they justify giving you the job.</p> <p>It’s a Two-way Conversation</p> <p>Interviewing is a mutual exploration of fit between an employee and an employer. While it’s your job to convince employers to hire you, it’s also their job to win you over.</p> <p>Don’t be ashamed of using the interview as an opportunity to evaluate the job opportunity.</p> <p>I talked to any company, even if I had only the slightest interest.</p> <p>I did on-sites all over the country with any company that invited me out. I asked questions, and sucked up knowledge on engineering team organization, technologies and tools used, company challenges, and system architecture.</p> <p>Pro-Tip: During interviews, ask the following questions:</p> <p>What are some technical challenges you’ve recently faced?</p> <p>What do you enjoy about working at X company?</p> <p>How are teams structured and how are tasks usually divided?</p> <p>I treated every interaction as a learning opportunity. Each interaction helped me improve my presentation, interview, and technical skills. Each failure helped me find my blind spots.</p> <p>Takeaway: Don’t sell yourself short! And remember, it’s a mutual exploration.</p> <p>Insight #5: It’s a marathon, not a sprint</p> <p>The journey is by no means easy. For 3 months, I grinded 6 days a week. But I tried to take care of myself.</p> <p>What a typical day could look like in JavaScript</p> <p>Some days, I’d study with friends. Other days, I’d go find a cafe and study alone, or hang out at Hack Reactor’s alumni lounge. And every week I’d check in with our career counselor to talk about my progress.</p> <p>It’s easy to burn out during the process. Eat well, sleep, and exercise.</p> <p>It can get lonely. Spend time with friends who are going through the same experience.</p> <p>Takeaway: Prepare for the long game and make sure you take care of yourself.</p> <p>In summary, the key takeaways are:</p> <p>Get through to real people</p> <p>Start small and work your way up</p> <p>Study like your future job depends on it</p> <p>Put your best foot forward</p> <p>It’s a marathon, not a sprint</p> <p>The process may seem endless, but you’re going to make it. Keep putting in the hours. Keep sending in the applications. Keep taking caring of yourself. All of it pays off in the end.</p>]]></description>
			<content:encoded><![CDATA[<p>Quincy explores Felix Feng's journey from bootcamp grad to professional developer, and how he went from getting $60,000 job offers to $125,000 job offers through sheer practice and persistence.</p> <p>Article by Felix Feng: <a href= "https://twitter.com/felix2feng">https://twitter.com/felix2feng</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Article link: <a href= "https://fcc.im/2iX0LtS">https://fcc.im/2iX0LtS</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Intro music by Vangough: <a href= "https://fcc.im/2APOG02">https://fcc.im/2APOG02</a></p> <p>Resources mentioned:</p> <p><a href= "https://www.interviewcake.com/">https://www.interviewcake.com</a></p> <p><a href= "https://www.hiredintech.com/classrooms/system-design/lesson/60">https://www.hiredintech.com/classrooms/system-design/lesson/60</a></p> <p><a href= "http://www.coderust.com/questions.html">https://www.educative.io/collection/5642554087309312/5679846214598656</a></p> <p><a href= "https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/"> https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/</a></p> <p><a href= "https://github.com/h5bp/Front-end-Developer-Interview-Questions">https://github.com/h5bp/Front-end-Developer-Interview-Questions</a></p> <p><a href="https://leetcode.com/">https://leetcode.com</a></p> <p>The email tool Felix uses: <a href= "https://rapportive.com/">https://rapportive.com/</a></p> <p> </p> <p>Transcript: </p> <p> A less-talked about part of the bootcamper’s journey is what happens after you graduate — when you’re searching for that six-figure developer position.</p> <p>< 3% of applications became offers</p> <p>I completed Hack Reactor in July 2016 and took almost 3 months before accepting an offer with Radius Intelligence. I applied to 291 companies, did 32 phone screens, 16 technical screens, 13 coding challenges, 11 on-sites, and received 8 offers. The offers ranged from $60-125k in salary from companies all over the US, and for both front end and full stack roles. In total, 2.8% of applications became offers.</p> <p>Here are 5 things I wish I’d known before I began my job search.</p> <p>Insight #1: Get through to real people</p> <p>At first, I applied for companies using the shotgun approach. I applied through Indeed.com, AngelList, LinkedIn, StackOverflow, Hacker News, company websites, and even Craigslist.</p> <p>I’d submit a resume for any role that wanted React, Node, or JavaScript experience. In the first week, I applied to 15–20 companies a day.</p> <p>Pro-Tip: Find companies using this easy-application repo.</p> <p>My yield was low. Less than five percent of companies responded to me. I was throwing applications into a black hole.</p> <p>Everything changed when one of my cohort-mates, a former recruiter, shared a guide to the job search. He told us to send emails directly to real people with each application. It could be anybody. As long as someone read it.</p> <p>From then on, whenever I submitted an application, I searched for the company on LinkedIn and emailed someone on their engineering or hiring team.</p> <p>For most small companies or C-level executives, the email format is usually firstName@dreamCompany.com. For larger companies, it may be firstName.lastName@dreamCompany.com.</p> <p>To verify emails, I used Rapportive to cross-check emails with social media accounts.</p> <p>The results were amazing. With 150+ emails sent, my response rate was a whopping 22%.</p> <p>It also felt great to hear from real people. Surprisingly, CEOs and CTOs responded to me. Sometimes they even interviewed me themselves.</p> <p>Takeaway: If you’re applying through the front door, make sure you’re getting to human beings.</p> <p>Insight #2: Start small and work your way up</p> <p>You will face Level 1 interviews (a non-tech company that needs any dev), where interviewers ask you nothing more than JavaScript trivia.</p> <p>You will face Level 9 interviews (Google/Facebook level), where interviewers ask difficult data structure and algorithm questions.</p> <p>I strategically set up my process so that I had lower-level interviews earlier, and higher-level interviews later on.</p> <p>Early on, I gained experience, built confidence, and secured offers from companies that had less intensive interviews.</p> <p>As I got more experience, I effectively “leveled up.” I became capable of completing interviews at companies with higher hiring bars. This is illustrated below as a linear correlation between the number of weeks I was into the process and the base salary I was offered.</p> <p>There’s a direct correlation between time spent interviewing and offer salary.</p> <p>I unlocked tougher questions. I unlocked higher salaries. And eventually, I unlocked the job I took.</p> <p>Takeaway: Plan to tackle easier interviews early on and more difficult ones later on.</p> <p>Insight #3: Study like your future job depends on it (because it does)</p> <p>I hate to break it to you, but the most important thing you could be doing at any point is studying and preparing.</p> <p>Why? Because you won’t get the offer if you don’t have good answers to the questions they ask you.</p> <p>People won’t refer you if they don’t think you’re prepared for their interviews.</p> <p>Coming out of Hack Reactor, my weaknesses were data structures and algorithms. A study by Triplebyte has found that bootcamp grads are weaker in these areas than computer science grads.</p> <p>So I learned and practiced. Every day.</p> <p>I devoted entire days to learning sorting algorithms. Other days, I focused on understanding how the internet worked.</p> <p>If I didn’t fully understand a concept, I’d spend the day watching YouTube videos or searching StackOverflow until I did.</p> <p>I found the following study materials useful:</p> <p>InterviewCake: My favorite resource for data structures and algorithms. It breaks down solutions into step-by-step chunks — a great alternative to Cracking the Code Interview (CTCI). My only gripe is that they don’t have more problems!</p> <p>HiredInTech’s System Design Section: A great guide for system design interview questions.</p> <p>Coderust: If you’re avoiding CTCI like the plague, Coderust 2.0 may be perfect for you. For $49, you get solutions in almost any programming language, with interactive diagrams.</p> <p>Reddit’s How to Prepare for Tech Interviews: I constantly used this as a benchmark for how prepared I was.</p> <p>Front End Interview Questions: An exhaustive list of front-end questions.</p> <p>Leetcode: The go-to resource for algorithm and data structure questions. You can filter by company, so for example, you could get all the questions that Uber or Google typically ask.</p> <p>Takeaway: There’s no such thing as too much preparation.</p> <p>Insight #4: Put your best foot forward</p> <p>Breaking into the industry is hard. You have to perform well, even when you’re not fully prepared. In order to succeed, you have to be your own advocate.</p> <p>Sell Yourself</p> <p>At Hack Reactor, we’re trained to mask our inexperience. In our personal narratives, we purposely omit our bootcamp education.</p> <p>Why? Otherwise, companies automatically categorize us into junior developer roles or tag us as “not enough experience.”</p> <p>In one interview with a startup, the interview immediately went south once they realized I’d done a bootcamp. One company used it against me and made me a $60k offer, benchmarking against junior developers.</p> <p>Ultimately, you need to convince companies that you can do the job.</p> <p>At the same time, you need to convince yourself that you can do the job.</p> <p>You can. Focus on your love for programming. Focus on what you’ve built with React and Node. Focus on demonstrating your deep knowledge in JavaScript and any other languages you’ve learned.</p> <p>Only then can they justify giving you the job.</p> <p>It’s a Two-way Conversation</p> <p>Interviewing is a mutual exploration of fit between an employee and an employer. While it’s your job to convince employers to hire you, it’s also their job to win you over.</p> <p>Don’t be ashamed of using the interview as an opportunity to evaluate the job opportunity.</p> <p>I talked to any company, even if I had only the slightest interest.</p> <p>I did on-sites all over the country with any company that invited me out. I asked questions, and sucked up knowledge on engineering team organization, technologies and tools used, company challenges, and system architecture.</p> <p>Pro-Tip: During interviews, ask the following questions:</p> <p>What are some technical challenges you’ve recently faced?</p> <p>What do you enjoy about working at X company?</p> <p>How are teams structured and how are tasks usually divided?</p> <p>I treated every interaction as a learning opportunity. Each interaction helped me improve my presentation, interview, and technical skills. Each failure helped me find my blind spots.</p> <p>Takeaway: Don’t sell yourself short! And remember, it’s a mutual exploration.</p> <p>Insight #5: It’s a marathon, not a sprint</p> <p>The journey is by no means easy. For 3 months, I grinded 6 days a week. But I tried to take care of myself.</p> <p>What a typical day could look like in JavaScript</p> <p>Some days, I’d study with friends. Other days, I’d go find a cafe and study alone, or hang out at Hack Reactor’s alumni lounge. And every week I’d check in with our career counselor to talk about my progress.</p> <p>It’s easy to burn out during the process. Eat well, sleep, and exercise.</p> <p>It can get lonely. Spend time with friends who are going through the same experience.</p> <p>Takeaway: Prepare for the long game and make sure you take care of yourself.</p> <p>In summary, the key takeaways are:</p> <p>Get through to real people</p> <p>Start small and work your way up</p> <p>Study like your future job depends on it</p> <p>Put your best foot forward</p> <p>It’s a marathon, not a sprint</p> <p>The process may seem endless, but you’re going to make it. Keep putting in the hours. Keep sending in the applications. Keep taking caring of yourself. All of it pays off in the end.</p>]]></content:encoded>
			<enclosure length="9421992" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._8_-_I_spent_3_months_applying_to_jobs_after_a_coding_bootcamp._Heres_what_I_learned.mp3?dest-id=603849" />
			<itunes:duration>09:48</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Quincy explores Felix Feng's journey from bootcamp grad to professional developer, and how he went from getting $60,000 job offers to $125,000 job offers through sheer practice and persistence. Article by Felix...]]></itunes:subtitle>
			<itunes:summary>Quincy explores Felix Feng's journey from bootcamp grad to professional developer, and how he went from getting $60,000 job offers to $125,000 job offers through sheer practice and persistence.</itunes:summary>
			<itunes:episode>8</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 7 - The code I’m still ashamed of</title>
			<itunes:title>The code I’m still ashamed of</itunes:title>
			<pubDate>Mon, 20 Nov 2017 19:24:02 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[abeea38a52e43b90b33635b078c3c5bf]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/ep-7-the-code-im-still-ashamed-of]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<div>Canadian software engineer Bill Sourour recounts a tragic experience early in his developer career when writing code for a pharmaceutical company. He explores developer ethics, the responsibilities developers have, and the challenges they face in sticking to their values.</div> <div> </div> <div>Written by and read by Bill Sourour: <a href= "https://twitter.com/billsourour">https://twitter.com/billsourour</a><br />   </div> <div>Original Article:</div> <div><a href= "https://medium.freecodecamp.org/the-code-im-still-ashamed-of-e4c021dff55e" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://medium.freecodecamp.org/the-code-im-still-ashamed-of-e4c021dff55e&source=gmail&ust=1511285659674000&usg=AFQjCNH7NVGHtPEuD-hQxjMpTLI13sL0ww"> https://medium.freecodecamp.<wbr />org/the-code-im-still-ashamed-<wbr />of-e4c021dff55e</a> </div> <div> </div> <div>The Future of Programming by Bob Martin:</div> <div><a href="https://youtu.be/ecIWPzGEbFc" target="_blank" rel= "noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://youtu.be/ecIWPzGEbFc&source=gmail&ust=1511285659674000&usg=AFQjCNFQZLGg1Gzf2rx1gPqj-8Mpq7vAPg"> https://youtu.be/ecIWPzGEbFc</a> </div> <div> </div> <div>Business Insider Story:</div> <div>"Programmers are having a huge discussion about the unethical and illegal things they’ve been asked to do”</div> <div><a href= "http://www.businessinsider.com/programmers-confess-unethical-illegal-tasks-asked-of-them-2016-11?op=1" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=http://www.businessinsider.com/programmers-confess-unethical-illegal-tasks-asked-of-them-2016-11?op%3D1&source=gmail&ust=1511285659674000&usg=AFQjCNHe5rE7LJAd1r1PGQONLpxVoT7xPw"> http://www.businessinsider.<wbr />com/programmers-confess-<wbr />unethical-illegal-tasks-asked-<wbr />of-them-2016-11?op=1</a></div> <div> </div> <div>CBC Interview</div> <div><a href= "http://www.cbc.ca/radio/the180/stop-subsidizing-seniors-good-judges-can-make-bad-decisions-and-which-canadian-city-is-the-most-american-1.4028473/creating-a-code-of-ethics-for-coders-1.4028677" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=http://www.cbc.ca/radio/the180/stop-subsidizing-seniors-good-judges-can-make-bad-decisions-and-which-canadian-city-is-the-most-american-1.4028473/creating-a-code-of-ethics-for-coders-1.4028677&source=gmail&ust=1511285659674000&usg=AFQjCNEY2D3aLy2WysZh8Qz96PL53Zdigw"> http://www.cbc.ca/radio/<wbr />the180/stop-subsidizing-<wbr />seniors-good-judges-can-make-<wbr />bad-decisions-and-which-<wbr />canadian-city-is-the-most-<wbr />american-1.4028473/creating-a-<wbr />code-of-ethics-for-coders-1.<wbr />4028677</a></div> <div> </div> <div>Code Newbie Interview</div> <div><a href= "https://www.codenewbie.org/podcast/the-ethics-of-coding" target= "_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://www.codenewbie.org/podcast/the-ethics-of-coding&source=gmail&ust=1511285659674000&usg=AFQjCNFUD_HFCubwZ4xYhMh0Uayv4IiW0Q"> https://www.codenewbie.org/<wbr />podcast/the-ethics-of-coding</a></div> <div> </div> <div>Developer Ethics on FCC Guide</div> <div><a href="https://guide.freecodecamp.org/developer-ethics" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://guide.freecodecamp.org/developer-ethics&source=gmail&ust=1511285659674000&usg=AFQjCNHM6AERId2IFqpkg7BUDPv-VGBRjw"> https://guide.freecodecamp.<wbr />org/developer-ethics</a></div> <div> </div> <div>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></div> <div> </div> <div>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></div> <div> </div> <div>Transcript: </div> <p><br /> If you write code for a living, there’s a chance that at some point in your career, someone will ask you to code something a little deceitful – if not outright unethical.</p> <p>This happened to me back in the year 2000. And it’s something I’ll never be able to forget.</p> <p>I wrote my first line of code at 6 years old. I’m no prodigy though. I had a lot of help from my dad at the time. But I was hooked. I loved it.</p> <p>By the time I was 15, I was working part-time for my dad’s consulting firm. I built websites and coded small components for business apps on weekends and in the summer.</p> <p>I was woefully underpaid. But as my dad still likes to point out, I got free room and board, and some pretty valuable work experience.</p> <p>Later, I managed to help fund a part of my education through a few freelance coding gigs. I built a couple of early e-commerce sites for some local small businesses.</p> <p>By age 21, I managed to land a full-time coding job with an interactive marketing firm in Toronto, Canada.</p> <p>The firm had been founded by a medical doctor and many of its clients were large pharmaceutical companies.</p> <p>In Canada, there are strict limits on how pharmaceutical companies can advertise prescription drugs directly to consumers.</p> <p>As a result, these companies would create websites that present general information about whatever symptoms their drugs were meant to address. Then, if a visitor could prove they had a prescription, they were given access to a patient portal with more specific info about the drug.</p> <p>The home page of edfactscanada.com circa 2001, via The Internet Archive</p> <p>One of the projects I was assigned to involved a drug that was targeted at women. The graphics and general style of the website made it clear that the client wanted to specifically target teenage girls.</p> <p>One of the features of this website was a quiz that asked girls a series of questions and recommended a type of drug based on their answers.</p> <p>Remember, this website was posing as a general information site. It was not clearly an advertisement for any particular drug.</p> <p>When I received the requirements, they contained the questions for the quiz, along with multiple choice answers for each question.</p> <p>Missing from the requirements was any indication of what I should do with the answers at the end of the quiz. So what rules determined what treatment the quiz would recommend?</p> <p>I spoke to the Account Manager about this. She emailed the client and got me the requirements. With those, I proceeded to code up the quiz.</p> <p>Before submitting the website to the client, my project manager decided to give it a quick test. She tried the quiz, then came over to my desk:</p> <p>“The quiz doesn’t work,” she said.</p> <p>“Oh. What’s broken?” I asked.</p> <p>“Well, it seems that no matter what I do, the quiz recommends the client’s drug as the best possible treatment. The only exception is if I say I’m allergic. Or if I say I am already taking it.”</p> <p>“Yes. That’s what the requirements say to do. Everything leads to the client’s drug.”</p> <p>“Oh. Okay. Cool.”</p> <p>And she was off.</p> <p>I wish I could tell you that when I first saw those requirements they bothered me. I wish I could tell you that it felt wrong to code something that was basically designed to trick young girls. But the truth is, I didn’t think much of it at the time. I had a job to do, and I did it.</p> <p>Nothing that we were doing was illegal. As the youngest developer on my team, I was making good money for my age. And in the end, I understood that the real purpose of the site was to push a particular drug. So, I chalked this tactic up to “marketing.”</p> <p>The client was extremely pleased with the site. So much so that their rep invited me and the entire team out to a fancy steak dinner.</p> <p>The day of the dinner, shortly before leaving the office, a colleague emailed me a link to a news report online. It was about a young girl who had taken the drug I’d built the website for.</p> <p>She had killed herself.</p> <p>It turned out that among the main side effects of that drug were severe depression and suicidal thoughts.</p> <p>The colleague who had emailed me didn’t show up to dinner.</p> <p>I still went. It was difficult and awkward. I never mentioned the news report. I just ate my steak quietly and tried to force a smile when I could.</p> <p>The next day, I called my sister. She was 19 at the time. We had discovered while working on the project that she had actually been prescribed the very drug I was building a site for.</p> <p>When we first talked about it, we thought the whole thing was a neat coincidence. Now, the tone of our conversation was very different. I advised her to get off the drug ASAP. Thankfully, she listened.</p> <p>There are a million and one ways for me to rationalize my part in later suicides and severe depression. Even today, there is ongoing litigation with former patients.</p> <p>It’s easy to make an argument that I had no part in it at all. Still, I’ve never felt okay about writing that code.</p> <p>Not long after that dinner, I resigned.</p> <p>As developers, we are often one of the last lines of defense against potentially dangerous and unethical practices.</p> <p>We’re approaching a time where software will drive the vehicle that transports your family to soccer practice. There are already AI programs that help doctors diagnose disease. It’s not hard to imagine them recommending prescription drugs soon, too.</p> <p>The more software continues to take over every aspect of our lives, the more important it will be for us to take a stand and ensure that our ethics are ever-present in our code.</p> <p>Since that day, I always try to think twice about the effects of my code before I write it. I hope that you will too.</p>]]></description>
			<content:encoded><![CDATA[Canadian software engineer Bill Sourour recounts a tragic experience early in his developer career when writing code for a pharmaceutical company. He explores developer ethics, the responsibilities developers have, and the challenges they face in sticking to their values.   Written by and read by Bill Sourour: <a href= "https://twitter.com/billsourour">https://twitter.com/billsourour</a>    Original Article: <a href= "https://medium.freecodecamp.org/the-code-im-still-ashamed-of-e4c021dff55e" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://medium.freecodecamp.org/the-code-im-still-ashamed-of-e4c021dff55e&source=gmail&ust=1511285659674000&usg=AFQjCNH7NVGHtPEuD-hQxjMpTLI13sL0ww"> https://medium.freecodecamp.org/the-code-im-still-ashamed-of-e4c021dff55e</a>    The Future of Programming by Bob Martin: <a href="https://youtu.be/ecIWPzGEbFc" target="_blank" rel= "noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://youtu.be/ecIWPzGEbFc&source=gmail&ust=1511285659674000&usg=AFQjCNFQZLGg1Gzf2rx1gPqj-8Mpq7vAPg"> https://youtu.be/ecIWPzGEbFc</a>    Business Insider Story: "Programmers are having a huge discussion about the unethical and illegal things they’ve been asked to do” <a href= "http://www.businessinsider.com/programmers-confess-unethical-illegal-tasks-asked-of-them-2016-11?op=1" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=http://www.businessinsider.com/programmers-confess-unethical-illegal-tasks-asked-of-them-2016-11?op%3D1&source=gmail&ust=1511285659674000&usg=AFQjCNHe5rE7LJAd1r1PGQONLpxVoT7xPw"> http://www.businessinsider.com/programmers-confess-unethical-illegal-tasks-asked-of-them-2016-11?op=1</a>   CBC Interview <a href= "http://www.cbc.ca/radio/the180/stop-subsidizing-seniors-good-judges-can-make-bad-decisions-and-which-canadian-city-is-the-most-american-1.4028473/creating-a-code-of-ethics-for-coders-1.4028677" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=http://www.cbc.ca/radio/the180/stop-subsidizing-seniors-good-judges-can-make-bad-decisions-and-which-canadian-city-is-the-most-american-1.4028473/creating-a-code-of-ethics-for-coders-1.4028677&source=gmail&ust=1511285659674000&usg=AFQjCNEY2D3aLy2WysZh8Qz96PL53Zdigw"> http://www.cbc.ca/radio/the180/stop-subsidizing-seniors-good-judges-can-make-bad-decisions-and-which-canadian-city-is-the-most-american-1.4028473/creating-a-code-of-ethics-for-coders-1.4028677</a>   Code Newbie Interview <a href= "https://www.codenewbie.org/podcast/the-ethics-of-coding" target= "_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://www.codenewbie.org/podcast/the-ethics-of-coding&source=gmail&ust=1511285659674000&usg=AFQjCNFUD_HFCubwZ4xYhMh0Uayv4IiW0Q"> https://www.codenewbie.org/podcast/the-ethics-of-coding</a>   Developer Ethics on FCC Guide <a href="https://guide.freecodecamp.org/developer-ethics" target="_blank" rel="noopener" data-saferedirecturl= "https://www.google.com/url?hl=en&q=https://guide.freecodecamp.org/developer-ethics&source=gmail&ust=1511285659674000&usg=AFQjCNHM6AERId2IFqpkg7BUDPv-VGBRjw"> https://guide.freecodecamp.org/developer-ethics</a>   Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a>   Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a>   Transcript:  <p> If you write code for a living, there’s a chance that at some point in your career, someone will ask you to code something a little deceitful – if not outright unethical.</p> <p>This happened to me back in the year 2000. And it’s something I’ll never be able to forget.</p> <p>I wrote my first line of code at 6 years old. I’m no prodigy though. I had a lot of help from my dad at the time. But I was hooked. I loved it.</p> <p>By the time I was 15, I was working part-time for my dad’s consulting firm. I built websites and coded small components for business apps on weekends and in the summer.</p> <p>I was woefully underpaid. But as my dad still likes to point out, I got free room and board, and some pretty valuable work experience.</p> <p>Later, I managed to help fund a part of my education through a few freelance coding gigs. I built a couple of early e-commerce sites for some local small businesses.</p> <p>By age 21, I managed to land a full-time coding job with an interactive marketing firm in Toronto, Canada.</p> <p>The firm had been founded by a medical doctor and many of its clients were large pharmaceutical companies.</p> <p>In Canada, there are strict limits on how pharmaceutical companies can advertise prescription drugs directly to consumers.</p> <p>As a result, these companies would create websites that present general information about whatever symptoms their drugs were meant to address. Then, if a visitor could prove they had a prescription, they were given access to a patient portal with more specific info about the drug.</p> <p>The home page of edfactscanada.com circa 2001, via The Internet Archive</p> <p>One of the projects I was assigned to involved a drug that was targeted at women. The graphics and general style of the website made it clear that the client wanted to specifically target teenage girls.</p> <p>One of the features of this website was a quiz that asked girls a series of questions and recommended a type of drug based on their answers.</p> <p>Remember, this website was posing as a general information site. It was not clearly an advertisement for any particular drug.</p> <p>When I received the requirements, they contained the questions for the quiz, along with multiple choice answers for each question.</p> <p>Missing from the requirements was any indication of what I should do with the answers at the end of the quiz. So what rules determined what treatment the quiz would recommend?</p> <p>I spoke to the Account Manager about this. She emailed the client and got me the requirements. With those, I proceeded to code up the quiz.</p> <p>Before submitting the website to the client, my project manager decided to give it a quick test. She tried the quiz, then came over to my desk:</p> <p>“The quiz doesn’t work,” she said.</p> <p>“Oh. What’s broken?” I asked.</p> <p>“Well, it seems that no matter what I do, the quiz recommends the client’s drug as the best possible treatment. The only exception is if I say I’m allergic. Or if I say I am already taking it.”</p> <p>“Yes. That’s what the requirements say to do. Everything leads to the client’s drug.”</p> <p>“Oh. Okay. Cool.”</p> <p>And she was off.</p> <p>I wish I could tell you that when I first saw those requirements they bothered me. I wish I could tell you that it felt wrong to code something that was basically designed to trick young girls. But the truth is, I didn’t think much of it at the time. I had a job to do, and I did it.</p> <p>Nothing that we were doing was illegal. As the youngest developer on my team, I was making good money for my age. And in the end, I understood that the real purpose of the site was to push a particular drug. So, I chalked this tactic up to “marketing.”</p> <p>The client was extremely pleased with the site. So much so that their rep invited me and the entire team out to a fancy steak dinner.</p> <p>The day of the dinner, shortly before leaving the office, a colleague emailed me a link to a news report online. It was about a young girl who had taken the drug I’d built the website for.</p> <p>She had killed herself.</p> <p>It turned out that among the main side effects of that drug were severe depression and suicidal thoughts.</p> <p>The colleague who had emailed me didn’t show up to dinner.</p> <p>I still went. It was difficult and awkward. I never mentioned the news report. I just ate my steak quietly and tried to force a smile when I could.</p> <p>The next day, I called my sister. She was 19 at the time. We had discovered while working on the project that she had actually been prescribed the very drug I was building a site for.</p> <p>When we first talked about it, we thought the whole thing was a neat coincidence. Now, the tone of our conversation was very different. I advised her to get off the drug ASAP. Thankfully, she listened.</p> <p>There are a million and one ways for me to rationalize my part in later suicides and severe depression. Even today, there is ongoing litigation with former patients.</p> <p>It’s easy to make an argument that I had no part in it at all. Still, I’ve never felt okay about writing that code.</p> <p>Not long after that dinner, I resigned.</p> <p>As developers, we are often one of the last lines of defense against potentially dangerous and unethical practices.</p> <p>We’re approaching a time where software will drive the vehicle that transports your family to soccer practice. There are already AI programs that help doctors diagnose disease. It’s not hard to imagine them recommending prescription drugs soon, too.</p> <p>The more software continues to take over every aspect of our lives, the more important it will be for us to take a stand and ensure that our ethics are ever-present in our code.</p> <p>Since that day, I always try to think twice about the effects of my code before I write it. I hope that you will too.</p>]]></content:encoded>
			<enclosure length="9586146" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Ep._7_-_The_code_Im_still_ashamed_of.mp3?dest-id=603849" />
			<itunes:duration>09:59</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Canadian software engineer Bill Sourour recounts a tragic experience early in his developer career when writing code for a pharmaceutical company. He explores developer ethics, the responsibilities developers have, and the challenges they face in...]]></itunes:subtitle>
			<itunes:summary>Canadian software engineer Bill Sourour recounts a tragic experience early in his developer career when writing code for a pharmaceutical company. He explores developer ethics, the responsibilities developers have, and the challenges they face in sticking to their values.</itunes:summary>
			<itunes:episode>7</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 6 - Which Programming Language Should You Learn First?</title>
			<itunes:title>Which Programming Language Should You Learn First?</itunes:title>
			<pubDate>Fri, 17 Nov 2017 00:24:22 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[f8b1004289acc2a5c4c64d15e1796c47]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/which-programming-language-should-you-learn-first]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/b/1/1/4/b114900f9897f086/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Quincy reads his popular article on how to choose your first programming language when you learn to code.</p> <p><br /> He discusses Python, Java, JavaScript, Ruby, and C++ in terms of:</p> <p>- the job market for the language<br /> - the long term prospects for the language<br /> - how easy the language is to learn<br /> - what projects you can build while you’re learning (and share with friends so you can stay motivated)</p> <p>Read by Quincy Larson (https://twitter.com/ossia)</p> <p>Article link: <a href= "https://fcc.im/2yCMatt">https://fcc.im/2yCMatt</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p>Most people’s journey toward learning to program starts with a single late-night Google search.</p> <p>Usually it’s something like “Learn ______”</p> <p>But how do they decide which language to search for?</p> <p>“They always joke about Java on Silicon Valley. I guess I should learn that.”</p> <p>Or:</p> <p>“Haskell. So hot right now. Haskell.”</p> <p>Or:</p> <p>“That Go gopher is just so gosh-darn cute.”</p> <p>And then there’s the rest of us. We’ll probably search for something like:</p> <p>“Which programming language should I learn first?”</p> <p>Few questions are so commonly asked that they get the full infographic treatment. But this is one of them:</p> <p>Deciding on your first programming language can be a fun process — kind of like one of those “Which Quentin Tarantino character are you?” personality quizzes.</p> <p>But before you run off to learn Ruby because you enjoyed playing with Play-Doh as a kid, let me remind you: the stakes are pretty high here.</p> <p>It will take you hundreds of hours of practice to become even remotely competent with your first programming language.</p> <p>So you should consider the following factors:</p> <p>- the job market for the language</p> <p>- the long term prospects for the language</p> <p>- how easy the language is to learn</p> <p>- what projects you can build while you’re learning (and share with friends so you can stay motivated)</p> <p>Every year brings new programming languages, and with them, new academic papers. And new web comics.</p> <p>Seriously. Check out this gem from last month:</p> <p>When it comes to choosing a first programming language, there’s no shortage of options. To narrow it down a bit, here are the most common Google searches related to learning programming, over the past 12 years:</p> <p>Java has had its ups and downs.</p> <p>Python has gradually risen to become the most popular choice.</p> <p>But tucked away below these is the Little Engine That Could, slowly choo-choo’ing up in popularity over the past few years. And that engine is JavaScript.</p> <p>Before I talk about these programming languages, let me clarify:</p> <p>I’m not arguing that any one language is objectively better than any other</p> <p>I agree that developers should eventually learn more than one language</p> <p>I’m arguing that first they should learn one language well. And — as you can probably guess from the upside down text in my headline — that language should be JavaScript.</p> <p>Let’s kick things off by exploring how programming is currently taught in school.</p> <p>Computer Science 101</p> <p>Universities have traditionally taught programming under the umbrella of computer science, which itself is often seen as an extension of mathematics, or tie-in to an electrical engineering degree.</p> <p>Of course, as you may have heard by now:</p> <p>“Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.” — Eric S. Raymond</p> <p>As of 2016, many universities still treat programming like it’s computer science, and computer science like it’s math.</p> <p>As a result, many introductory programming courses focus on low-level-of-abstraction languages like C, or mathematically-focused languages like MATLAB.</p> <p>And department chairs generally stay the course, pointing to annual programming language leaderboards like the TIOBE Index, or this one from the IEEE:</p> <p>Most of these leaderboards look virtually identical to how they were 10 years ago.</p> <p>But change does happen. Even in academia.</p> <p>In 2014, Python overtook Java as a the most popular language of instruction at top US Computer Science programs.</p> <p>And yet another change is bound to… eventually… happen.</p> <p>Because if you look at the languages actually used by the workforce, it paints a very different picture:</p> <p>JavaScript is by far the most popular language used by the 49,397 developers who responded to Stack Overflow’s 2016 Survey.</p> <p>More than half of all developers use JavaScript. It’s vital to front-end web development and increasingly relevant for back-end development. And it’s rapidly expanding into areas like game development and the Internet of Things.</p> <p>Job postings also mention JavaScript more than any programming language other than Java:</p> <p>Data from the world’s largest job posting aggregator, Indeed.com</p> <p>It’s no accident that we built our open source community’s curriculum around JavaScript. Over the past two years, more than 5,000 people have used Free Code Camp to get their first developer job.</p> <p>I’m not advocating JavaScript because I teach it. I teach JavaScript because it’s the surest path to a first developer job.</p> <p>But is JavaScript right for you? Is it worthy of being your first programming language? Let’s explore those factors I mentioned earlier.</p> <p>Factor #1: The job market</p> <p>If you’re learning to program purely out of intellectual curiosity, feel free to skip this factor. But if you — like the vast majority of people learning to program — want to use this skill to get a job, this is an important consideration.</p> <p>As I mentioned earlier, Java is mentioned in more job postings than any other programming language. JavaScript is a close second.</p> <p>But here’s the thing about JavaScript: even though it’s been around for 20 years, it only recently became a serious tool that companies like Netflix, Walmart, and PayPal would build entire applications around.</p> <p>As a result, plenty of companies are hiring JavaScript developers, but there just aren’t that many on the job market.</p> <p>There are 2.7 Java developers competing for every open Java position. Competition for PHP and iOS jobs is similarly fierce.</p> <p>But for every open JavaScript position, there are only 0.6 JavaScript developers. It is very much a sellers’ market for developers with JavaScript skills.</p> <p>Factor #2: The long term prospects</p> <p>The average JavaScript project receives twice as many pull requests as the average Java, Python, or Ruby project. And on top of this, JavaScript is growing faster than any other popular language.</p> <p>Source: The GitHub’s 2016 State of the Octoverse</p> <p>JavaScript’s ecosystem also benefits from a heavy investment of money and engineering talent from companies like Google, Microsoft, Facebook, and Netflix.</p> <p>For example, TypeScript (a statically-typed superset of JavaScript) has more than 100 open source contributors, many of whom are Microsoft and Google employees being paid to work on it.</p> <p>This type of inter-company cooperation is harder to find with Java. Oracle — who effectively owns Java through its acquisition of Sun Microsystems — often sues companies who try to expand upon it.</p> <p>Factor #3: Difficulty to learn</p> <p>This is a parody of an XKCD comic.</p> <p>Most programmers would agree that high-level scripting languages are relatively easy to learn. JavaScript falls into this category, along with Python and Ruby.</p> <p>Even though universities still teach languages like Java and C++ as first languages, they’re considerably harder to learn.</p> <p>Factor #4: Projects you can build with it</p> <p>This is where JavaScript really shines. JavaScript runs on any device that has a browser, right there in the browser. You can build basically anything with JavaScript, and share it anywhere.</p> <p>Because of JavaScript’s ubiquity, Stack Overflow co-founder Jeff Atwood coined his now-famous law:</p> <p>“Any application that can be written in JavaScript, will eventually be written in JavaScript.”</p> <p>And with each passing month, Atwood’s Law holds strong.</p> <p>Java once promised to run everywhere, too. You may remember Java Applets. Oracle officially killed them off earlier this year.</p> <p>Python suffers from much the same problems:</p> <p>“How can I give this game I made to my friend? Even better, is there a way can I put this on my phone so I can show it to kids at school without them having to install it? Um.” — James Hague in Retiring Python as a Teaching Language</p> <p>By contrast, here are some apps that members of our open source community built in their browsers on CodePen. You can click through and use these right in your browser:</p> <p>- 1970s style Simon game</p> <p>- Conway’s Game of Life</p> <p>- Star Wars-themed Wikipedia Search</p> <p>- A roguelike dungeon crawler game</p> <p>Learn one language well. Then learn a second one.</p> <p>If you keep jumping from language to language, you won’t get far.</p> <p>In order to move beyond the basics, you need to learn your first language well. Then your second language will be much, much easier.</p> <p>From there, you can branch out, and become a more well-rounded developer by learning lots of languages:</p> <p>C is a great way to learn how computers actually work in terms of memory management, and is useful in high-performance computing</p> <p>C++ is great for game development.</p> <p>Python is awesome for science and statistics.</p> <p>Java is important if you want to work at large tech companies.</p> <p>But learn JavaScript first.</p> <p>OK, now I’m going to attempt the impossible — I’m going to try and anticipate objections from the comments section.</p> <p>Objection #1: But isn’t JavaScript slow?</p> <p>JavaScript is — for most practical purposes — as fast as high-performance languages.</p> <p>JavaScript (Node.js) is orders of magnitude faster than Python, Ruby, and PHP.</p> <p>It is also nearly as fast as high-performance languages like C++, Java, and Go.</p> <p>Here are the results of the most comprehensive recent cross-language benchmark:</p> <p>Objection #2: But JavaScript isn’t statically typed</p> <p>Like Python and Ruby, JavaScript is dynamically typed, which is convenient. But you can get into trouble. Here I intend for exampleArray to be an array. I set its values, then check its length — meaning the number of elements it contains.</p> <p>exampleArray = [1, 2]<br /> -> [1, 2]<br /> exampleArray.length<br /> -> 2</p> <p>But then I accidentally assign it to be a string.</p> <p>exampleArray = “text”<br /> -> “text”<br /> exampleArray.length<br /> -> 4</p> <p>These kinds of errors happen all the time in dynamically typed languages. Most developers just put checks in place to prevent them, and write tests accordingly.</p> <p>If you absolutely must have static typing in your first programming language, then I still recommend you learn JavaScript first. Then you can quickly pick up TypeScript.</p> <p>“Typescript has a learning curve, but if you already know JavaScript, it will be a smooth one.” — Alex Ewerlöf on TypeScript</p> <p>Objection #3: But I really want to make a mobile app</p> <p>I still recommend learning JavaScript first.</p> <p>JavaScript features several tools for making native mobile apps, such as Angular Cordova and React Native.</p> <p>In order for your mobile app to actually do anything interesting, it will probably need a proper back end, which you’ll want to build with a proper web development framework, like Node.js + Express.js.</p> <p>Also, it’s worth pointing out that the mobile app development’s best days may very well be behind it.</p> <p>For starters, as much as people use mobile apps, nearly half of all developer jobs are web development. Compare this with a mere 8% of jobs that involve mobile app development.</p> <p>The occupations of 49,525 developers, based on responses to the 2016 Stack Overflow survey.</p> <p>The grand vision of “there’s an app for that” has not come to pass. Instead, most smartphone owners have stopped downloading new apps.</p> <p>Sure — they still use apps. Mostly Facebook, Google Maps, and handful of others. As such, much of the demand for mobile app developers is concentrated in a few large employers.</p> <p>The outlook for those mobile development jobs is hard to forecast. Many aspects of developing, maintaining, and distributing mobile apps are easier with JavaScript. So companies like Facebook and Google are investing heavily in better tools for building these using JavaScript.</p> <p>As of 2016, pretty much all development is web development. Everything touches that big platform that is “the web.” And the next wave of devices that you’ll talk to around your home, and cars that pick your kids up from school — they’ll all be piped together using the web, too.</p> <p>And that means JavaScript.</p> <p>Objection #4: Isn’t JavaScript a toy language that was written in 10 days?</p> <p>JavaScript has a quirky history. You will undoubtedly hear people crack jokes at its expense.</p> <p>Well people love to hate on C++, too. And like JavaScript, C++ has succeeded despite this hate, and now it’s pretty much everywhere as well.</p> <p>So if anybody ever gives you a hard time for learning JavaScript instead of elite-language-of-the-week, just remember the famous words of the guy who created C++:</p> <p>"There are only two kinds of programming languages: those people always bitch about and those nobody uses." — Bjarne Stroustrup</p>]]></description>
			<content:encoded><![CDATA[<p>Quincy reads his popular article on how to choose your first programming language when you learn to code.</p> <p> He discusses Python, Java, JavaScript, Ruby, and C++ in terms of:</p> <p>- the job market for the language - the long term prospects for the language - how easy the language is to learn - what projects you can build while you’re learning (and share with friends so you can stay motivated)</p> <p>Read by Quincy Larson (https://twitter.com/ossia)</p> <p>Article link: <a href= "https://fcc.im/2yCMatt">https://fcc.im/2yCMatt</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p>Most people’s journey toward learning to program starts with a single late-night Google search.</p> <p>Usually it’s something like “Learn ______”</p> <p>But how do they decide which language to search for?</p> <p>“They always joke about Java on Silicon Valley. I guess I should learn that.”</p> <p>Or:</p> <p>“Haskell. So hot right now. Haskell.”</p> <p>Or:</p> <p>“That Go gopher is just so gosh-darn cute.”</p> <p>And then there’s the rest of us. We’ll probably search for something like:</p> <p>“Which programming language should I learn first?”</p> <p>Few questions are so commonly asked that they get the full infographic treatment. But this is one of them:</p> <p>Deciding on your first programming language can be a fun process — kind of like one of those “Which Quentin Tarantino character are you?” personality quizzes.</p> <p>But before you run off to learn Ruby because you enjoyed playing with Play-Doh as a kid, let me remind you: the stakes are pretty high here.</p> <p>It will take you hundreds of hours of practice to become even remotely competent with your first programming language.</p> <p>So you should consider the following factors:</p> <p>- the job market for the language</p> <p>- the long term prospects for the language</p> <p>- how easy the language is to learn</p> <p>- what projects you can build while you’re learning (and share with friends so you can stay motivated)</p> <p>Every year brings new programming languages, and with them, new academic papers. And new web comics.</p> <p>Seriously. Check out this gem from last month:</p> <p>When it comes to choosing a first programming language, there’s no shortage of options. To narrow it down a bit, here are the most common Google searches related to learning programming, over the past 12 years:</p> <p>Java has had its ups and downs.</p> <p>Python has gradually risen to become the most popular choice.</p> <p>But tucked away below these is the Little Engine That Could, slowly choo-choo’ing up in popularity over the past few years. And that engine is JavaScript.</p> <p>Before I talk about these programming languages, let me clarify:</p> <p>I’m not arguing that any one language is objectively better than any other</p> <p>I agree that developers should eventually learn more than one language</p> <p>I’m arguing that first they should learn one language well. And — as you can probably guess from the upside down text in my headline — that language should be JavaScript.</p> <p>Let’s kick things off by exploring how programming is currently taught in school.</p> <p>Computer Science 101</p> <p>Universities have traditionally taught programming under the umbrella of computer science, which itself is often seen as an extension of mathematics, or tie-in to an electrical engineering degree.</p> <p>Of course, as you may have heard by now:</p> <p>“Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.” — Eric S. Raymond</p> <p>As of 2016, many universities still treat programming like it’s computer science, and computer science like it’s math.</p> <p>As a result, many introductory programming courses focus on low-level-of-abstraction languages like C, or mathematically-focused languages like MATLAB.</p> <p>And department chairs generally stay the course, pointing to annual programming language leaderboards like the TIOBE Index, or this one from the IEEE:</p> <p>Most of these leaderboards look virtually identical to how they were 10 years ago.</p> <p>But change does happen. Even in academia.</p> <p>In 2014, Python overtook Java as a the most popular language of instruction at top US Computer Science programs.</p> <p>And yet another change is bound to… eventually… happen.</p> <p>Because if you look at the languages actually used by the workforce, it paints a very different picture:</p> <p>JavaScript is by far the most popular language used by the 49,397 developers who responded to Stack Overflow’s 2016 Survey.</p> <p>More than half of all developers use JavaScript. It’s vital to front-end web development and increasingly relevant for back-end development. And it’s rapidly expanding into areas like game development and the Internet of Things.</p> <p>Job postings also mention JavaScript more than any programming language other than Java:</p> <p>Data from the world’s largest job posting aggregator, Indeed.com</p> <p>It’s no accident that we built our open source community’s curriculum around JavaScript. Over the past two years, more than 5,000 people have used Free Code Camp to get their first developer job.</p> <p>I’m not advocating JavaScript because I teach it. I teach JavaScript because it’s the surest path to a first developer job.</p> <p>But is JavaScript right for you? Is it worthy of being your first programming language? Let’s explore those factors I mentioned earlier.</p> <p>Factor #1: The job market</p> <p>If you’re learning to program purely out of intellectual curiosity, feel free to skip this factor. But if you — like the vast majority of people learning to program — want to use this skill to get a job, this is an important consideration.</p> <p>As I mentioned earlier, Java is mentioned in more job postings than any other programming language. JavaScript is a close second.</p> <p>But here’s the thing about JavaScript: even though it’s been around for 20 years, it only recently became a serious tool that companies like Netflix, Walmart, and PayPal would build entire applications around.</p> <p>As a result, plenty of companies are hiring JavaScript developers, but there just aren’t that many on the job market.</p> <p>There are 2.7 Java developers competing for every open Java position. Competition for PHP and iOS jobs is similarly fierce.</p> <p>But for every open JavaScript position, there are only 0.6 JavaScript developers. It is very much a sellers’ market for developers with JavaScript skills.</p> <p>Factor #2: The long term prospects</p> <p>The average JavaScript project receives twice as many pull requests as the average Java, Python, or Ruby project. And on top of this, JavaScript is growing faster than any other popular language.</p> <p>Source: The GitHub’s 2016 State of the Octoverse</p> <p>JavaScript’s ecosystem also benefits from a heavy investment of money and engineering talent from companies like Google, Microsoft, Facebook, and Netflix.</p> <p>For example, TypeScript (a statically-typed superset of JavaScript) has more than 100 open source contributors, many of whom are Microsoft and Google employees being paid to work on it.</p> <p>This type of inter-company cooperation is harder to find with Java. Oracle — who effectively owns Java through its acquisition of Sun Microsystems — often sues companies who try to expand upon it.</p> <p>Factor #3: Difficulty to learn</p> <p>This is a parody of an XKCD comic.</p> <p>Most programmers would agree that high-level scripting languages are relatively easy to learn. JavaScript falls into this category, along with Python and Ruby.</p> <p>Even though universities still teach languages like Java and C++ as first languages, they’re considerably harder to learn.</p> <p>Factor #4: Projects you can build with it</p> <p>This is where JavaScript really shines. JavaScript runs on any device that has a browser, right there in the browser. You can build basically anything with JavaScript, and share it anywhere.</p> <p>Because of JavaScript’s ubiquity, Stack Overflow co-founder Jeff Atwood coined his now-famous law:</p> <p>“Any application that can be written in JavaScript, will eventually be written in JavaScript.”</p> <p>And with each passing month, Atwood’s Law holds strong.</p> <p>Java once promised to run everywhere, too. You may remember Java Applets. Oracle officially killed them off earlier this year.</p> <p>Python suffers from much the same problems:</p> <p>“How can I give this game I made to my friend? Even better, is there a way can I put this on my phone so I can show it to kids at school without them having to install it? Um.” — James Hague in Retiring Python as a Teaching Language</p> <p>By contrast, here are some apps that members of our open source community built in their browsers on CodePen. You can click through and use these right in your browser:</p> <p>- 1970s style Simon game</p> <p>- Conway’s Game of Life</p> <p>- Star Wars-themed Wikipedia Search</p> <p>- A roguelike dungeon crawler game</p> <p>Learn one language well. Then learn a second one.</p> <p>If you keep jumping from language to language, you won’t get far.</p> <p>In order to move beyond the basics, you need to learn your first language well. Then your second language will be much, much easier.</p> <p>From there, you can branch out, and become a more well-rounded developer by learning lots of languages:</p> <p>C is a great way to learn how computers actually work in terms of memory management, and is useful in high-performance computing</p> <p>C++ is great for game development.</p> <p>Python is awesome for science and statistics.</p> <p>Java is important if you want to work at large tech companies.</p> <p>But learn JavaScript first.</p> <p>OK, now I’m going to attempt the impossible — I’m going to try and anticipate objections from the comments section.</p> <p>Objection #1: But isn’t JavaScript slow?</p> <p>JavaScript is — for most practical purposes — as fast as high-performance languages.</p> <p>JavaScript (Node.js) is orders of magnitude faster than Python, Ruby, and PHP.</p> <p>It is also nearly as fast as high-performance languages like C++, Java, and Go.</p> <p>Here are the results of the most comprehensive recent cross-language benchmark:</p> <p>Objection #2: But JavaScript isn’t statically typed</p> <p>Like Python and Ruby, JavaScript is dynamically typed, which is convenient. But you can get into trouble. Here I intend for exampleArray to be an array. I set its values, then check its length — meaning the number of elements it contains.</p> <p>exampleArray = [1, 2] -&gt; [1, 2] exampleArray.length -&gt; 2</p> <p>But then I accidentally assign it to be a string.</p> <p>exampleArray = “text” -&gt; “text” exampleArray.length -&gt; 4</p> <p>These kinds of errors happen all the time in dynamically typed languages. Most developers just put checks in place to prevent them, and write tests accordingly.</p> <p>If you absolutely must have static typing in your first programming language, then I still recommend you learn JavaScript first. Then you can quickly pick up TypeScript.</p> <p>“Typescript has a learning curve, but if you already know JavaScript, it will be a smooth one.” — Alex Ewerlöf on TypeScript</p> <p>Objection #3: But I really want to make a mobile app</p> <p>I still recommend learning JavaScript first.</p> <p>JavaScript features several tools for making native mobile apps, such as Angular Cordova and React Native.</p> <p>In order for your mobile app to actually do anything interesting, it will probably need a proper back end, which you’ll want to build with a proper web development framework, like Node.js + Express.js.</p> <p>Also, it’s worth pointing out that the mobile app development’s best days may very well be behind it.</p> <p>For starters, as much as people use mobile apps, nearly half of all developer jobs are web development. Compare this with a mere 8% of jobs that involve mobile app development.</p> <p>The occupations of 49,525 developers, based on responses to the 2016 Stack Overflow survey.</p> <p>The grand vision of “there’s an app for that” has not come to pass. Instead, most smartphone owners have stopped downloading new apps.</p> <p>Sure — they still use apps. Mostly Facebook, Google Maps, and handful of others. As such, much of the demand for mobile app developers is concentrated in a few large employers.</p> <p>The outlook for those mobile development jobs is hard to forecast. Many aspects of developing, maintaining, and distributing mobile apps are easier with JavaScript. So companies like Facebook and Google are investing heavily in better tools for building these using JavaScript.</p> <p>As of 2016, pretty much all development is web development. Everything touches that big platform that is “the web.” And the next wave of devices that you’ll talk to around your home, and cars that pick your kids up from school — they’ll all be piped together using the web, too.</p> <p>And that means JavaScript.</p> <p>Objection #4: Isn’t JavaScript a toy language that was written in 10 days?</p> <p>JavaScript has a quirky history. You will undoubtedly hear people crack jokes at its expense.</p> <p>Well people love to hate on C++, too. And like JavaScript, C++ has succeeded despite this hate, and now it’s pretty much everywhere as well.</p> <p>So if anybody ever gives you a hard time for learning JavaScript instead of elite-language-of-the-week, just remember the famous words of the guy who created C++:</p> <p>"There are only two kinds of programming languages: those people always bitch about and those nobody uses." — Bjarne Stroustrup</p>]]></content:encoded>
			<enclosure length="16782504" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/The_freeCodeCamp_Podcast_Episode_6_-_Which_Programming_Language_Should_You_Learn_First.mp3?dest-id=603849" />
			<itunes:duration>17:23</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Quincy reads his popular article on how to choose your first programming language when you learn to code.  He discusses Python, Java, JavaScript, Ruby, and C++ in terms of: - the job market for the language - the long term prospects for the language -...]]></itunes:subtitle>
			<itunes:summary>Quincy Larson reads his popular article on how to choose your first programming language when you learn to code.
He discusses Python, Java, JavaScript, Ruby, and C++ in terms of:
- the job market for the language
- the long term prospects for the language
- how easy the language is to learn
- what projects you can build while you’re learning (and share with friends so you can stay motivated)</itunes:summary>
			<itunes:episode>6</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 5 - How I got a second degree and earned 5 developer certifications in just one year, while working and raising two kids</title>
			<itunes:title>How I got a second degree and earned 5 developer certifications in just one year, while working and raising two kids</itunes:title>
			<pubDate>Fri, 17 Nov 2017 00:17:34 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[fd52487134d2cc19a46d756ab9e52b46]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/how-i-got-a-second-degree-and-earned-5-developer-certifications-in-just-one-year-while-working-and-raising-two-kids]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/3/3/3/e/333e0cc7aee2f1bd/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Beau talks about his year of incredible productivity, during which he a degree and certifications, and taught himself to code - balancing his studies against an active family life.</p> <p>Beau's original article: <a href= "https://fcc.im/2j0vxBr">https://fcc.im/2j0vxBr</a></p> <p>Read by Beau: <a href= "https://twitter.com/carnesbeau">https://twitter.com/carnesbeau</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p><br /> “The standard pace is for chumps. The system is designed so anyone can keep up. If you’re more driven than ‘just anyone’ — you can do so much more than anyone expects. And this applies to ALL of life — not just school.” — Derek Sivers, founder of CD Baby<br /> Learning to code can be challenging — especially when you also have a job and a family with small kids. Despite those things, I decided that the standard pace was not for me.</p> <p>My goal in writing all this is not to brag — though I am extremely proud of these accomplishments. My goal is to convince you that the standard pace isn’t for you, either.</p> <p>I’ve done a lot in the past year. I earned two Oracle Java Certifications, two CompTia Certifications, and freeCodeCamp’s Front End Certification. Each of these take most people many months of preparation, but I did them all in three weeks each.</p> <p>And last but not least, I completed all the coursework necessary to earn a second Bachelor’s degree in software development from an accredited university, in less than six months.</p> <p>I did this all while working full-time, spending time regularly with my wife and two young kids, and volunteering in my community.</p> <p>One of the keys to accomplishing all of this was an amazing and supportive spouse. 😍</p> <p>But there were also some other things that helped.</p> <p>What’s Your Motivation?</p> <p>After being a K-12 teacher for five years, I realized I did not want to teach in a school the rest of my life.</p> <p>I loved the teaching part of teaching, but I hated the forcing-kids-to-do-things-they-don’t-want-to-do part of teaching. Classroom management in my urban school district was very stressful for me. I was also becoming disenchanted with the whole educational system. We seem to be preparing students for jobs that will no longer exist.</p> <p>I had always been interested in coding and even sometimes taught my students basic coding using Scratch and Code.org. I decided it was time to learn enough to do it full-time.</p> <p>Wanting a new job was great motivation. Everyday I spent at my teaching job was an incentive to keep pushing myself towards my goal.</p> <p>Research, research, research</p> <p>It’s important not to rush into learning. Not all schools or learning resources are equal, and the wrong choice can make a big difference in your ability to meet your goals.</p> <p>I tried to determine what learning method would work best for me and my family. While I know there are many ways to break into the tech industry, I decided on a somewhat traditional route: a Bachelor’s degree. I knew I had some classes already that would transfer into a new program. I looked into many school options but I decided on Western Governors University for the following reasons:</p> <p>It is all online so I would not have to take time from my family for transportation.<br /> You can work at your own pace, so I knew I could finish very quickly. As soon as you finish all the assignments and exams for one class, you can go immediately to the next class.<br /> The cost is low — about $3000 per six months.<br /> It is reputable, accredited, and has been recommended by President Obama and Bill Gates.<br /> The degree included industry recognized certifications. I knew those would add to the credibility of my education.<br /> Beating ambitions goals</p> <p>At first, my goal was to finish my entire Bachelor’s degree in one year. One month into the program, I decided to revise my goal and finish in six months.</p> <p>It was at this point that I did what helped me most in my goal to finish quickly: I made a schedule of the exact day I would finish each class so I could finish within 6 months.</p> <p>I scheduled between 1 and 3 weeks for each class, depending on class requirements. I also made plans at that time about how I would finish each class very quickly. It was very helpful to have many subgoals throughout the learning process to make sure I stayed on track.</p> <p> </p> <p>Section of actual spreadsheet I used to plan for classes.</p> <p>Ambitious goals are important. These provided me additional motivation to push myself. A study by the Journal of Consumer Research showed that ambitious goals make people happier. I ended up meeting or surpassing all my self-imposed deadlines and that definitely made me happy!</p> <p>Detailed schedule</p> <p>I created a detailed weekly schedule to help me spend a lot of time learning without neglecting my family and other responsibilities. I scheduled in family time, volunteering time, time with friends, and even a weekly date night!</p> <p> </p> <p>The schedule I created at the beginning of my degree. I have an even more detailed schedule now.</p> <p>A detailed schedule helped me make sure that my life stayed balanced. However, there is one thing I did not put on my schedule: television.</p> <p>I watched only 3 episodes of television the entire time I worked on my degree. I had such a tight schedule to keep so I could meet my goals so I did not have time for TV. Also, any time spent watching television meant less time with my family. Since graduating, I have continued to limit television so I can focus on coding.</p> <p>It was important for me to give things up in order to accomplish my goals.</p> <p>Ignore the haters!</p> <p>Every student at Western Governors University is assigned a mentor. Students have weekly calls with their mentors to help keep them on track. Whenever I shared my goals with my mentor she tried to encourage me to be a little more reasonable.</p> <p>Well, instead of being more reasonable I decided to set more ridiculous goals. I know she had good intentions but I decided to ignore her warnings and stopped sharing my goals with her.</p> <p>I have found that it is sometimes helpful to not share goals with certain people if they are not going to be encouraging.</p> <p>Maximizing time</p> <p>Besides my scheduled time to learn software development, I also found ways to fit in even more studying. For instance, I used most of my lunch breaks to study. Also, I often carried notes in my pocket that I could review whenever I had a free moment.</p> <p>Another thing I did (and still do) was to take days off my teaching job to work on my classes or programming projects. While completing my degree, I planned my days off to line up in my schedule when I knew I had harder classes to pass.</p> <p>I try to be constantly reevaluating my schedule and how I spend my time so I can have greater effectiveness.</p> <p>I used to code a lot after my kids went to bed. However, I noticed that by the end of the day, my brain just did not work as well. I switched up my sleep schedule so I now go to bed around 9pm and wake up at 4am to code (and create training videos). This may sound a little crazy but it has greatly increased my productivity.</p> <p>Learn what others do</p> <p>I spent a lot of time on the Reddit page for my college and various forums reading about what others did that helped them with their classes. For the industry certifications, there were even more resources available to help. This allowed me to better plan the quickest way to finish.</p> <p>There is almost always someone out there who has gone before you, and it’s important to identify them and learn from them.</p> <p>Learning from others was also very helpful while going through the freeCodeCamp curriculum. Experienced people in the community are always willing to help or offer suggestions in their forums and community chat rooms.</p> <p>Just ship it!</p> <p> </p> <p>Shipping means to send out a completed product.</p> <p>There were many times when I wondered if I needed to put in more time working on projects or studying. Then I would realize that I didn’t have time if I wanted to meet my self-imposed deadlines.</p> <p>My deadlines forced me to act before I felt completely ready, and this definitely paid off.</p> <p>I’ve found that it’s more important to get projects out there than to make them perfect. If you try to make sure everything is just right, you may never finish. When in doubt, just ship it!</p> <p>The 80/20 Rule</p> <p> </p> <p>The 80/20 rule states that for many events, roughly 80% of the effects come from 20% of the causes. When learning software development, this means that about 20% of the learning content will contain about 80% of what you will actually use. You can save a lot of time if you just focus on the top 20%.</p> <p>For my degree, I only read between 20–30% of the required content. According to the 80/20 rule, this was enough to understand over 80% of the subject matter.</p> <p>The trick is determining which 20% to focus on. I would often ask myself, “If I were designing the exam, would I include this material?”</p> <p>Really, when learning anything, you should ask yourself if it is part of the 20% of learning content that will give you 80% of value.</p> <p>This relates to the idea of just-in-time information. It’s usually not beneficial to learn something that you don’t plan to use in the near future, especially when your memory is as bad as mine. 😊 When working on projects I try to learn what I will need just for that project.</p> <p>Employers often care more about projects you’ve created than how you learned to code. Keeping this fact in mind will help you decide how to best use your time.</p> <p>Keeping things moving forward</p> <p>I didn’t take any time off from learning once my degree was finished. I realized the importance of projects, so I went straight into freeCodeCamp and started creating personal projects to build up my portfolio. I was able to continue to apply all of the strategies that I used while completing my Bachelor’s degree.</p> <p>I also continued to use these strategies when I decided to start creating JavaScript training videos. Now I’m posting JavaScript training videos almost every day on the freeCodeCamp YouTube channel.</p> <p>If you’re interested in the specific things I did for each class to finish my WGU degree quickly, you can check out this blog post.</p> <p>I hope some of the strategies I used can also be helpful to you, even if your life is as busy as mine.</p> <p>Remember: the standard pace is for chumps. You can do better!</p>]]></description>
			<content:encoded><![CDATA[<p>Beau talks about his year of incredible productivity, during which he a degree and certifications, and taught himself to code - balancing his studies against an active family life.</p> <p>Beau's original article: <a href= "https://fcc.im/2j0vxBr">https://fcc.im/2j0vxBr</a></p> <p>Read by Beau: <a href= "https://twitter.com/carnesbeau">https://twitter.com/carnesbeau</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p> “The standard pace is for chumps. The system is designed so anyone can keep up. If you’re more driven than ‘just anyone’ — you can do so much more than anyone expects. And this applies to ALL of life — not just school.” — Derek Sivers, founder of CD Baby Learning to code can be challenging — especially when you also have a job and a family with small kids. Despite those things, I decided that the standard pace was not for me.</p> <p>My goal in writing all this is not to brag — though I am extremely proud of these accomplishments. My goal is to convince you that the standard pace isn’t for you, either.</p> <p>I’ve done a lot in the past year. I earned two Oracle Java Certifications, two CompTia Certifications, and freeCodeCamp’s Front End Certification. Each of these take most people many months of preparation, but I did them all in three weeks each.</p> <p>And last but not least, I completed all the coursework necessary to earn a second Bachelor’s degree in software development from an accredited university, in less than six months.</p> <p>I did this all while working full-time, spending time regularly with my wife and two young kids, and volunteering in my community.</p> <p>One of the keys to accomplishing all of this was an amazing and supportive spouse. 😍</p> <p>But there were also some other things that helped.</p> <p>What’s Your Motivation?</p> <p>After being a K-12 teacher for five years, I realized I did not want to teach in a school the rest of my life.</p> <p>I loved the teaching part of teaching, but I hated the forcing-kids-to-do-things-they-don’t-want-to-do part of teaching. Classroom management in my urban school district was very stressful for me. I was also becoming disenchanted with the whole educational system. We seem to be preparing students for jobs that will no longer exist.</p> <p>I had always been interested in coding and even sometimes taught my students basic coding using Scratch and Code.org. I decided it was time to learn enough to do it full-time.</p> <p>Wanting a new job was great motivation. Everyday I spent at my teaching job was an incentive to keep pushing myself towards my goal.</p> <p>Research, research, research</p> <p>It’s important not to rush into learning. Not all schools or learning resources are equal, and the wrong choice can make a big difference in your ability to meet your goals.</p> <p>I tried to determine what learning method would work best for me and my family. While I know there are many ways to break into the tech industry, I decided on a somewhat traditional route: a Bachelor’s degree. I knew I had some classes already that would transfer into a new program. I looked into many school options but I decided on Western Governors University for the following reasons:</p> <p>It is all online so I would not have to take time from my family for transportation. You can work at your own pace, so I knew I could finish very quickly. As soon as you finish all the assignments and exams for one class, you can go immediately to the next class. The cost is low — about $3000 per six months. It is reputable, accredited, and has been recommended by President Obama and Bill Gates. The degree included industry recognized certifications. I knew those would add to the credibility of my education. Beating ambitions goals</p> <p>At first, my goal was to finish my entire Bachelor’s degree in one year. One month into the program, I decided to revise my goal and finish in six months.</p> <p>It was at this point that I did what helped me most in my goal to finish quickly: I made a schedule of the exact day I would finish each class so I could finish within 6 months.</p> <p>I scheduled between 1 and 3 weeks for each class, depending on class requirements. I also made plans at that time about how I would finish each class very quickly. It was very helpful to have many subgoals throughout the learning process to make sure I stayed on track.</p> <p> </p> <p>Section of actual spreadsheet I used to plan for classes.</p> <p>Ambitious goals are important. These provided me additional motivation to push myself. A study by the Journal of Consumer Research showed that ambitious goals make people happier. I ended up meeting or surpassing all my self-imposed deadlines and that definitely made me happy!</p> <p>Detailed schedule</p> <p>I created a detailed weekly schedule to help me spend a lot of time learning without neglecting my family and other responsibilities. I scheduled in family time, volunteering time, time with friends, and even a weekly date night!</p> <p> </p> <p>The schedule I created at the beginning of my degree. I have an even more detailed schedule now.</p> <p>A detailed schedule helped me make sure that my life stayed balanced. However, there is one thing I did not put on my schedule: television.</p> <p>I watched only 3 episodes of television the entire time I worked on my degree. I had such a tight schedule to keep so I could meet my goals so I did not have time for TV. Also, any time spent watching television meant less time with my family. Since graduating, I have continued to limit television so I can focus on coding.</p> <p>It was important for me to give things up in order to accomplish my goals.</p> <p>Ignore the haters!</p> <p>Every student at Western Governors University is assigned a mentor. Students have weekly calls with their mentors to help keep them on track. Whenever I shared my goals with my mentor she tried to encourage me to be a little more reasonable.</p> <p>Well, instead of being more reasonable I decided to set more ridiculous goals. I know she had good intentions but I decided to ignore her warnings and stopped sharing my goals with her.</p> <p>I have found that it is sometimes helpful to not share goals with certain people if they are not going to be encouraging.</p> <p>Maximizing time</p> <p>Besides my scheduled time to learn software development, I also found ways to fit in even more studying. For instance, I used most of my lunch breaks to study. Also, I often carried notes in my pocket that I could review whenever I had a free moment.</p> <p>Another thing I did (and still do) was to take days off my teaching job to work on my classes or programming projects. While completing my degree, I planned my days off to line up in my schedule when I knew I had harder classes to pass.</p> <p>I try to be constantly reevaluating my schedule and how I spend my time so I can have greater effectiveness.</p> <p>I used to code a lot after my kids went to bed. However, I noticed that by the end of the day, my brain just did not work as well. I switched up my sleep schedule so I now go to bed around 9pm and wake up at 4am to code (and create training videos). This may sound a little crazy but it has greatly increased my productivity.</p> <p>Learn what others do</p> <p>I spent a lot of time on the Reddit page for my college and various forums reading about what others did that helped them with their classes. For the industry certifications, there were even more resources available to help. This allowed me to better plan the quickest way to finish.</p> <p>There is almost always someone out there who has gone before you, and it’s important to identify them and learn from them.</p> <p>Learning from others was also very helpful while going through the freeCodeCamp curriculum. Experienced people in the community are always willing to help or offer suggestions in their forums and community chat rooms.</p> <p>Just ship it!</p> <p> </p> <p>Shipping means to send out a completed product.</p> <p>There were many times when I wondered if I needed to put in more time working on projects or studying. Then I would realize that I didn’t have time if I wanted to meet my self-imposed deadlines.</p> <p>My deadlines forced me to act before I felt completely ready, and this definitely paid off.</p> <p>I’ve found that it’s more important to get projects out there than to make them perfect. If you try to make sure everything is just right, you may never finish. When in doubt, just ship it!</p> <p>The 80/20 Rule</p> <p> </p> <p>The 80/20 rule states that for many events, roughly 80% of the effects come from 20% of the causes. When learning software development, this means that about 20% of the learning content will contain about 80% of what you will actually use. You can save a lot of time if you just focus on the top 20%.</p> <p>For my degree, I only read between 20–30% of the required content. According to the 80/20 rule, this was enough to understand over 80% of the subject matter.</p> <p>The trick is determining which 20% to focus on. I would often ask myself, “If I were designing the exam, would I include this material?”</p> <p>Really, when learning anything, you should ask yourself if it is part of the 20% of learning content that will give you 80% of value.</p> <p>This relates to the idea of just-in-time information. It’s usually not beneficial to learn something that you don’t plan to use in the near future, especially when your memory is as bad as mine. 😊 When working on projects I try to learn what I will need just for that project.</p> <p>Employers often care more about projects you’ve created than how you learned to code. Keeping this fact in mind will help you decide how to best use your time.</p> <p>Keeping things moving forward</p> <p>I didn’t take any time off from learning once my degree was finished. I realized the importance of projects, so I went straight into freeCodeCamp and started creating personal projects to build up my portfolio. I was able to continue to apply all of the strategies that I used while completing my Bachelor’s degree.</p> <p>I also continued to use these strategies when I decided to start creating JavaScript training videos. Now I’m posting JavaScript training videos almost every day on the freeCodeCamp YouTube channel.</p> <p>If you’re interested in the specific things I did for each class to finish my WGU degree quickly, you can check out this blog post.</p> <p>I hope some of the strategies I used can also be helpful to you, even if your life is as busy as mine.</p> <p>Remember: the standard pace is for chumps. You can do better!</p>]]></content:encoded>
			<enclosure length="15441817" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/The_freeCodeCamp_Podcast_Episode_5_-_How_I_Got_a_Second_Degree_and_Earned_5_Developer_Certifications_in_Just_One_Year_While_Working_and_Raising_Two_Kids.mp3?dest-id=603849" />
			<itunes:duration>15:59</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Beau talks about his year of incredible productivity, during which he a degree and certifications, and taught himself to code - balancing his studies against an active family life. Beau's original article: https://fcc.im/2j0vxBr Read by...]]></itunes:subtitle>
			<itunes:summary>Beau talks about his year of incredible productivity, during which he a degree and certifications, and taught himself to code - balancing his studies against an active family life.</itunes:summary>
			<itunes:episode>5</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 4 - Things I Wish Someone Had Told Me When I was Learning How to Code</title>
			<itunes:title>Things I Wish Someone Had Told Me When I was Learning How to Code</itunes:title>
			<pubDate>Fri, 17 Nov 2017 00:12:54 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[319bad8f4a0ac4d7089b79026232a000]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/things-i-wish-someone-had-told-me-when-i-was-learning-how-to-code]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/c/2/a/4/c2a45835e8e5f70a/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>Cecily Carver, a developer at Google, recounts her coding journey and the many lessons she learned along the way. Read by Ava.</p> <p>Cecily's article: <a href= "https://fcc.im/2A5kphQ">https://fcc.im/2A5kphQ</a></p> <p>Read by Ava: <a href= "https://twitter.com/avasond">https://twitter.com/avasond</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript:</p> <p>Before you learn to code, think about what you want to code</p> <p>Knowing how to code is mostly about building things, and the path is a lot clearer when you have a sense of the end goal. If your goal is “learn to code,” without a clear idea of the kinds of programs you will write and how they will make your life better, you will probably find it a frustrating exercise.</p> <p>I’m a little ashamed to admit that part of my motivation for studying computer science was that I wanted to prove I was smart, and I wanted to be able to get Smart Person jobs. I also liked thinking about math and theory (this bookblew my mind at an impressionable age) and the program was a good fit. It wasn’t enough to sustain me for long, though, until I found ways to connect technology to the things I really loved, like music and literature.</p> <p>So, what do you want to code? Websites? Games? iPhone apps? A startup that makes you rich? Interactive art? Do you want to be able to impress your boss or automate a tedious task so you can spend more time looking at otter pictures? Perhaps you simply want to be more employable, add a buzzword to your resume, or fulfill the requirements of your educational program. All of these are worthy goals. Make sure you know which one is yours, and study accordingly.</p> <p>There’s nothing mystical about it</p> <p>Coding is a skill like any other. Like language learning, there’s grammar and vocabulary to acquire. Like math, there are processes to work through specific types of problems. Like all kinds of craftsmanship and art-making, there are techniques and tools and best practices that people have developed over time, specialized to different tasks, that you’re free to use or modify or discard.</p> <p>This guy (a very smart guy! Whose other writings I enjoy and frequently agree with!) posits that there is a bright line between people with the True Mind of a Programmer and everyone else, who are lacking the intellectual capacity needed to succeed in the field. That bright line consists, according to him, of pointers and recursion (there are primers here and here for the curious).</p> <p>I learned about pointers and recursion in school, and when I understood them, it was a delightful jolt to my brain — the kind of intellectual pleasure that made me want to study computer science in the first place. But, outside of classroom exercises, the number of times I’ve had to be familiar with either concept to get things done has been relatively small. And when helping others learn, over and over again, I’ve watched people complete interesting and rewarding projects without knowing anything about either one.</p> <p>There’s no point in being intimidated or wondering if you’re Smart Enough. Sure, the more complex and esoteric your task, the higher the level of mastery you will need to complete it. But this is true in absolutely every other field. Unless you’re planning to make your living entirely by your code, chances are you don’t have to be a recursion-understanding genius to make the thing you want to make.</p> <p>It never works the first time</p> <p>And probably won’t the second or third time</p> <p>When you first start learning to code, you’ll very quickly run up against this particular experience: you think you’ve set up everything the way you’re supposed to, you’ve checked and re-checked it, and it still. doesn’t. work. You don’t have a clue where to begin trying to fix it, and the error message (if you’re lucky enough to have one at all) might as well say “fuck you.” You might be tempted to give up at this point, thinking that you’ll never figure it out, that you’re not cut out for this. I had that feeling the first time I tried to write a program in C++, ran it, and got only the words “segmentation fault” for my trouble.</p> <p>But this experience is so common for programmers of all skill levels that it says absolutely nothing about your intelligence, tech-savviness, or suitability for the coding life. It will happen to you as a beginner, but it will also happen to you as an experienced programmer. The main difference will be in how you respond to it.</p> <p>I’ve found that a big difference between new coders and experienced coders is faith: faith that things are going wrong for a logical and discoverable reason, faith that problems are fixable, faith that there is a way to accomplish the goal. The path from “not working” to “working” might not be obvious, but with patience you can usually find it.</p> <p>Someone will always tell you you’re doing it wrong</p> <p>Braces should go on the next line. Braces should go on the same line. Use tabs to indent. But tabs are evil. You should use stored procedures, but actually you shouldn’t use them. You should always comment your code. But good code doesn’t need comments.</p> <p>There are almost always many different approaches to a particular problem, with no single “right way.” A lot of programmers get very good at advocating for their preferred way, but that doesn’t mean it’s the One True Path. Going head-to-head with people telling me I was Wrong, and trying to figure out if they were right, was one of the more stressful aspects of my early career.</p> <p>If you’re coding in a team with other people, someone will almost certainly take issue with something that you’re doing. Sometimes they’ll be absolutely correct, and it’s always worth investigating to see whether you are, in fact, Doing It Wrong. But sometimes they will be full of shit, or re-enacting an ancient and meaningless dispute where it would be best to just follow a style guide and forget about it.</p> <p>On the other hand, if you’re the kind of person who enjoys ancient but meaningless disputes (grammar nerds, I’m looking at you), you’ve come to the right place.</p> <p>Someone will always tell you you’re not a real coder</p> <p>HTML isn’t real coding. If you don’t use vi, you’re not really serious. Real programmers know C. Real coders don’t do Windows. Some people will never be able to learn it. You shouldn’t learn to code. You’re not a computer programmer (but I am).</p> <p>“Coding” means a lot of different things to a lot of different people, and it looks different now from how it used to. And, funnily enough, the tools and packages and frameworks that make it faster and easier for newcomers or even trained developers to build things are most likely to be tarred with the “not for REAL coders” brush. (See: “Return of the Real Programmer”)</p> <p>Behind all this is the fear that if “anyone” can call themselves a programmer, the title will become meaningless. But I think that this gatekeeping is destructive.</p> <p>Use the tools that make it easiest to build the things you want to build. If that means your game was made in Stencyl or GameMaker rather than written from scratch, that’s fine. If your first foray into coding is HTML or Excel macros, that’s fine. Work with something you feel you can stick with.</p> <p>As you get more comfortable, you’ll naturally start to find those tools limiting rather than helpful and look for more powerful ones. But most of the time, few people will ever even look at your code or even ask what you used — It’s what you make with it that counts.</p> <p>Worrying about “geek cred” will slowly kill you</p> <p>See above. I used to worry a lot, especially in school, about whether I was identifying myself as “not a real geek” (and therefore less worthy of inclusion in tech communities) through my clothing, my presentation, my choice of reading material and even my software customization choices. It was a terrible waste of energy and I became a lot more functional after I made the decision to let it all go.</p> <p>You need to internalize this: your ability to get good at coding has nothing to do with how well you fit into the various geek subcultures. This goes double if you know deep down that you’ll never quite fit. The energy you spend proving yourself should be going into making things instead. And, if you’re an indisputable geek with cred leaking from your eye sockets, keep this in mind for when you’re evaluating someone else’s cred level. It may not mean what you think it does.</p> <p>Sticking with it is more important than the method</p> <p>There’s no shortage of articles about the “right” or “best” way to learn how to code, and there are lots of potential approaches. You can learn the concepts from a book or by completing interactive exercises or by debugging things that others have written. And, of course, there are lots of languages you might choose as your first to learn, with advocates for each.</p> <p>A common complaint with “teach yourself to code” programs and workshops is that you’ll breeze happily through the beginner material and then hit a steep curve where things get more difficult very quickly. You know how to print some lines of text on a page but have no idea where to start working on a “real,” useful project. You might feel like you were just following directions without really understanding, and blame the learning materials.</p> <p>When you get to this stage, most of the tutorials and online resources available to you are much less useful because they assume you’re already an experienced and comfortable programmer. The difficulty is further compounded by the fact that “you don’t know what you don’t know.” Even trying to figure out what to learn next is a puzzle in itself.</p> <p>You’ll hit this wall no matter what “learn to code” program you follow, and the only way to get past it is to persevere. This means you keep trying new things, learning more information, and figuring out, piece by piece, how to build your project. You’re a lot more likely to find success in the end if you have a clear idea of why you’re learning to code in the first place.</p> <p>If you keep putting bricks on top of each other, it might take a long time but eventually you’ll have a wall. This is where that faith I mentioned earlier comes in handy. If you believe that with time and patience you can figure the whole coding thing out, in time you almost certainly will.</p> <p id="c7d5" class="graf graf--p graf-after--p graf--trailing">  </p>]]></description>
			<content:encoded><![CDATA[<p>Cecily Carver, a developer at Google, recounts her coding journey and the many lessons she learned along the way. Read by Ava.</p> <p>Cecily's article: <a href= "https://fcc.im/2A5kphQ">https://fcc.im/2A5kphQ</a></p> <p>Read by Ava: <a href= "https://twitter.com/avasond">https://twitter.com/avasond</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript:</p> <p>Before you learn to code, think about what you want to code</p> <p>Knowing how to code is mostly about building things, and the path is a lot clearer when you have a sense of the end goal. If your goal is “learn to code,” without a clear idea of the kinds of programs you will write and how they will make your life better, you will probably find it a frustrating exercise.</p> <p>I’m a little ashamed to admit that part of my motivation for studying computer science was that I wanted to prove I was smart, and I wanted to be able to get Smart Person jobs. I also liked thinking about math and theory (this bookblew my mind at an impressionable age) and the program was a good fit. It wasn’t enough to sustain me for long, though, until I found ways to connect technology to the things I really loved, like music and literature.</p> <p>So, what do you want to code? Websites? Games? iPhone apps? A startup that makes you rich? Interactive art? Do you want to be able to impress your boss or automate a tedious task so you can spend more time looking at otter pictures? Perhaps you simply want to be more employable, add a buzzword to your resume, or fulfill the requirements of your educational program. All of these are worthy goals. Make sure you know which one is yours, and study accordingly.</p> <p>There’s nothing mystical about it</p> <p>Coding is a skill like any other. Like language learning, there’s grammar and vocabulary to acquire. Like math, there are processes to work through specific types of problems. Like all kinds of craftsmanship and art-making, there are techniques and tools and best practices that people have developed over time, specialized to different tasks, that you’re free to use or modify or discard.</p> <p>This guy (a very smart guy! Whose other writings I enjoy and frequently agree with!) posits that there is a bright line between people with the True Mind of a Programmer and everyone else, who are lacking the intellectual capacity needed to succeed in the field. That bright line consists, according to him, of pointers and recursion (there are primers here and here for the curious).</p> <p>I learned about pointers and recursion in school, and when I understood them, it was a delightful jolt to my brain — the kind of intellectual pleasure that made me want to study computer science in the first place. But, outside of classroom exercises, the number of times I’ve had to be familiar with either concept to get things done has been relatively small. And when helping others learn, over and over again, I’ve watched people complete interesting and rewarding projects without knowing anything about either one.</p> <p>There’s no point in being intimidated or wondering if you’re Smart Enough. Sure, the more complex and esoteric your task, the higher the level of mastery you will need to complete it. But this is true in absolutely every other field. Unless you’re planning to make your living entirely by your code, chances are you don’t have to be a recursion-understanding genius to make the thing you want to make.</p> <p>It never works the first time</p> <p>And probably won’t the second or third time</p> <p>When you first start learning to code, you’ll very quickly run up against this particular experience: you think you’ve set up everything the way you’re supposed to, you’ve checked and re-checked it, and it still. doesn’t. work. You don’t have a clue where to begin trying to fix it, and the error message (if you’re lucky enough to have one at all) might as well say “fuck you.” You might be tempted to give up at this point, thinking that you’ll never figure it out, that you’re not cut out for this. I had that feeling the first time I tried to write a program in C++, ran it, and got only the words “segmentation fault” for my trouble.</p> <p>But this experience is so common for programmers of all skill levels that it says absolutely nothing about your intelligence, tech-savviness, or suitability for the coding life. It will happen to you as a beginner, but it will also happen to you as an experienced programmer. The main difference will be in how you respond to it.</p> <p>I’ve found that a big difference between new coders and experienced coders is faith: faith that things are going wrong for a logical and discoverable reason, faith that problems are fixable, faith that there is a way to accomplish the goal. The path from “not working” to “working” might not be obvious, but with patience you can usually find it.</p> <p>Someone will always tell you you’re doing it wrong</p> <p>Braces should go on the next line. Braces should go on the same line. Use tabs to indent. But tabs are evil. You should use stored procedures, but actually you shouldn’t use them. You should always comment your code. But good code doesn’t need comments.</p> <p>There are almost always many different approaches to a particular problem, with no single “right way.” A lot of programmers get very good at advocating for their preferred way, but that doesn’t mean it’s the One True Path. Going head-to-head with people telling me I was Wrong, and trying to figure out if they were right, was one of the more stressful aspects of my early career.</p> <p>If you’re coding in a team with other people, someone will almost certainly take issue with something that you’re doing. Sometimes they’ll be absolutely correct, and it’s always worth investigating to see whether you are, in fact, Doing It Wrong. But sometimes they will be full of shit, or re-enacting an ancient and meaningless dispute where it would be best to just follow a style guide and forget about it.</p> <p>On the other hand, if you’re the kind of person who enjoys ancient but meaningless disputes (grammar nerds, I’m looking at you), you’ve come to the right place.</p> <p>Someone will always tell you you’re not a real coder</p> <p>HTML isn’t real coding. If you don’t use vi, you’re not really serious. Real programmers know C. Real coders don’t do Windows. Some people will never be able to learn it. You shouldn’t learn to code. You’re not a computer programmer (but I am).</p> <p>“Coding” means a lot of different things to a lot of different people, and it looks different now from how it used to. And, funnily enough, the tools and packages and frameworks that make it faster and easier for newcomers or even trained developers to build things are most likely to be tarred with the “not for REAL coders” brush. (See: “Return of the Real Programmer”)</p> <p>Behind all this is the fear that if “anyone” can call themselves a programmer, the title will become meaningless. But I think that this gatekeeping is destructive.</p> <p>Use the tools that make it easiest to build the things you want to build. If that means your game was made in Stencyl or GameMaker rather than written from scratch, that’s fine. If your first foray into coding is HTML or Excel macros, that’s fine. Work with something you feel you can stick with.</p> <p>As you get more comfortable, you’ll naturally start to find those tools limiting rather than helpful and look for more powerful ones. But most of the time, few people will ever even look at your code or even ask what you used — It’s what you make with it that counts.</p> <p>Worrying about “geek cred” will slowly kill you</p> <p>See above. I used to worry a lot, especially in school, about whether I was identifying myself as “not a real geek” (and therefore less worthy of inclusion in tech communities) through my clothing, my presentation, my choice of reading material and even my software customization choices. It was a terrible waste of energy and I became a lot more functional after I made the decision to let it all go.</p> <p>You need to internalize this: your ability to get good at coding has nothing to do with how well you fit into the various geek subcultures. This goes double if you know deep down that you’ll never quite fit. The energy you spend proving yourself should be going into making things instead. And, if you’re an indisputable geek with cred leaking from your eye sockets, keep this in mind for when you’re evaluating someone else’s cred level. It may not mean what you think it does.</p> <p>Sticking with it is more important than the method</p> <p>There’s no shortage of articles about the “right” or “best” way to learn how to code, and there are lots of potential approaches. You can learn the concepts from a book or by completing interactive exercises or by debugging things that others have written. And, of course, there are lots of languages you might choose as your first to learn, with advocates for each.</p> <p>A common complaint with “teach yourself to code” programs and workshops is that you’ll breeze happily through the beginner material and then hit a steep curve where things get more difficult very quickly. You know how to print some lines of text on a page but have no idea where to start working on a “real,” useful project. You might feel like you were just following directions without really understanding, and blame the learning materials.</p> <p>When you get to this stage, most of the tutorials and online resources available to you are much less useful because they assume you’re already an experienced and comfortable programmer. The difficulty is further compounded by the fact that “you don’t know what you don’t know.” Even trying to figure out what to learn next is a puzzle in itself.</p> <p>You’ll hit this wall no matter what “learn to code” program you follow, and the only way to get past it is to persevere. This means you keep trying new things, learning more information, and figuring out, piece by piece, how to build your project. You’re a lot more likely to find success in the end if you have a clear idea of why you’re learning to code in the first place.</p> <p>If you keep putting bricks on top of each other, it might take a long time but eventually you’ll have a wall. This is where that faith I mentioned earlier comes in handy. If you believe that with time and patience you can figure the whole coding thing out, in time you almost certainly will.</p> <p id="c7d5" class="graf graf--p graf-after--p graf--trailing">  </p>]]></content:encoded>
			<enclosure length="10682515" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/The_freeCodeCamp_Podcast_Episode_4_-_Things_I_Wish_Someone_Had_Told_Me_When_I_Was_Learning_How_to_Code.mp3?dest-id=603849" />
			<itunes:duration>11:02</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Cecily Carver, a developer at Google, recounts her coding journey and the many lessons she learned along the way. Read by Ava. Cecily's article: https://fcc.im/2A5kphQ Read by Ava: https://twitter.com/avasond Learn to code for free at:...]]></itunes:subtitle>
			<itunes:summary>Cecily Carver, a developer at Google, recounts her coding journey and the many lessons she learned along the way. Read by @avasond.

</itunes:summary>
			<itunes:episode>4</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 3 - How I Went From Selling Food in the Street to Working as a Developer at Companies Like Apple Part 3 - First Week on the Job</title>
			<itunes:title>How I Went From Selling Food in the Street to Working for Top Firms in Tech Part 3 - First Week on the Job</itunes:title>
			<pubDate>Fri, 17 Nov 2017 00:07:07 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ed29c08127d08ee267311fd76b445e6f]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/how-i-went-from-selling-food-in-the-street-to-working-for-top-firms-in-tech-part-3-first-week-on-the-job]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/b/f/a/8/bfa8064849d8bd66/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>We conclude the tale of Alvaro Videla, who learned to code, got a job as a developer, and is now facing his first week on the job in Montevideo, Uruguay. He eventually went on to get jobs at Apple and other tech companies, but this is where he got his start.</p> <p> </p> <p>Article by Alvaro Videla: <a href= "https://fcc.im/2zJX3gN">https://fcc.im/2zJX3gN</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/freecodecamp">https://twitter.com/freecodecamp</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript: </p> <p>The Technical Interview</p> <p>The programmer who was interviewing me explained how things would go, that I was going to walk right into their offices, get my own desk, and program at one of their computers, with everybody else just doing their jobs, since “that’s how it’s going to be if you join us.” I thought that was pretty cool already. And just like he said, once I got into the office, everybody said hello and continued doing their jobs. Even though I wasn’t close to getting the job, I was already starting to feel like a part of something.</p> <p>The test consisted of building a website to list books for an imaginary library. It seemed simple enough: connect to a database, fetch a list of books, and display them on a webpage, with the buttons for the usual actions for adding books, deleting them, and updating their information. “I can do that,” I thought.</p> <p>While I was focusing on the test, behind me were programmers who were splitting their time between working on their tasks and playing with tennis balls in a very particular way: they were throwing them at each other, with a lot of force, up to the point where one shot hit the reset button of one of the computers and one guy lost what he was doing on his editor. “That’s a strange way to work, but it’s kinda cool,” I thought. I had expected a more formal working environment, but was pleasantly surprised at how relaxed the environment was.</p> <p>Meanwhile, halfway through my implementation, I got stuck. I couldn’t get my code to print the list of books, and nothing was showing up on the screen. “How do I get out of this one?” I wondered. I tried to debug it by adding print statements here and there, but that didn’t work, and I had no idea what was going on. The clock was ticking away, and I was starting to get really desperate. “Come on,” I told myself. “I can’t miss this opportunity because of this problem. What do I do? Should I ask for help? What if this disqualifies me instantly?”</p> <p>I thought about it some more. “I guess they help each other during work,” I reasoned. “OK, whatever, I’m going to ask for help.” I called the interviewer over and talked him through my problem, trying to explain everything I had tried so far, so he wouldn’t think I was cheating him into giving me an answer. Lucky for me, he also had no idea what was going on, so he told me it was fine and that I could leave it as it was.</p> <p>Unfortunately, I had used too much time on this debugging session so I didn’t have enough time to complete the second part of the test. Later on, I would value this lesson, since I saw that asking for help earlier would have saved a lot of time later — time that in this particular case was critical for me. And in the future, it could be critical for the company I would end up working for.</p> <p>I didn’t want to ask for extra time to try to solve the next problem, since I thought that wasn’t fair. I wanted to play by the rules, because I felt it was the right thing to do. As we’ll see later, I think that decision paid off.</p> <p>In the meantime, I had the second problem in front of me and I had to do something about it. I skimmed through it and saw that it was about parsing URLs out of some log files, so I gathered some courage. I put my most convincing face and told the guy that while I understood my time was up, the solution was a matter of just “splitting these lines by these characters, and then going with the URL splitting by using this and that character.” The guy nodded, and told me that indeed that was the solution. Then he said that the interview was over, and he asked me if I had any questions about the company or if there was something I wanted to add.</p> <p>Later on, I would value this lesson, since I saw that asking for help earlier would have saved a lot of time later<br /> “Well, now that you ask, yes,” I began. “I’ve been building this mapping application that I want to show you…” This was my opportunity to shine. I typed the website URL on the computer in front of us and started to pray to every god out there for it to load without problems. “Please, just this one time,” I thought. And as every element from the website finished loading, my anxiety decreased and my excitement increased. The creation I was most proud of was there, right in front of my eyes, and more importantly, in front of the eyes of the person who would decide if I had a job or not.</p> <p>I went through every feature of the app, explaining with passion the goal of the app, which features it had, and which features it lacked but that I knew I had to implement to have a clear business case.</p> <p>After a demo, he seemed impressed by Aleph Maps and gave me kudos for it, which made me happy I’d had the chance to run the demo for him and gone ahead with it. This showed me that all the demos I had run for various members of my family and for my friends had been worthwhile, since when it mattered, I was able to show that I could not only build things on my own, but also that I was good at explaining things.</p> <p>By then it was around 6 p.m. — time for them to call it a day, and for me to get back home. As we were leaving the building together, I asked the man who conducted my tests if he was attending university, because perhaps he knew my friend who had told me about this job opportunity. “Oh yeah, I know your friend, why didn’t you mention him before?” he asked. I didn’t answer, but the fact was that I didn’t want to bring it up and use it to my advantage during the interview. But in any case, it didn’t hurt afterward. He showed me how to get public transport back to the bus terminal and then we parted ways.</p> <p>Once on my own, I couldn’t believe I was done with the interview. Everything I had prepared for in the last two months had passed in what felt like the blink of an eye. All the stressing out about the little details — some that mattered, some that didn’t — was gone. Now it was me and Montevideo, and the streets crowded with people going back to their homes, and the cars, and the night falling over the city. I’d done it.</p> <p>Once I had processed all of it, the worst part came. It was time to take the bus and head home to wait for an answer, and waiting is something I’m really bad at. But that’s what it became. Waiting while staring at the ceiling of our room, wondering with my wife how our lives would change if I got the job. Waiting while looking at my books without knowing if I should have kept reading them or not. Waiting while making sure my phone had enough battery power so there would be no missed phone calls. Waiting, until at some point the wait was over, my phone rang, and again it was that number from Montevideo.</p> <p>“When can you start?” asked the voice on the other end. I was in. Yes, me. They wanted me: the guy who barely knew how to program, but let’s not worry about that now. “They want me,” I told myself, letting it sink in. “I’m in.” The whole gamble had paid off. Finally, after all those years of having jobs that paid nothing, working just because that’s what people do, even if having jobs meant forgetting about our dreams — finally, life was starting to turn around and smile on us, and from one day to the next, we could see a life that was worth living.</p> <p>I asked for one week to move to Montevideo, so they told me February 26 would be my starting date. “You will be working in PHP and JavaScript. You’re going to earn 15,000 pesos (500 USD) a month.” FIFTEEN THOUSAND PESOS! That was three times what my wife was making! “We are going to be rich!” I thought. I was going to be able to buy as much Coca-Cola as I wanted! We could probably even manage to save $100 per month and buy a house someday. We couldn’t believe what was happening to us.</p> <p>Finally, life was starting to turn around and smile on us, and from one day to the next, we could see a life that was worth living<br /> I spent that week prepping in JavaScript and trying to find a place to stay in Montevideo. A friend hooked me up with his apartment, since he was going to move out after Easter. The rent was good for us, so we decided that in about a month my wife would move to Montevideo and join us. The “apartment” was just one room, plus a kitchen and a small bathroom, and you could only fit two beds and a dining table in there. For a short while, it would be three of us living in that room, but honestly, that didn’t matter to us. I would be starting a new and exciting job, and we would have a place to live. Mission accomplished.</p> <p>First Week at Work</p> <p>My first day at work began with a nice twist: the person who conducted the interview was also my new manager. He brought me to office kitchen, we sat down at the table, and he started explaining what the company was doing, what the business model was, and so on. He then proceeded to lay down on a piece of paper depicting what the backend architecture was like, how things worked, what the server was doing, where the database was located, and many other details. I have to be honest: it was hard to follow. I recall hearing the term “production” a couple of times too. “This is our production setup,” “Here’s the production database,” and so on. I had no idea what this production thing he kept talking about was! Later, I learned that production referred to all the infrastructure, including code, that was facing clients and producing income for the company.</p> <p>We went through a couple of questions and answers here and there, and then came to what was, for me, the most significant part of that day. He looked at me and told me, honest and straight to the point: “We know that you’re not a good programmer, that you are just starting at this, and that you have no experience, so before you’re even able to commit one line of code to our codebase, we need you to study this book,” he said as he handed me a copy of PHP Objects, Patterns, and Practice by Matt Zandstra. “You have to know it by next week.” As straightforward it was, this was some of the most solid, sincere, and helpful feedback I’ve ever received as a programmer. To this day, I thank him for being forthright with me. During my career, I’ve learned how difficult it is to come by a manager who will give you this kind of feedback — feedback that’s useful for understanding your own shortcomings, but at the same time puts you on the right track in order to overcome them.</p> <p>Then he told me: “We know you are inexperienced, but during the interview you showed yourself as a person with a great attitude. That’s why we hired you.” I was speechless. I wondered what I’d done to deserve such an opportunity. Even more, I knew I had to prove I was worth it, so I set myself a goal of mastering the design patterns book as quickly as possible. First, I couldn’t disappoint my new boss who had taken a chance on me, and second, I finally had an opportunity in the big leagues, at the job I’d worked so hard for. It was time to shine.</p> <p>“We know you are inexperienced, but during the interview you showed yourself as a person with a great attitude. That’s why we hired you.”<br /> Fired After One Week on the Job</p> <p>During my first week, I studied that book like my life depended on it, because in a way, it did. I tried to learn as many of those design patterns as possible, practicing every example, and I tried to absorb as much knowledge as possible. By the end of the week, I wanted my manager to come to me and tell me, “Now you’re ready to start programming with us.” But as with every tale, this story needed a twist.</p> <p>That Thursday, some people from the company came and called me to another room to deliver some news: the company was conducting layoffs, and I was among the people being let go. “Nothing personal,” they said. “Business isn’t going too well, and we need to downsize, so we’re letting go of people who just joined the company. We hope you understand.” That day, I was one of around 50 employees who lost their jobs.</p> <p>I’m not sure I can accurately describe what I felt at that moment. “Why does life has to be like this?” I wondered, feeling somewhat discouraged and helpless. “What do I do now?” I asked to use the phone and called my wife. “Please don’t worry, but I have some bad news…” I began. I tried hard not to lose my composure, but meanwhile, the whole world was coming apart below my feet. All around me were employees coming in from other rooms and bidding farewell to all the people who were just fired, which only made me feel worse. Even so, I tried to convince myself that I shouldn’t despair. I had gotten this far, so it was simply a matter of applying to another job somewhere else.</p> <p>While I was saying goodbye to my short-lived colleagues, one of them tipped me off about some companies I should apply for, so I took note. From an internet cafe, I sent out job applications to the companies my brand new former colleague gave me, and when I was done, I headed back home.</p> <p>I tried to convince myself that I shouldn’t despair. I had gotten this far, so it was simply a matter of applying to another job somewhere else.<br /> “What a depressing day,” I thought. I entered the apartment and laid down on the bed, which for the record, was just a mattress on the floor. I remember the sky was gray, a perfect match for how I was feeling. I tried to nap, but my mind was lost, staring at the ceiling of that empty apartment and thinking about this new turn of events. “What if I hadn’t been fired?” “What did I do wrong?” I knew I had done nothing wrong. It was just bad luck, but it was hard to accept it.</p> <p>Suddenly my phone rang.</p> <p>“Is this Alvaro Videla? I’m calling from Intersys. We received your application and we want to have an interview with you. Is next Monday OK for you?”</p> <p>“OF COURSE THAT’S FINE WITH ME,” I thought, but instead I said, “Yes, that sounds great, I’ll be there.” As I hung up and placed my phone on the floor, I was in shock, unable to believe what had just happened. Montevideo was a city full of surprises.</p> <p>The next day I went down the street and asked the barber if he would give me a free haircut, since I had a job interview lined up but I had no money left. I still hadn’t received my salary from the week of work, so I needed a favor in exchange for being paid back the following week. Luckily, he was really happy to help me. I still remember his warm smile; he felt proud he was helping a neighbor get a job. While I was getting the haircut, he shared his story. I learned that in the early 2000s, he and his crew were the winners of some world hairdresser championship! I had no idea there were hairdresser championships. Don’t worry, I couldn’t believe him either back then. Either way, getting a haircut with a “world champion” was cool, but also meant that the service was expensive — $10 to be exact. It doesn’t seem like much, but keep in mind that in my hometown I could get a haircut for less than $2, and $10 could buy me at least five burgers and a soda. That said, it was quite an investment for my next job interview. I couldn’t complain though: a total stranger was doing me a favor when I needed it the most, and that raised my spirits.</p> <p>The next week came and I had my interview, which went great. The company I was just fired from was Live Interactive, after all, which happened to be well known in Montevideo due to being one of the biggest internet companies in the country. This meant that programmers coming from there were well regarded. Needless to say, I got the job. The salary wasn’t that great, but our plan of moving to the capital was still intact. Not bad for my first 10 days in Montevideo.</p> <p>Conclusion</p> <p>All in all, my plan had worked, and all my preparation and study paid off. I got my first job interview as a programmer and then passed it. I was hired and fired in the space of one week, but I didn’t give up and went on to secure a second job interview, landing a new position in my second week in Montevideo.</p> <p>But in order for this to happen, the first and most important step was being honest with myself. This allowed me to assess my skills to see what I was good at doing and where I had to improve.</p> <p>Being self aware helped me when I embarked upon the task of creating a program from scratch, because I was realistic about what I could do, but at the same time it forced me to do something about the areas where I was lacking. Additionally, dividing the project into actionable tasks helped me make progress and follow my idea through to completion.</p> <p>But it wasn’t just about skills; I also had to believe in myself, and that self confidence helped me whenever I faced a challenge that seemed like an insurmountable mountain.</p> <p>Meanwhile, humility always kept me in check, reminding me that what I had just climbed was but a little peak from among the many I had yet to climb.</p> <p>Finally, my family and friends offered help and support, and whenever I felt defeated, they kept me focused and reminded me why I was on my journey and what the destination was. In the end, because I persisted, I had become hirable, and now it was time to become an actual programmer.</p> <div class="section-content"> </div>]]></description>
			<content:encoded><![CDATA[<p>We conclude the tale of Alvaro Videla, who learned to code, got a job as a developer, and is now facing his first week on the job in Montevideo, Uruguay. He eventually went on to get jobs at Apple and other tech companies, but this is where he got his start.</p> <p> </p> <p>Article by Alvaro Videla: <a href= "https://fcc.im/2zJX3gN">https://fcc.im/2zJX3gN</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/freecodecamp">https://twitter.com/freecodecamp</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript: </p> <p>The Technical Interview</p> <p>The programmer who was interviewing me explained how things would go, that I was going to walk right into their offices, get my own desk, and program at one of their computers, with everybody else just doing their jobs, since “that’s how it’s going to be if you join us.” I thought that was pretty cool already. And just like he said, once I got into the office, everybody said hello and continued doing their jobs. Even though I wasn’t close to getting the job, I was already starting to feel like a part of something.</p> <p>The test consisted of building a website to list books for an imaginary library. It seemed simple enough: connect to a database, fetch a list of books, and display them on a webpage, with the buttons for the usual actions for adding books, deleting them, and updating their information. “I can do that,” I thought.</p> <p>While I was focusing on the test, behind me were programmers who were splitting their time between working on their tasks and playing with tennis balls in a very particular way: they were throwing them at each other, with a lot of force, up to the point where one shot hit the reset button of one of the computers and one guy lost what he was doing on his editor. “That’s a strange way to work, but it’s kinda cool,” I thought. I had expected a more formal working environment, but was pleasantly surprised at how relaxed the environment was.</p> <p>Meanwhile, halfway through my implementation, I got stuck. I couldn’t get my code to print the list of books, and nothing was showing up on the screen. “How do I get out of this one?” I wondered. I tried to debug it by adding print statements here and there, but that didn’t work, and I had no idea what was going on. The clock was ticking away, and I was starting to get really desperate. “Come on,” I told myself. “I can’t miss this opportunity because of this problem. What do I do? Should I ask for help? What if this disqualifies me instantly?”</p> <p>I thought about it some more. “I guess they help each other during work,” I reasoned. “OK, whatever, I’m going to ask for help.” I called the interviewer over and talked him through my problem, trying to explain everything I had tried so far, so he wouldn’t think I was cheating him into giving me an answer. Lucky for me, he also had no idea what was going on, so he told me it was fine and that I could leave it as it was.</p> <p>Unfortunately, I had used too much time on this debugging session so I didn’t have enough time to complete the second part of the test. Later on, I would value this lesson, since I saw that asking for help earlier would have saved a lot of time later — time that in this particular case was critical for me. And in the future, it could be critical for the company I would end up working for.</p> <p>I didn’t want to ask for extra time to try to solve the next problem, since I thought that wasn’t fair. I wanted to play by the rules, because I felt it was the right thing to do. As we’ll see later, I think that decision paid off.</p> <p>In the meantime, I had the second problem in front of me and I had to do something about it. I skimmed through it and saw that it was about parsing URLs out of some log files, so I gathered some courage. I put my most convincing face and told the guy that while I understood my time was up, the solution was a matter of just “splitting these lines by these characters, and then going with the URL splitting by using this and that character.” The guy nodded, and told me that indeed that was the solution. Then he said that the interview was over, and he asked me if I had any questions about the company or if there was something I wanted to add.</p> <p>Later on, I would value this lesson, since I saw that asking for help earlier would have saved a lot of time later “Well, now that you ask, yes,” I began. “I’ve been building this mapping application that I want to show you…” This was my opportunity to shine. I typed the website URL on the computer in front of us and started to pray to every god out there for it to load without problems. “Please, just this one time,” I thought. And as every element from the website finished loading, my anxiety decreased and my excitement increased. The creation I was most proud of was there, right in front of my eyes, and more importantly, in front of the eyes of the person who would decide if I had a job or not.</p> <p>I went through every feature of the app, explaining with passion the goal of the app, which features it had, and which features it lacked but that I knew I had to implement to have a clear business case.</p> <p>After a demo, he seemed impressed by Aleph Maps and gave me kudos for it, which made me happy I’d had the chance to run the demo for him and gone ahead with it. This showed me that all the demos I had run for various members of my family and for my friends had been worthwhile, since when it mattered, I was able to show that I could not only build things on my own, but also that I was good at explaining things.</p> <p>By then it was around 6 p.m. — time for them to call it a day, and for me to get back home. As we were leaving the building together, I asked the man who conducted my tests if he was attending university, because perhaps he knew my friend who had told me about this job opportunity. “Oh yeah, I know your friend, why didn’t you mention him before?” he asked. I didn’t answer, but the fact was that I didn’t want to bring it up and use it to my advantage during the interview. But in any case, it didn’t hurt afterward. He showed me how to get public transport back to the bus terminal and then we parted ways.</p> <p>Once on my own, I couldn’t believe I was done with the interview. Everything I had prepared for in the last two months had passed in what felt like the blink of an eye. All the stressing out about the little details — some that mattered, some that didn’t — was gone. Now it was me and Montevideo, and the streets crowded with people going back to their homes, and the cars, and the night falling over the city. I’d done it.</p> <p>Once I had processed all of it, the worst part came. It was time to take the bus and head home to wait for an answer, and waiting is something I’m really bad at. But that’s what it became. Waiting while staring at the ceiling of our room, wondering with my wife how our lives would change if I got the job. Waiting while looking at my books without knowing if I should have kept reading them or not. Waiting while making sure my phone had enough battery power so there would be no missed phone calls. Waiting, until at some point the wait was over, my phone rang, and again it was that number from Montevideo.</p> <p>“When can you start?” asked the voice on the other end. I was in. Yes, me. They wanted me: the guy who barely knew how to program, but let’s not worry about that now. “They want me,” I told myself, letting it sink in. “I’m in.” The whole gamble had paid off. Finally, after all those years of having jobs that paid nothing, working just because that’s what people do, even if having jobs meant forgetting about our dreams — finally, life was starting to turn around and smile on us, and from one day to the next, we could see a life that was worth living.</p> <p>I asked for one week to move to Montevideo, so they told me February 26 would be my starting date. “You will be working in PHP and JavaScript. You’re going to earn 15,000 pesos (500 USD) a month.” FIFTEEN THOUSAND PESOS! That was three times what my wife was making! “We are going to be rich!” I thought. I was going to be able to buy as much Coca-Cola as I wanted! We could probably even manage to save $100 per month and buy a house someday. We couldn’t believe what was happening to us.</p> <p>Finally, life was starting to turn around and smile on us, and from one day to the next, we could see a life that was worth living I spent that week prepping in JavaScript and trying to find a place to stay in Montevideo. A friend hooked me up with his apartment, since he was going to move out after Easter. The rent was good for us, so we decided that in about a month my wife would move to Montevideo and join us. The “apartment” was just one room, plus a kitchen and a small bathroom, and you could only fit two beds and a dining table in there. For a short while, it would be three of us living in that room, but honestly, that didn’t matter to us. I would be starting a new and exciting job, and we would have a place to live. Mission accomplished.</p> <p>First Week at Work</p> <p>My first day at work began with a nice twist: the person who conducted the interview was also my new manager. He brought me to office kitchen, we sat down at the table, and he started explaining what the company was doing, what the business model was, and so on. He then proceeded to lay down on a piece of paper depicting what the backend architecture was like, how things worked, what the server was doing, where the database was located, and many other details. I have to be honest: it was hard to follow. I recall hearing the term “production” a couple of times too. “This is our production setup,” “Here’s the production database,” and so on. I had no idea what this production thing he kept talking about was! Later, I learned that production referred to all the infrastructure, including code, that was facing clients and producing income for the company.</p> <p>We went through a couple of questions and answers here and there, and then came to what was, for me, the most significant part of that day. He looked at me and told me, honest and straight to the point: “We know that you’re not a good programmer, that you are just starting at this, and that you have no experience, so before you’re even able to commit one line of code to our codebase, we need you to study this book,” he said as he handed me a copy of PHP Objects, Patterns, and Practice by Matt Zandstra. “You have to know it by next week.” As straightforward it was, this was some of the most solid, sincere, and helpful feedback I’ve ever received as a programmer. To this day, I thank him for being forthright with me. During my career, I’ve learned how difficult it is to come by a manager who will give you this kind of feedback — feedback that’s useful for understanding your own shortcomings, but at the same time puts you on the right track in order to overcome them.</p> <p>Then he told me: “We know you are inexperienced, but during the interview you showed yourself as a person with a great attitude. That’s why we hired you.” I was speechless. I wondered what I’d done to deserve such an opportunity. Even more, I knew I had to prove I was worth it, so I set myself a goal of mastering the design patterns book as quickly as possible. First, I couldn’t disappoint my new boss who had taken a chance on me, and second, I finally had an opportunity in the big leagues, at the job I’d worked so hard for. It was time to shine.</p> <p>“We know you are inexperienced, but during the interview you showed yourself as a person with a great attitude. That’s why we hired you.” Fired After One Week on the Job</p> <p>During my first week, I studied that book like my life depended on it, because in a way, it did. I tried to learn as many of those design patterns as possible, practicing every example, and I tried to absorb as much knowledge as possible. By the end of the week, I wanted my manager to come to me and tell me, “Now you’re ready to start programming with us.” But as with every tale, this story needed a twist.</p> <p>That Thursday, some people from the company came and called me to another room to deliver some news: the company was conducting layoffs, and I was among the people being let go. “Nothing personal,” they said. “Business isn’t going too well, and we need to downsize, so we’re letting go of people who just joined the company. We hope you understand.” That day, I was one of around 50 employees who lost their jobs.</p> <p>I’m not sure I can accurately describe what I felt at that moment. “Why does life has to be like this?” I wondered, feeling somewhat discouraged and helpless. “What do I do now?” I asked to use the phone and called my wife. “Please don’t worry, but I have some bad news…” I began. I tried hard not to lose my composure, but meanwhile, the whole world was coming apart below my feet. All around me were employees coming in from other rooms and bidding farewell to all the people who were just fired, which only made me feel worse. Even so, I tried to convince myself that I shouldn’t despair. I had gotten this far, so it was simply a matter of applying to another job somewhere else.</p> <p>While I was saying goodbye to my short-lived colleagues, one of them tipped me off about some companies I should apply for, so I took note. From an internet cafe, I sent out job applications to the companies my brand new former colleague gave me, and when I was done, I headed back home.</p> <p>I tried to convince myself that I shouldn’t despair. I had gotten this far, so it was simply a matter of applying to another job somewhere else. “What a depressing day,” I thought. I entered the apartment and laid down on the bed, which for the record, was just a mattress on the floor. I remember the sky was gray, a perfect match for how I was feeling. I tried to nap, but my mind was lost, staring at the ceiling of that empty apartment and thinking about this new turn of events. “What if I hadn’t been fired?” “What did I do wrong?” I knew I had done nothing wrong. It was just bad luck, but it was hard to accept it.</p> <p>Suddenly my phone rang.</p> <p>“Is this Alvaro Videla? I’m calling from Intersys. We received your application and we want to have an interview with you. Is next Monday OK for you?”</p> <p>“OF COURSE THAT’S FINE WITH ME,” I thought, but instead I said, “Yes, that sounds great, I’ll be there.” As I hung up and placed my phone on the floor, I was in shock, unable to believe what had just happened. Montevideo was a city full of surprises.</p> <p>The next day I went down the street and asked the barber if he would give me a free haircut, since I had a job interview lined up but I had no money left. I still hadn’t received my salary from the week of work, so I needed a favor in exchange for being paid back the following week. Luckily, he was really happy to help me. I still remember his warm smile; he felt proud he was helping a neighbor get a job. While I was getting the haircut, he shared his story. I learned that in the early 2000s, he and his crew were the winners of some world hairdresser championship! I had no idea there were hairdresser championships. Don’t worry, I couldn’t believe him either back then. Either way, getting a haircut with a “world champion” was cool, but also meant that the service was expensive — $10 to be exact. It doesn’t seem like much, but keep in mind that in my hometown I could get a haircut for less than $2, and $10 could buy me at least five burgers and a soda. That said, it was quite an investment for my next job interview. I couldn’t complain though: a total stranger was doing me a favor when I needed it the most, and that raised my spirits.</p> <p>The next week came and I had my interview, which went great. The company I was just fired from was Live Interactive, after all, which happened to be well known in Montevideo due to being one of the biggest internet companies in the country. This meant that programmers coming from there were well regarded. Needless to say, I got the job. The salary wasn’t that great, but our plan of moving to the capital was still intact. Not bad for my first 10 days in Montevideo.</p> <p>Conclusion</p> <p>All in all, my plan had worked, and all my preparation and study paid off. I got my first job interview as a programmer and then passed it. I was hired and fired in the space of one week, but I didn’t give up and went on to secure a second job interview, landing a new position in my second week in Montevideo.</p> <p>But in order for this to happen, the first and most important step was being honest with myself. This allowed me to assess my skills to see what I was good at doing and where I had to improve.</p> <p>Being self aware helped me when I embarked upon the task of creating a program from scratch, because I was realistic about what I could do, but at the same time it forced me to do something about the areas where I was lacking. Additionally, dividing the project into actionable tasks helped me make progress and follow my idea through to completion.</p> <p>But it wasn’t just about skills; I also had to believe in myself, and that self confidence helped me whenever I faced a challenge that seemed like an insurmountable mountain.</p> <p>Meanwhile, humility always kept me in check, reminding me that what I had just climbed was but a little peak from among the many I had yet to climb.</p> <p>Finally, my family and friends offered help and support, and whenever I felt defeated, they kept me focused and reminded me why I was on my journey and what the destination was. In the end, because I persisted, I had become hirable, and now it was time to become an actual programmer.</p>  ]]></content:encoded>
			<enclosure length="16149087" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/The_freeCodeCamp_Podcast_Episode_3_-_How_I_Went_From_Selling_Food_in_the_Street_to_Working_for_Top_Firms_in_Tech_Part_3_-_First_Week_on_the_Job.mp3?dest-id=603849" />
			<itunes:duration>16:42</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[We conclude the tale of Alvaro Videla, who learned to code, got a job as a developer, and is now facing his first week on the job in Montevideo, Uruguay. He eventually went on to get jobs at Apple and other tech companies, but this is where he got his...]]></itunes:subtitle>
			<itunes:summary>We conclude the tale of Alvaro Videla, who learned to code, got a job as a developer, and is now facing his first week on the job in Montevideo, Uruguay. He eventually went on to get jobs at Apple and other tech companies, but this is where he got his start.</itunes:summary>
			<itunes:episode>3</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 2 - How I Went From Selling Food in the Street to Working as a Developer at Companies Like Apple Part 2 - The Interview</title>
			<itunes:title>How I Went From Selling Food in the Street to Working for Top Firms in Tech Part 2 - The Interview</itunes:title>
			<pubDate>Thu, 16 Nov 2017 23:56:02 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[3baf980fdb11279f93dd23a53c85fc95]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/how-i-went-from-selling-food-in-the-street-to-working-for-top-firms-in-tech-part-2-the-interview]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/c/f/3/5/cf35ec5083fe0e8f/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>We continue the story of Alvaro Videla, as travels to Montevideo, Uruguay for his first developer job interview. </p> <p>In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies.</p> <p> </p> <p>Article by Alvaro Videla: https://fcc.im/2AMqmfM</p> <p>Read by Quincy Larson: https://twitter.com/ossia</p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript:</p> <p><br /> Getting the Job</p> <p>During December 2006 and January 2007, I worked hard to get my maps application up and running. While building it, I wanted to learn as many programming notions as possible, trying to cram all the knowledge that would get me ready for the job interview into my head.</p> <p>Out of all the concepts I could learn, I identified the main ones that I thought would be relevant for getting the job. This narrowing of focus is a very important step toward achieving goals, since we don’t want to be all over the place, trying to grasp a bit of every subject but then failing to reach deepness on any of them.</p> <p>For my situation, I understood that I had to learn about object-oriented programming, since that was one of the most important programming techniques in use. On the technological side, I had identified PHP as the key programming language that would land me a job, while learning Flash programming would be the skill that would differentiate me from other candidates.</p> <p>How did I know that? It was a bit of hunch informed by what I was seeing mentioned on the web, along with what the computer magazines were writing about.</p> <p>Even back then, before I had the job, I knew it was very important to learn to understand and analyze the market I wanted to break into, and finding the right websites and publications is a very important step toward this. This is because these resources often have information that points to the ideas, trends, and technologies that we should focus on.</p> <p>Once my app was done and I felt I was ready for the interview, it was time to build my resume. However, I had no idea what should go on a tech resume and what should be left out. I listed things like MS Word and MS Excel as some of my skills, together with Adobe Illustrator and some InDesign. Why not, right?</p> <p>Wrong. Just thinking about that first resume makes me blush. If nothing else, what was clear about it was the message it was signaling: this person is a complete noob.</p> <p>The problem is that as someone trying to break into a new field and start a career, it was difficult to have something to write down on my resume that made me look competent. I had no idea what to include, so I listed everything.</p> <p>Today, if someone presented themselves for a backend developer position listing MS Word as a skill, I’m quite sure that person would be rejected straight away. Even worse, I think I would be the one rejecting a resume like that. But of course, hindsight is 20/20.</p> <p>Once my resume was complete and I got a cell phone number I could be reached at, I applied for the position of PHP programmer at Live Interactive. You’d better believe I read and reread every input box on that online form as I went over a mental checklist. “Did I spell my name correctly? Did I type the right phone number? Let’s double check the email. I don’t want to miss this opportunity because I wrote the wrong address.” I was all nerves, but at some point, I had to hit that send button. Click. Done. Exhalation. “I’ve done it. I’ve applied for my first job.”</p> <p>Once my app was done and I felt I was ready for the interview, it was time to build my resume. However, I had no idea what should go on a tech resume and what should be left out.</p> <p>After I submitted my application, I lingered at the internet cafe, browsing the web for random stuff. To my surprise, about half an hour later, my cellphone started to ring.</p> <p>“I don’t know this number,” I thought. The area code told me it was from Montevideo, but it was so quick, it couldn’t be them. Or could it?</p> <p>It took me a couple of seconds to understand that, yes, in fact, they were calling me! Can you imagine that? I honestly didn’t know what to do. “Should I take the call?” I wondered. “I’m probably not ready for this!” I quickly tried to get ahold of myself and walked outside to answer.</p> <p>“Hi, we’re calling from Live Interactive about your job application. Is this Alvaro Videla?” said the voice on the other end.</p> <p>Do you see what happened right there? I couldn’t believe it! I was being contacted by the company where I had just applied for a job.</p> <p>“Yes, it’s me,” I replied.</p> <p>The caller turned out to be the HR manager getting in touch, trying to set up an interview with me. She asked me when would it be a good time for me, so I told her that I needed a week, since “I have to arrange things here.” This wasn’t necessarily the case, as I could’ve just boarded the next bus and traveled there straightaway, but I wanted to prepare — to be 100 percent ready for it and not botch my only opportunity.</p> <p>I hung up at the end of that phone call having secured a job interview. Now it was time to get myself together and prepare for that interview. I had no doubt this was my once-in-a-lifetime opportunity and I couldn’t waste it. But first, I had to share my excitement with my mother and my wife: I needed to talk about what had happened with someone to help process my emotions.</p> <p>On one hand, all my hard work was starting to pay off, which felt great. But on the other hand, life had allowed me to see a tiny glimpse of a better future. Making that future a reality now rested entirely on my shoulders, but it was too much of a responsibility for me to handle alone.</p> <p>I spent the entire next week preparing for the interview, from reading and rereading the books I had, to trying to guess what kind of clothes I should wear for the interview. I had never worked as a programmer, and as such, I had no idea how the programmer culture worked and what kind of behavior would be expected from me. I didn’t have anyone to ask about this either, so at some point I decided to stop worrying too much about the appearance side and tried to focus on the technical aspect of the process, hoping my skills would speak for themselves.</p> <p>I had no doubt this was my once-in-a-lifetime opportunity and I couldn’t waste it, but first, I had to share my excitement with my mother and my wife: I needed to talk about what had happened with someone to help process my emotions.</p> <p>Unexpected obstacles</p> <p>The time passed quickly, and before I knew it, I was sitting on a two-hour-long bus trip, heading to Montevideo. I had the PHP Bible in my backpack and enough money to buy a burger and pay for the ticket from the bus terminal to the company’s offices in downtown Montevideo. I didn’t want to arrive late, so I was around the area an hour in advance, trying my best to fight off a nervous breakdown.</p> <p>I had to find something to kill time and occupy my worried mind, so I walked to a nearby square, found a bench, and sat down to keep studying. I couldn’t believe that all my struggles over the previous months would be decided in about an hour. “Did I prepare the best I could? That time I didn’t want to study that part of the book so I could go outside, was it worth it?” I wondered. Then I came to my senses. “Stop it,” I told myself. “It’s time to focus on the book in front of me right now, since there’s no reason for worrying about could haves.”</p> <p>Soon, it was time to head up for the interview. If this was a Tarantino film, my character would probably be called Mr. Blue: dark blue jeans, blue shirt, and dark blue hoodie.</p> <p>I got to the reception area and was welcomed by the HR manager, who I’d spoken to on the phone the week before. She asked me to sit and wait and offered me a glass of water. I took the offer and immediately started doubting myself. “Is this the right thing to do?” I wondered. “Am I being polite or impolite?” Anxiety was taking over.</p> <p>Meanwhile, people were walking around, going from one office to another. “Are any of them my interviewer?” I asked myself, studying each person who walked by. One man walked up to the HR manager and started talking. “Ah, it must be him,” I thought. But it wasn’t.</p> <p>After more of this wondering, the HR manager called my name and took me into a big conference room. She handed me a pile of paper and told me this was the first part of the interview: a psychological test with more than 100 behavioral and situational questions. What. Is. This? Nowhere in the PHP Bible did it mention that people needed to pass psychological tests to become a programmer! But I tried the best I could, second guessing the intention of every question. Of course, I had no idea if the answers I was choosing were correct, but I hoped they would bring me one step closer to getting the job I wanted.</p> <p>Once I was done, I returned the papers with my answers and then was asked to take a seat again and wait for the next stage. Soon the HR manager introduced me to someone who was going to conduct the programming interview. “Now or never,” I thought. “Now or never.” At that moment, I felt that all the pressure was on me, that I couldn’t let down my wife, my mom, my family. “If I don’t get this job, let it be known that it wasn’t because I got blocked mid interview, and didn’t know what to do,” I thought. “If I don’t pass the next stage, it’d better be because they didn’t want me, and not because I lacked the knowledge or preparation.”</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>We continue the story of Alvaro Videla, as travels to Montevideo, Uruguay for his first developer job interview. </p> <p>In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies.</p> <p> </p> <p>Article by Alvaro Videla: https://fcc.im/2AMqmfM</p> <p>Read by Quincy Larson: https://twitter.com/ossia</p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p> </p> <p>Transcript:</p> <p> Getting the Job</p> <p>During December 2006 and January 2007, I worked hard to get my maps application up and running. While building it, I wanted to learn as many programming notions as possible, trying to cram all the knowledge that would get me ready for the job interview into my head.</p> <p>Out of all the concepts I could learn, I identified the main ones that I thought would be relevant for getting the job. This narrowing of focus is a very important step toward achieving goals, since we don’t want to be all over the place, trying to grasp a bit of every subject but then failing to reach deepness on any of them.</p> <p>For my situation, I understood that I had to learn about object-oriented programming, since that was one of the most important programming techniques in use. On the technological side, I had identified PHP as the key programming language that would land me a job, while learning Flash programming would be the skill that would differentiate me from other candidates.</p> <p>How did I know that? It was a bit of hunch informed by what I was seeing mentioned on the web, along with what the computer magazines were writing about.</p> <p>Even back then, before I had the job, I knew it was very important to learn to understand and analyze the market I wanted to break into, and finding the right websites and publications is a very important step toward this. This is because these resources often have information that points to the ideas, trends, and technologies that we should focus on.</p> <p>Once my app was done and I felt I was ready for the interview, it was time to build my resume. However, I had no idea what should go on a tech resume and what should be left out. I listed things like MS Word and MS Excel as some of my skills, together with Adobe Illustrator and some InDesign. Why not, right?</p> <p>Wrong. Just thinking about that first resume makes me blush. If nothing else, what was clear about it was the message it was signaling: this person is a complete noob.</p> <p>The problem is that as someone trying to break into a new field and start a career, it was difficult to have something to write down on my resume that made me look competent. I had no idea what to include, so I listed everything.</p> <p>Today, if someone presented themselves for a backend developer position listing MS Word as a skill, I’m quite sure that person would be rejected straight away. Even worse, I think I would be the one rejecting a resume like that. But of course, hindsight is 20/20.</p> <p>Once my resume was complete and I got a cell phone number I could be reached at, I applied for the position of PHP programmer at Live Interactive. You’d better believe I read and reread every input box on that online form as I went over a mental checklist. “Did I spell my name correctly? Did I type the right phone number? Let’s double check the email. I don’t want to miss this opportunity because I wrote the wrong address.” I was all nerves, but at some point, I had to hit that send button. Click. Done. Exhalation. “I’ve done it. I’ve applied for my first job.”</p> <p>Once my app was done and I felt I was ready for the interview, it was time to build my resume. However, I had no idea what should go on a tech resume and what should be left out.</p> <p>After I submitted my application, I lingered at the internet cafe, browsing the web for random stuff. To my surprise, about half an hour later, my cellphone started to ring.</p> <p>“I don’t know this number,” I thought. The area code told me it was from Montevideo, but it was so quick, it couldn’t be them. Or could it?</p> <p>It took me a couple of seconds to understand that, yes, in fact, they were calling me! Can you imagine that? I honestly didn’t know what to do. “Should I take the call?” I wondered. “I’m probably not ready for this!” I quickly tried to get ahold of myself and walked outside to answer.</p> <p>“Hi, we’re calling from Live Interactive about your job application. Is this Alvaro Videla?” said the voice on the other end.</p> <p>Do you see what happened right there? I couldn’t believe it! I was being contacted by the company where I had just applied for a job.</p> <p>“Yes, it’s me,” I replied.</p> <p>The caller turned out to be the HR manager getting in touch, trying to set up an interview with me. She asked me when would it be a good time for me, so I told her that I needed a week, since “I have to arrange things here.” This wasn’t necessarily the case, as I could’ve just boarded the next bus and traveled there straightaway, but I wanted to prepare — to be 100 percent ready for it and not botch my only opportunity.</p> <p>I hung up at the end of that phone call having secured a job interview. Now it was time to get myself together and prepare for that interview. I had no doubt this was my once-in-a-lifetime opportunity and I couldn’t waste it. But first, I had to share my excitement with my mother and my wife: I needed to talk about what had happened with someone to help process my emotions.</p> <p>On one hand, all my hard work was starting to pay off, which felt great. But on the other hand, life had allowed me to see a tiny glimpse of a better future. Making that future a reality now rested entirely on my shoulders, but it was too much of a responsibility for me to handle alone.</p> <p>I spent the entire next week preparing for the interview, from reading and rereading the books I had, to trying to guess what kind of clothes I should wear for the interview. I had never worked as a programmer, and as such, I had no idea how the programmer culture worked and what kind of behavior would be expected from me. I didn’t have anyone to ask about this either, so at some point I decided to stop worrying too much about the appearance side and tried to focus on the technical aspect of the process, hoping my skills would speak for themselves.</p> <p>I had no doubt this was my once-in-a-lifetime opportunity and I couldn’t waste it, but first, I had to share my excitement with my mother and my wife: I needed to talk about what had happened with someone to help process my emotions.</p> <p>Unexpected obstacles</p> <p>The time passed quickly, and before I knew it, I was sitting on a two-hour-long bus trip, heading to Montevideo. I had the PHP Bible in my backpack and enough money to buy a burger and pay for the ticket from the bus terminal to the company’s offices in downtown Montevideo. I didn’t want to arrive late, so I was around the area an hour in advance, trying my best to fight off a nervous breakdown.</p> <p>I had to find something to kill time and occupy my worried mind, so I walked to a nearby square, found a bench, and sat down to keep studying. I couldn’t believe that all my struggles over the previous months would be decided in about an hour. “Did I prepare the best I could? That time I didn’t want to study that part of the book so I could go outside, was it worth it?” I wondered. Then I came to my senses. “Stop it,” I told myself. “It’s time to focus on the book in front of me right now, since there’s no reason for worrying about could haves.”</p> <p>Soon, it was time to head up for the interview. If this was a Tarantino film, my character would probably be called Mr. Blue: dark blue jeans, blue shirt, and dark blue hoodie.</p> <p>I got to the reception area and was welcomed by the HR manager, who I’d spoken to on the phone the week before. She asked me to sit and wait and offered me a glass of water. I took the offer and immediately started doubting myself. “Is this the right thing to do?” I wondered. “Am I being polite or impolite?” Anxiety was taking over.</p> <p>Meanwhile, people were walking around, going from one office to another. “Are any of them my interviewer?” I asked myself, studying each person who walked by. One man walked up to the HR manager and started talking. “Ah, it must be him,” I thought. But it wasn’t.</p> <p>After more of this wondering, the HR manager called my name and took me into a big conference room. She handed me a pile of paper and told me this was the first part of the interview: a psychological test with more than 100 behavioral and situational questions. What. Is. This? Nowhere in the PHP Bible did it mention that people needed to pass psychological tests to become a programmer! But I tried the best I could, second guessing the intention of every question. Of course, I had no idea if the answers I was choosing were correct, but I hoped they would bring me one step closer to getting the job I wanted.</p> <p>Once I was done, I returned the papers with my answers and then was asked to take a seat again and wait for the next stage. Soon the HR manager introduced me to someone who was going to conduct the programming interview. “Now or never,” I thought. “Now or never.” At that moment, I felt that all the pressure was on me, that I couldn’t let down my wife, my mom, my family. “If I don’t get this job, let it be known that it wasn’t because I got blocked mid interview, and didn’t know what to do,” I thought. “If I don’t pass the next stage, it’d better be because they didn’t want me, and not because I lacked the knowledge or preparation.”</p> <p> </p>]]></content:encoded>
			<enclosure length="8527748" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/The_freeCodeCamp_Podcast_Episode_2_-_How_I_Went_From_Selling_Food_in_the_Street_to_Working_for_Top_Firms_in_Tech_Part_2_-_The_Interview.mp3?dest-id=603849" />
			<itunes:duration>08:47</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[We continue the story of Alvaro Videla, as travels to Montevideo, Uruguay for his first developer job interview.  In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to...]]></itunes:subtitle>
			<itunes:summary>We continue the story of Alvaro Videla, as travels to Montevideo, Uruguay for his first developer job interview.</itunes:summary>
			<itunes:episode>2</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
		<item>
			<title>Ep. 1 - How I went from Selling Food in the Street to Working as a Developer at Companies Like Apple Part 1 - Learning to Code</title>
			<itunes:title>How I went from Selling Food in the Street to Working as a Developer at Companies Like Apple Part 1 - Learning to Code</itunes:title>
			<pubDate>Thu, 16 Nov 2017 23:51:49 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[16eaadb856afe5fc8a82f672fbecc1a1]]></guid>
			<link><![CDATA[http://freecodecamp.libsyn.com/episode-1-how-i-went-from-selling-food-in-the-street-to-working-as-a-developer-at-companies-like-apple-part-1-learning-to-code]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/f/f/7/2ff7cc8aa33fe438/freecodecamp-square-logo-large-1400.jpg" />
			<description><![CDATA[<p>In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies.</p> <p> </p> <p>Article by Alvaro Videla: <a href= "https://fcc.im/2fRSzwM">https://fcc.im/2fRSzwM</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p>At the end of 2006, I arrived at a crossroads in my life. My hopes of becoming a secondary school linguistics teacher had vanished in an instant, as several factors had come together and made it impossible for me to continue with my studies.</p> <p>Back in my hometown of Durazno, Uruguay, my wife was working long hours for a meager $160 (USD) a month. Yes, that’s $1,920 a year. We had sacrificed our time together so I could become a teacher and get a better job because we were dreaming of a better future.</p> <p>The problem with dreams is they tend to vanish when you wake up, and life’s alarm clock had just gone off.</p> <p>Because my career trajectory had suddenly strayed off course, I moved back to my hometown to figure out my next steps. Needless to say, I was depressed at the way things were, and our living situation only made things worse. It was good to be back with my wife, but the reasons for it were stressful.</p> <p>Additionally, we were sharing a house with my wife’s aunt, so our privacy was restricted to our bedroom, and we always felt like we were overstaying our welcome.</p> <p>As a way to bring in extra income, we tried to sell homemade pasta on the streets. I would go door-to-door collecting orders for the weekend. “Hello, do you want to order ravioli to eat this Sunday?” I’d ask person after person. “Yes, they’re homemade. Just give us a time and we’ll deliver them.”</p> <p>Then, after people ordered them, we spent our entire weekends making 2,000 ravioli only to end up with 500 pesos in our pockets, which comes about $20, not counting expenses.</p> <p>The whole situation was disheartening, and it made us feel hopeless. My wife would work hard all week, then come home only to spend her weekends helping me prepare the ravioli. She couldn’t even have one day of the weekend for herself. She begged me to stop selling ravioli, even if that meant we would end up with less money to pay our bills. Eventually I agreed, but it meant I had to try to find a job — and finding a job wasn’t so easy in our rural hometown. Anxiety and desperation were starting to set in.</p> <p>One night, I was talking with a friend who was studying computer engineering at the university in Montevideo. He told me about the various job opportunities one could find in the capital city, with salaries that were the stuff of dreams for someone living in the countryside. “There’s this big company in Montevideo, Live Interactive,” he told me. “They’re always looking for programmers; maybe you could try to get a job there. They pay really well.”</p> <p>The salary he mentioned was around three times what we were making at the time, and I couldn’t help but imagine all the things we could do with that much money. We wouldn’t need to worry anymore about putting food on the table. We could finally pay for our own internet connection, get proper clothes and shoes, and even have our own washing machine!</p> <p>Not only that, but I already had experience with computers. I always liked working with them, mostly because they appealed to my knack for problem solving. Programming reminded me of having to crack a code or find the solution to a difficult puzzle — but in addition to being challenging, it was fun. What’s more is that I saw programming as a career with a lot of potential for growth.</p> <p>But there was one small problem: to work as a computer programmer, one usually needs to know how to program computers. Me? I could install Linux on my own, but that was probably the extent of it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? How do you learn to program without internet access at home, without mentors to connect with, and without access to programming books? That was my problem back in 2006, and this is the story of how I tackled it.</p> <p>The Early Days</p> <p>I’ve been dabbling with computers since I was a teenager — most of the time when visiting a friend who had a PC. While we often used the computer to play games, I wasn’t interested in playing that much. Why? Back when I started secondary school, a friend’s father let us use his ZX Spectrum computer. He had good stack of cassettes with plenty of games for it, and of course, we could play all we wanted, but one day he showed me something that blew my mind: people could make their own games by programming the computer!</p> <p>He showed me some tricks in BASIC, like how you could generate random numbers using the RAND function. I was amazed. At that point, I realized computers were more than a glorified Nintendo with a keyboard: you could actually tell them to do things for you — cool things, like drawing lines using trigonometric functions and then painting them by applying random colors! You could even make music with them by passing different frequencies to BEEP. In fact, once I brought the Spectrum to my house and spent an entire afternoon playing different kinds of beep sounds on my TV — I’m sure my mom loved it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge?<br /> Later on, during my teenage years, I continued spending time with friends who had their own computers, and naturally we played games on them. Meanwhile, with my more tech-savvy friends, I learned a few operating system tricks — mostly MS-DOS.</p> <p>Every once in awhile, we would try some BASIC programming by copying, character by character, the code snippets that appeared in old computer magazines. To us, they seemed like magic spells or technological incantations. One thing we really liked was trying to edit the text messages a game would show for different situations. We thought we were such hackers!</p> <p>By the early 2000s, I managed to convince my grandfather to buy me a computer: a Pentium MMX with 32MB of RAM! What a machine! I installed Linux on it for the first time, using a SUSE CD that came for free with an Argentinean computer magazine. I spent quite a lot of time on that computer: trying different Linux distributions, getting familiarized with the command line, and so on, but never really doing any programming.</p> <p>When I look back to those days, I can’t understand why I wasn’t learning C programming — or any kind of programming for that matter. A friend even offered me the bible of C programming by Kernighan and Ritchie, so not having access to a manual wasn’t an excuse. But for some reason, after reading a few examples, it didn’t spark any interest in me, as I didn’t understand how what it covered would be useful for me. In any case, playing with Linux was the only thing I was doing with computers back then.</p> <p>From that point on, I had several minor jobs, played in a rock ’n’ roll band, and tried to become a linguistics teacher, all while getting married and moving all over the country together with my wife.</p> <p>Fast forward to November 2006 and I found myself in need of somehow becoming hirable by a software company. I had to become a credible computer programmer.</p> <p>Time for Some Goals</p> <p>If I wanted to get hired, the first thing to do was evaluate my skillset as a programmer. I had to be honest with myself so I could know where to focus my efforts.</p> <p>At the time, I knew a bit of ActionScript for Flash MX and the very basics of PHP programming. Earlier that year, I had started learning those technologies as a hobby. I’d also started a pet project to learn programming, thinking maybe it could become a secondary source of income.</p> <p>I came up with the idea of making a digital map of my hometown where you could drop pins that would point the user to the location of businesses, shops, and interesting locations. I would then charge those businesses money in exchange for appearing in my online map application.</p> <p>Of course I know what you’re thinking. “That’s just Google Maps,” you say. Yes, but back in 2006, the only thing Google Maps knew about my hometown was that it was crossed by a big national highway. Given that, my map seemed like a good idea. Also, I figured this project would be the perfect way to showcase my skills to a prospective employer. I had a clear goal of what I wanted to build; I just had to get down to work and make it happen.</p> <p>So at the end of 2006, I set myself a deadline: come February 2007, I had to have a working concept of the map application. This had to include a Flash frontend, served by a PHP backend, using MySQL for data persistence. The technologies I’ve just mentioned might not seem too relevant today, but the point here is that I had to nail down every detail of my plan so I would know which problems to tackle first, since time was ticking: every day that went by was another day where my wife was overloaded, working overtime to get food on our table.</p> <p>Additionally, to even have a shot at getting a programming job, I had to show potential employers that I could program in those particular technologies, because that was part of the job description. Naturally, I had nothing related to these skills on my resume, so I had to build up my knowledge from scratch, and my app would serve as the showcase of my programming expertise.</p> <p>The plan was to land an interview at the company my friend had mentioned before, and hopefully, with the combination of my skills and my app, I would end up getting a job there. Even then, I knew the importance of setting clear goals for yourself in order to achieve what you want.</p> <p>Learning project: a Map Application</p> <p>The map application I created was called Aleph Maps — a reference to Jorge Luis Borges’ 1949 story, “El Aleph,” about a place in the universe where everything — past, present, and future — is contained. Not ambitious at all, right? And to bring the idea into existence, I would have to learn how to program web apps.</p> <p>Having no internet at home is a real challenge for a future web developer. When I started, ADSL broadband adoption was almost nonexistent, limited only to businesses and maybe wealthy households. For the average family, connecting to the internet meant dialing in on a modem connection and paying high prices for a slow internet experience. I couldn’t afford that, which meant I had to go and bother friends every time I needed to access some online tutorial that explained how to program in PHP.</p> <p>So even though I had a computer and the will to learn, I still didn’t have easy or regular access to the information on how to do it. But I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.</p> <p>Meanwhile, due to the lack of internet access around town, cyber cafes started popping up in the city, charging around half a dollar for one hour of surfing. This struck me as a better solution than constantly bothering my friends. But this also meant finding an extra 50 cents and a couple of floppy disks in order to get to a cyber cafe, find the information I wanted, copy it onto one of those diskettes, and get it home onto my computer. More often than not, data got corrupted in the process of extracting it from the floppy disks.</p> <p>Imagine how angry and frustrated I was: I had made a trip to a cyber cafe and wasted 50 cents for nothing. Half a dollar! This might not sound like much, but at that time where we lived, you could buy a burger or a bottle of beer for a dollar. For us, it was a lot of money: it meant our daily bottle of milk or a loaf of bread.</p> <p>During those days, my routine consisted of trying to solve problem A to get to point B. Sometimes the tasks were rather easy and I felt like I was making quick progress. Other days, it felt like I was going nowhere. For example, say I had to implement a feature like “insert new data into the database.” This meant writing down all the obstacles I had to solve to achieve that — from how to write an SQL INSERT statement to how to execute it using PHP — and then integrating everything into the app.</p> <p>Each of these tasks was an item on my daily “shopping list” for when I went to the internet cafe. I would take a couple of floppy disks with me, and then I would google for blog posts, tutorials, and guides that would help me solve the items on my list. Once that was complete, it was time to save them on my diskettes and head home, all the while hoping the data had successfully saved and would be easily accessed on my computer.</p> <p>Because of the uncertainty involved, the bicycle trip back would be fueled by the worst anxiety ever. “What if the data isn’t there at all?” I wondered. “What if the bike shakes too much and the data gets corrupted? I really don’t have another dollar to spare until tomorrow, so this better work when I get home.”</p> <p>I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.<br /> Suffice to say, this wasn’t practical at all. Once I was back home, I’d use the information I’d brought back to help me accomplish the task in progress, but once it was complete, I lacked the knowledge to perform the next step. This means I was left sitting at home, thinking about a problem, and waiting until the next day, when I could squeeze another 50 cents out of our budget to go to the cafe and repeat this routine. Though at the time it seemed like my only option, eventually I had to admit to myself that it was time for a new strategy. I needed something that contained most of the information on how to write a web application with PHP and Flash MX, with guides explaining how to perform the most trivial of tasks, all in one single place. Not the internet, but books!</p> <p>It seems like such a no-brainer, but for someone in my situation, the kinds of books I needed weren’t necessarily in reach. The problem is that when you’re part of a marginalized sector of society, accessing books isn’t so easy. The closest thing to a programming book you could find at the public library would be some outdated manual on how to repair a computer — maybe some dusty MS-DOS guide, or perhaps a BASIC or Delphi book if you got lucky — but not much more.</p> <p>Well, at least one could buy books, right? Not really.</p> <p>In most towns in Uruguay’s countryside, technical books are usually absent from the bookstore shelves, and my town was no exception. Add to the problem the fact that most of the tech books — particularly those talking about cutting-edge technology — are written in English, and you can just forget about the local bookstore. In the end, this left me with only one option: Amazon.</p> <p>But it wasn’t that easy either. To buy books on Amazon, you need a little piece of plastic called a credit card, but to get access to a credit card, you need a good credit history — which for most people is not a problem. In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan.</p> <p>For us, it worked like this: if we wanted to buy something more expensive than our monthly income, we either saved month after month until we got enough money to buy what we wanted, or we asked some family member to buy the product for us and worked to pay them back later.</p> <p>And even if we’d had the option of buying books on Amazon, we hadn’t factored in the fact that shipping alone from the United States to Uruguay was nearly the cost of the book, not to mention it would take a month for it to arrive.</p> <p>In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan<br /> Sometimes the solution to these kinds of problems is closer to home than we think. Eventually, we ended up resorting to asking for help from family. My wife has an aunt who had been living in the US for quite a while, so we figured it was worth a shot to ask and see if she would buy me a couple of programming books. So on one of my internet excursions, I wrote an email to her explaining my situation, hit send, and basically crossed my fingers and prayed to every deity out there that she would help us. After a couple of days, I had a new email in my inbox. It was her answer, straight to the point: “Tell me which books you need and I’ll order them from Amazon.” After doing some research, I ended up asking for the Flash MX Bible and the PHP 5 and MySQL Bible.</p> <p>Those two books proved incredibly helpful in the weeks to come. They were both so thorough that I was able to make steady progress without needing to constantly visit the internet cafe in search of missing information. I could finally make headway on understanding what I needed to know to build my maps application. And finally, with access to the information I needed, it was time to sit down in front of my computer and get to work.</p> <p> </p> <p>At the end of 2006, I arrived at a crossroads in my life. My hopes of becoming a secondary school linguistics teacher had vanished in an instant, as several factors had come together and made it impossible for me to continue with my studies.</p> <p>Back in my hometown of Durazno, Uruguay, my wife was working long hours for a meager $160 (USD) a month. Yes, that’s $1,920 a year. We had sacrificed our time together so I could become a teacher and get a better job because we were dreaming of a better future.</p> <p>The problem with dreams is they tend to vanish when you wake up, and life’s alarm clock had just gone off.</p> <p>Because my career trajectory had suddenly strayed off course, I moved back to my hometown to figure out my next steps. Needless to say, I was depressed at the way things were, and our living situation only made things worse. It was good to be back with my wife, but the reasons for it were stressful.</p> <p>Additionally, we were sharing a house with my wife’s aunt, so our privacy was restricted to our bedroom, and we always felt like we were overstaying our welcome.</p> <p>As a way to bring in extra income, we tried to sell homemade pasta on the streets. I would go door-to-door collecting orders for the weekend. “Hello, do you want to order ravioli to eat this Sunday?” I’d ask person after person. “Yes, they’re homemade. Just give us a time and we’ll deliver them.”</p> <p>Then, after people ordered them, we spent our entire weekends making 2,000 ravioli only to end up with 500 pesos in our pockets, which comes about $20, not counting expenses.</p> <p>The whole situation was disheartening, and it made us feel hopeless. My wife would work hard all week, then come home only to spend her weekends helping me prepare the ravioli. She couldn’t even have one day of the weekend for herself. She begged me to stop selling ravioli, even if that meant we would end up with less money to pay our bills. Eventually I agreed, but it meant I had to try to find a job — and finding a job wasn’t so easy in our rural hometown. Anxiety and desperation were starting to set in.</p> <p>One night, I was talking with a friend who was studying computer engineering at the university in Montevideo. He told me about the various job opportunities one could find in the capital city, with salaries that were the stuff of dreams for someone living in the countryside. “There’s this big company in Montevideo, Live Interactive,” he told me. “They’re always looking for programmers; maybe you could try to get a job there. They pay really well.”</p> <p>The salary he mentioned was around three times what we were making at the time, and I couldn’t help but imagine all the things we could do with that much money. We wouldn’t need to worry anymore about putting food on the table. We could finally pay for our own internet connection, get proper clothes and shoes, and even have our own washing machine!</p> <p>Not only that, but I already had experience with computers. I always liked working with them, mostly because they appealed to my knack for problem solving. Programming reminded me of having to crack a code or find the solution to a difficult puzzle — but in addition to being challenging, it was fun. What’s more is that I saw programming as a career with a lot of potential for growth.</p> <p>But there was one small problem: to work as a computer programmer, one usually needs to know how to program computers. Me? I could install Linux on my own, but that was probably the extent of it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? How do you learn to program without internet access at home, without mentors to connect with, and without access to programming books? That was my problem back in 2006, and this is the story of how I tackled it.</p> <p>The Early Days</p> <p>I’ve been dabbling with computers since I was a teenager — most of the time when visiting a friend who had a PC. While we often used the computer to play games, I wasn’t interested in playing that much. Why? Back when I started secondary school, a friend’s father let us use his ZX Spectrum computer. He had good stack of cassettes with plenty of games for it, and of course, we could play all we wanted, but one day he showed me something that blew my mind: people could make their own games by programming the computer!</p> <p>He showed me some tricks in BASIC, like how you could generate random numbers using the RAND function. I was amazed. At that point, I realized computers were more than a glorified Nintendo with a keyboard: you could actually tell them to do things for you — cool things, like drawing lines using trigonometric functions and then painting them by applying random colors! You could even make music with them by passing different frequencies to BEEP. In fact, once I brought the Spectrum to my house and spent an entire afternoon playing different kinds of beep sounds on my TV — I’m sure my mom loved it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge?<br /> Later on, during my teenage years, I continued spending time with friends who had their own computers, and naturally we played games on them. Meanwhile, with my more tech-savvy friends, I learned a few operating system tricks — mostly MS-DOS.</p> <p>Every once in awhile, we would try some BASIC programming by copying, character by character, the code snippets that appeared in old computer magazines. To us, they seemed like magic spells or technological incantations. One thing we really liked was trying to edit the text messages a game would show for different situations. We thought we were such hackers!</p> <p>By the early 2000s, I managed to convince my grandfather to buy me a computer: a Pentium MMX with 32MB of RAM! What a machine! I installed Linux on it for the first time, using a SUSE CD that came for free with an Argentinean computer magazine. I spent quite a lot of time on that computer: trying different Linux distributions, getting familiarized with the command line, and so on, but never really doing any programming.</p> <p>When I look back to those days, I can’t understand why I wasn’t learning C programming — or any kind of programming for that matter. A friend even offered me the bible of C programming by Kernighan and Ritchie, so not having access to a manual wasn’t an excuse. But for some reason, after reading a few examples, it didn’t spark any interest in me, as I didn’t understand how what it covered would be useful for me. In any case, playing with Linux was the only thing I was doing with computers back then.</p> <p>From that point on, I had several minor jobs, played in a rock ’n’ roll band, and tried to become a linguistics teacher, all while getting married and moving all over the country together with my wife.</p> <p>Fast forward to November 2006 and I found myself in need of somehow becoming hirable by a software company. I had to become a credible computer programmer.</p> <p>Time for Some Goals</p> <p>If I wanted to get hired, the first thing to do was evaluate my skillset as a programmer. I had to be honest with myself so I could know where to focus my efforts.</p> <p>At the time, I knew a bit of ActionScript for Flash MX and the very basics of PHP programming. Earlier that year, I had started learning those technologies as a hobby. I’d also started a pet project to learn programming, thinking maybe it could become a secondary source of income.</p> <p>I came up with the idea of making a digital map of my hometown where you could drop pins that would point the user to the location of businesses, shops, and interesting locations. I would then charge those businesses money in exchange for appearing in my online map application.</p> <p>Of course I know what you’re thinking. “That’s just Google Maps,” you say. Yes, but back in 2006, the only thing Google Maps knew about my hometown was that it was crossed by a big national highway. Given that, my map seemed like a good idea. Also, I figured this project would be the perfect way to showcase my skills to a prospective employer. I had a clear goal of what I wanted to build; I just had to get down to work and make it happen.</p> <p>So at the end of 2006, I set myself a deadline: come February 2007, I had to have a working concept of the map application. This had to include a Flash frontend, served by a PHP backend, using MySQL for data persistence. The technologies I’ve just mentioned might not seem too relevant today, but the point here is that I had to nail down every detail of my plan so I would know which problems to tackle first, since time was ticking: every day that went by was another day where my wife was overloaded, working overtime to get food on our table.</p> <p>Additionally, to even have a shot at getting a programming job, I had to show potential employers that I could program in those particular technologies, because that was part of the job description. Naturally, I had nothing related to these skills on my resume, so I had to build up my knowledge from scratch, and my app would serve as the showcase of my programming expertise.</p> <p>The plan was to land an interview at the company my friend had mentioned before, and hopefully, with the combination of my skills and my app, I would end up getting a job there. Even then, I knew the importance of setting clear goals for yourself in order to achieve what you want.</p> <p>Learning project: a Map Application</p> <p>The map application I created was called Aleph Maps — a reference to Jorge Luis Borges’ 1949 story, “El Aleph,” about a place in the universe where everything — past, present, and future — is contained. Not ambitious at all, right? And to bring the idea into existence, I would have to learn how to program web apps.</p> <p>Having no internet at home is a real challenge for a future web developer. When I started, ADSL broadband adoption was almost nonexistent, limited only to businesses and maybe wealthy households. For the average family, connecting to the internet meant dialing in on a modem connection and paying high prices for a slow internet experience. I couldn’t afford that, which meant I had to go and bother friends every time I needed to access some online tutorial that explained how to program in PHP.</p> <p>So even though I had a computer and the will to learn, I still didn’t have easy or regular access to the information on how to do it. But I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.</p> <p>Meanwhile, due to the lack of internet access around town, cyber cafes started popping up in the city, charging around half a dollar for one hour of surfing. This struck me as a better solution than constantly bothering my friends. But this also meant finding an extra 50 cents and a couple of floppy disks in order to get to a cyber cafe, find the information I wanted, copy it onto one of those diskettes, and get it home onto my computer. More often than not, data got corrupted in the process of extracting it from the floppy disks.</p> <p>Imagine how angry and frustrated I was: I had made a trip to a cyber cafe and wasted 50 cents for nothing. Half a dollar! This might not sound like much, but at that time where we lived, you could buy a burger or a bottle of beer for a dollar. For us, it was a lot of money: it meant our daily bottle of milk or a loaf of bread.</p> <p>During those days, my routine consisted of trying to solve problem A to get to point B. Sometimes the tasks were rather easy and I felt like I was making quick progress. Other days, it felt like I was going nowhere. For example, say I had to implement a feature like “insert new data into the database.” This meant writing down all the obstacles I had to solve to achieve that — from how to write an SQL INSERT statement to how to execute it using PHP — and then integrating everything into the app.</p> <p>Each of these tasks was an item on my daily “shopping list” for when I went to the internet cafe. I would take a couple of floppy disks with me, and then I would google for blog posts, tutorials, and guides that would help me solve the items on my list. Once that was complete, it was time to save them on my diskettes and head home, all the while hoping the data had successfully saved and would be easily accessed on my computer.</p> <p>Because of the uncertainty involved, the bicycle trip back would be fueled by the worst anxiety ever. “What if the data isn’t there at all?” I wondered. “What if the bike shakes too much and the data gets corrupted? I really don’t have another dollar to spare until tomorrow, so this better work when I get home.”</p> <p>I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.<br /> Suffice to say, this wasn’t practical at all. Once I was back home, I’d use the information I’d brought back to help me accomplish the task in progress, but once it was complete, I lacked the knowledge to perform the next step. This means I was left sitting at home, thinking about a problem, and waiting until the next day, when I could squeeze another 50 cents out of our budget to go to the cafe and repeat this routine. Though at the time it seemed like my only option, eventually I had to admit to myself that it was time for a new strategy. I needed something that contained most of the information on how to write a web application with PHP and Flash MX, with guides explaining how to perform the most trivial of tasks, all in one single place. Not the internet, but books!</p> <p>It seems like such a no-brainer, but for someone in my situation, the kinds of books I needed weren’t necessarily in reach. The problem is that when you’re part of a marginalized sector of society, accessing books isn’t so easy. The closest thing to a programming book you could find at the public library would be some outdated manual on how to repair a computer — maybe some dusty MS-DOS guide, or perhaps a BASIC or Delphi book if you got lucky — but not much more.</p> <p>Well, at least one could buy books, right? Not really.</p> <p>In most towns in Uruguay’s countryside, technical books are usually absent from the bookstore shelves, and my town was no exception. Add to the problem the fact that most of the tech books — particularly those talking about cutting-edge technology — are written in English, and you can just forget about the local bookstore. In the end, this left me with only one option: Amazon.</p> <p>But it wasn’t that easy either. To buy books on Amazon, you need a little piece of plastic called a credit card, but to get access to a credit card, you need a good credit history — which for most people is not a problem. In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan.</p> <p>For us, it worked like this: if we wanted to buy something more expensive than our monthly income, we either saved month after month until we got enough money to buy what we wanted, or we asked some family member to buy the product for us and worked to pay them back later.</p> <p>And even if we’d had the option of buying books on Amazon, we hadn’t factored in the fact that shipping alone from the United States to Uruguay was nearly the cost of the book, not to mention it would take a month for it to arrive.</p> <p>In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan<br /> Sometimes the solution to these kinds of problems is closer to home than we think. Eventually, we ended up resorting to asking for help from family. My wife has an aunt who had been living in the US for quite a while, so we figured it was worth a shot to ask and see if she would buy me a couple of programming books. So on one of my internet excursions, I wrote an email to her explaining my situation, hit send, and basically crossed my fingers and prayed to every deity out there that she would help us. After a couple of days, I had a new email in my inbox. It was her answer, straight to the point: “Tell me which books you need and I’ll order them from Amazon.” After doing some research, I ended up asking for the Flash MX Bible and the PHP 5 and MySQL Bible.</p> <p>Those two books proved incredibly helpful in the weeks to come. They were both so thorough that I was able to make steady progress without needing to constantly visit the internet cafe in search of missing information. I could finally make headway on understanding what I needed to know to build my maps application. And finally, with access to the information I needed, it was time to sit down in front of my computer and get to work.</p>]]></description>
			<content:encoded><![CDATA[<p>In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies.</p> <p> </p> <p>Article by Alvaro Videla: <a href= "https://fcc.im/2fRSzwM">https://fcc.im/2fRSzwM</a></p> <p>Read by Quincy Larson: <a href= "https://twitter.com/ossia">https://twitter.com/ossia</a></p> <p>Learn to code for free at: <a href= "https://www.freecodecamp.org">https://www.freecodecamp.org</a></p> <p>Music: "Sounds of Wonder" by Vangough: <a href= "https://fcc.im/2yQOq0q">https://fcc.im/2yQOq0q</a></p> <p>Transcript:</p> <p>At the end of 2006, I arrived at a crossroads in my life. My hopes of becoming a secondary school linguistics teacher had vanished in an instant, as several factors had come together and made it impossible for me to continue with my studies.</p> <p>Back in my hometown of Durazno, Uruguay, my wife was working long hours for a meager $160 (USD) a month. Yes, that’s $1,920 a year. We had sacrificed our time together so I could become a teacher and get a better job because we were dreaming of a better future.</p> <p>The problem with dreams is they tend to vanish when you wake up, and life’s alarm clock had just gone off.</p> <p>Because my career trajectory had suddenly strayed off course, I moved back to my hometown to figure out my next steps. Needless to say, I was depressed at the way things were, and our living situation only made things worse. It was good to be back with my wife, but the reasons for it were stressful.</p> <p>Additionally, we were sharing a house with my wife’s aunt, so our privacy was restricted to our bedroom, and we always felt like we were overstaying our welcome.</p> <p>As a way to bring in extra income, we tried to sell homemade pasta on the streets. I would go door-to-door collecting orders for the weekend. “Hello, do you want to order ravioli to eat this Sunday?” I’d ask person after person. “Yes, they’re homemade. Just give us a time and we’ll deliver them.”</p> <p>Then, after people ordered them, we spent our entire weekends making 2,000 ravioli only to end up with 500 pesos in our pockets, which comes about $20, not counting expenses.</p> <p>The whole situation was disheartening, and it made us feel hopeless. My wife would work hard all week, then come home only to spend her weekends helping me prepare the ravioli. She couldn’t even have one day of the weekend for herself. She begged me to stop selling ravioli, even if that meant we would end up with less money to pay our bills. Eventually I agreed, but it meant I had to try to find a job — and finding a job wasn’t so easy in our rural hometown. Anxiety and desperation were starting to set in.</p> <p>One night, I was talking with a friend who was studying computer engineering at the university in Montevideo. He told me about the various job opportunities one could find in the capital city, with salaries that were the stuff of dreams for someone living in the countryside. “There’s this big company in Montevideo, Live Interactive,” he told me. “They’re always looking for programmers; maybe you could try to get a job there. They pay really well.”</p> <p>The salary he mentioned was around three times what we were making at the time, and I couldn’t help but imagine all the things we could do with that much money. We wouldn’t need to worry anymore about putting food on the table. We could finally pay for our own internet connection, get proper clothes and shoes, and even have our own washing machine!</p> <p>Not only that, but I already had experience with computers. I always liked working with them, mostly because they appealed to my knack for problem solving. Programming reminded me of having to crack a code or find the solution to a difficult puzzle — but in addition to being challenging, it was fun. What’s more is that I saw programming as a career with a lot of potential for growth.</p> <p>But there was one small problem: to work as a computer programmer, one usually needs to know how to program computers. Me? I could install Linux on my own, but that was probably the extent of it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? How do you learn to program without internet access at home, without mentors to connect with, and without access to programming books? That was my problem back in 2006, and this is the story of how I tackled it.</p> <p>The Early Days</p> <p>I’ve been dabbling with computers since I was a teenager — most of the time when visiting a friend who had a PC. While we often used the computer to play games, I wasn’t interested in playing that much. Why? Back when I started secondary school, a friend’s father let us use his ZX Spectrum computer. He had good stack of cassettes with plenty of games for it, and of course, we could play all we wanted, but one day he showed me something that blew my mind: people could make their own games by programming the computer!</p> <p>He showed me some tricks in BASIC, like how you could generate random numbers using the RAND function. I was amazed. At that point, I realized computers were more than a glorified Nintendo with a keyboard: you could actually tell them to do things for you — cool things, like drawing lines using trigonometric functions and then painting them by applying random colors! You could even make music with them by passing different frequencies to BEEP. In fact, once I brought the Spectrum to my house and spent an entire afternoon playing different kinds of beep sounds on my TV — I’m sure my mom loved it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? Later on, during my teenage years, I continued spending time with friends who had their own computers, and naturally we played games on them. Meanwhile, with my more tech-savvy friends, I learned a few operating system tricks — mostly MS-DOS.</p> <p>Every once in awhile, we would try some BASIC programming by copying, character by character, the code snippets that appeared in old computer magazines. To us, they seemed like magic spells or technological incantations. One thing we really liked was trying to edit the text messages a game would show for different situations. We thought we were such hackers!</p> <p>By the early 2000s, I managed to convince my grandfather to buy me a computer: a Pentium MMX with 32MB of RAM! What a machine! I installed Linux on it for the first time, using a SUSE CD that came for free with an Argentinean computer magazine. I spent quite a lot of time on that computer: trying different Linux distributions, getting familiarized with the command line, and so on, but never really doing any programming.</p> <p>When I look back to those days, I can’t understand why I wasn’t learning C programming — or any kind of programming for that matter. A friend even offered me the bible of C programming by Kernighan and Ritchie, so not having access to a manual wasn’t an excuse. But for some reason, after reading a few examples, it didn’t spark any interest in me, as I didn’t understand how what it covered would be useful for me. In any case, playing with Linux was the only thing I was doing with computers back then.</p> <p>From that point on, I had several minor jobs, played in a rock ’n’ roll band, and tried to become a linguistics teacher, all while getting married and moving all over the country together with my wife.</p> <p>Fast forward to November 2006 and I found myself in need of somehow becoming hirable by a software company. I had to become a credible computer programmer.</p> <p>Time for Some Goals</p> <p>If I wanted to get hired, the first thing to do was evaluate my skillset as a programmer. I had to be honest with myself so I could know where to focus my efforts.</p> <p>At the time, I knew a bit of ActionScript for Flash MX and the very basics of PHP programming. Earlier that year, I had started learning those technologies as a hobby. I’d also started a pet project to learn programming, thinking maybe it could become a secondary source of income.</p> <p>I came up with the idea of making a digital map of my hometown where you could drop pins that would point the user to the location of businesses, shops, and interesting locations. I would then charge those businesses money in exchange for appearing in my online map application.</p> <p>Of course I know what you’re thinking. “That’s just Google Maps,” you say. Yes, but back in 2006, the only thing Google Maps knew about my hometown was that it was crossed by a big national highway. Given that, my map seemed like a good idea. Also, I figured this project would be the perfect way to showcase my skills to a prospective employer. I had a clear goal of what I wanted to build; I just had to get down to work and make it happen.</p> <p>So at the end of 2006, I set myself a deadline: come February 2007, I had to have a working concept of the map application. This had to include a Flash frontend, served by a PHP backend, using MySQL for data persistence. The technologies I’ve just mentioned might not seem too relevant today, but the point here is that I had to nail down every detail of my plan so I would know which problems to tackle first, since time was ticking: every day that went by was another day where my wife was overloaded, working overtime to get food on our table.</p> <p>Additionally, to even have a shot at getting a programming job, I had to show potential employers that I could program in those particular technologies, because that was part of the job description. Naturally, I had nothing related to these skills on my resume, so I had to build up my knowledge from scratch, and my app would serve as the showcase of my programming expertise.</p> <p>The plan was to land an interview at the company my friend had mentioned before, and hopefully, with the combination of my skills and my app, I would end up getting a job there. Even then, I knew the importance of setting clear goals for yourself in order to achieve what you want.</p> <p>Learning project: a Map Application</p> <p>The map application I created was called Aleph Maps — a reference to Jorge Luis Borges’ 1949 story, “El Aleph,” about a place in the universe where everything — past, present, and future — is contained. Not ambitious at all, right? And to bring the idea into existence, I would have to learn how to program web apps.</p> <p>Having no internet at home is a real challenge for a future web developer. When I started, ADSL broadband adoption was almost nonexistent, limited only to businesses and maybe wealthy households. For the average family, connecting to the internet meant dialing in on a modem connection and paying high prices for a slow internet experience. I couldn’t afford that, which meant I had to go and bother friends every time I needed to access some online tutorial that explained how to program in PHP.</p> <p>So even though I had a computer and the will to learn, I still didn’t have easy or regular access to the information on how to do it. But I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.</p> <p>Meanwhile, due to the lack of internet access around town, cyber cafes started popping up in the city, charging around half a dollar for one hour of surfing. This struck me as a better solution than constantly bothering my friends. But this also meant finding an extra 50 cents and a couple of floppy disks in order to get to a cyber cafe, find the information I wanted, copy it onto one of those diskettes, and get it home onto my computer. More often than not, data got corrupted in the process of extracting it from the floppy disks.</p> <p>Imagine how angry and frustrated I was: I had made a trip to a cyber cafe and wasted 50 cents for nothing. Half a dollar! This might not sound like much, but at that time where we lived, you could buy a burger or a bottle of beer for a dollar. For us, it was a lot of money: it meant our daily bottle of milk or a loaf of bread.</p> <p>During those days, my routine consisted of trying to solve problem A to get to point B. Sometimes the tasks were rather easy and I felt like I was making quick progress. Other days, it felt like I was going nowhere. For example, say I had to implement a feature like “insert new data into the database.” This meant writing down all the obstacles I had to solve to achieve that — from how to write an SQL INSERT statement to how to execute it using PHP — and then integrating everything into the app.</p> <p>Each of these tasks was an item on my daily “shopping list” for when I went to the internet cafe. I would take a couple of floppy disks with me, and then I would google for blog posts, tutorials, and guides that would help me solve the items on my list. Once that was complete, it was time to save them on my diskettes and head home, all the while hoping the data had successfully saved and would be easily accessed on my computer.</p> <p>Because of the uncertainty involved, the bicycle trip back would be fueled by the worst anxiety ever. “What if the data isn’t there at all?” I wondered. “What if the bike shakes too much and the data gets corrupted? I really don’t have another dollar to spare until tomorrow, so this better work when I get home.”</p> <p>I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions. Suffice to say, this wasn’t practical at all. Once I was back home, I’d use the information I’d brought back to help me accomplish the task in progress, but once it was complete, I lacked the knowledge to perform the next step. This means I was left sitting at home, thinking about a problem, and waiting until the next day, when I could squeeze another 50 cents out of our budget to go to the cafe and repeat this routine. Though at the time it seemed like my only option, eventually I had to admit to myself that it was time for a new strategy. I needed something that contained most of the information on how to write a web application with PHP and Flash MX, with guides explaining how to perform the most trivial of tasks, all in one single place. Not the internet, but books!</p> <p>It seems like such a no-brainer, but for someone in my situation, the kinds of books I needed weren’t necessarily in reach. The problem is that when you’re part of a marginalized sector of society, accessing books isn’t so easy. The closest thing to a programming book you could find at the public library would be some outdated manual on how to repair a computer — maybe some dusty MS-DOS guide, or perhaps a BASIC or Delphi book if you got lucky — but not much more.</p> <p>Well, at least one could buy books, right? Not really.</p> <p>In most towns in Uruguay’s countryside, technical books are usually absent from the bookstore shelves, and my town was no exception. Add to the problem the fact that most of the tech books — particularly those talking about cutting-edge technology — are written in English, and you can just forget about the local bookstore. In the end, this left me with only one option: Amazon.</p> <p>But it wasn’t that easy either. To buy books on Amazon, you need a little piece of plastic called a credit card, but to get access to a credit card, you need a good credit history — which for most people is not a problem. In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan.</p> <p>For us, it worked like this: if we wanted to buy something more expensive than our monthly income, we either saved month after month until we got enough money to buy what we wanted, or we asked some family member to buy the product for us and worked to pay them back later.</p> <p>And even if we’d had the option of buying books on Amazon, we hadn’t factored in the fact that shipping alone from the United States to Uruguay was nearly the cost of the book, not to mention it would take a month for it to arrive.</p> <p>In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan Sometimes the solution to these kinds of problems is closer to home than we think. Eventually, we ended up resorting to asking for help from family. My wife has an aunt who had been living in the US for quite a while, so we figured it was worth a shot to ask and see if she would buy me a couple of programming books. So on one of my internet excursions, I wrote an email to her explaining my situation, hit send, and basically crossed my fingers and prayed to every deity out there that she would help us. After a couple of days, I had a new email in my inbox. It was her answer, straight to the point: “Tell me which books you need and I’ll order them from Amazon.” After doing some research, I ended up asking for the Flash MX Bible and the PHP 5 and MySQL Bible.</p> <p>Those two books proved incredibly helpful in the weeks to come. They were both so thorough that I was able to make steady progress without needing to constantly visit the internet cafe in search of missing information. I could finally make headway on understanding what I needed to know to build my maps application. And finally, with access to the information I needed, it was time to sit down in front of my computer and get to work.</p> <p> </p> <p>At the end of 2006, I arrived at a crossroads in my life. My hopes of becoming a secondary school linguistics teacher had vanished in an instant, as several factors had come together and made it impossible for me to continue with my studies.</p> <p>Back in my hometown of Durazno, Uruguay, my wife was working long hours for a meager $160 (USD) a month. Yes, that’s $1,920 a year. We had sacrificed our time together so I could become a teacher and get a better job because we were dreaming of a better future.</p> <p>The problem with dreams is they tend to vanish when you wake up, and life’s alarm clock had just gone off.</p> <p>Because my career trajectory had suddenly strayed off course, I moved back to my hometown to figure out my next steps. Needless to say, I was depressed at the way things were, and our living situation only made things worse. It was good to be back with my wife, but the reasons for it were stressful.</p> <p>Additionally, we were sharing a house with my wife’s aunt, so our privacy was restricted to our bedroom, and we always felt like we were overstaying our welcome.</p> <p>As a way to bring in extra income, we tried to sell homemade pasta on the streets. I would go door-to-door collecting orders for the weekend. “Hello, do you want to order ravioli to eat this Sunday?” I’d ask person after person. “Yes, they’re homemade. Just give us a time and we’ll deliver them.”</p> <p>Then, after people ordered them, we spent our entire weekends making 2,000 ravioli only to end up with 500 pesos in our pockets, which comes about $20, not counting expenses.</p> <p>The whole situation was disheartening, and it made us feel hopeless. My wife would work hard all week, then come home only to spend her weekends helping me prepare the ravioli. She couldn’t even have one day of the weekend for herself. She begged me to stop selling ravioli, even if that meant we would end up with less money to pay our bills. Eventually I agreed, but it meant I had to try to find a job — and finding a job wasn’t so easy in our rural hometown. Anxiety and desperation were starting to set in.</p> <p>One night, I was talking with a friend who was studying computer engineering at the university in Montevideo. He told me about the various job opportunities one could find in the capital city, with salaries that were the stuff of dreams for someone living in the countryside. “There’s this big company in Montevideo, Live Interactive,” he told me. “They’re always looking for programmers; maybe you could try to get a job there. They pay really well.”</p> <p>The salary he mentioned was around three times what we were making at the time, and I couldn’t help but imagine all the things we could do with that much money. We wouldn’t need to worry anymore about putting food on the table. We could finally pay for our own internet connection, get proper clothes and shoes, and even have our own washing machine!</p> <p>Not only that, but I already had experience with computers. I always liked working with them, mostly because they appealed to my knack for problem solving. Programming reminded me of having to crack a code or find the solution to a difficult puzzle — but in addition to being challenging, it was fun. What’s more is that I saw programming as a career with a lot of potential for growth.</p> <p>But there was one small problem: to work as a computer programmer, one usually needs to know how to program computers. Me? I could install Linux on my own, but that was probably the extent of it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? How do you learn to program without internet access at home, without mentors to connect with, and without access to programming books? That was my problem back in 2006, and this is the story of how I tackled it.</p> <p>The Early Days</p> <p>I’ve been dabbling with computers since I was a teenager — most of the time when visiting a friend who had a PC. While we often used the computer to play games, I wasn’t interested in playing that much. Why? Back when I started secondary school, a friend’s father let us use his ZX Spectrum computer. He had good stack of cassettes with plenty of games for it, and of course, we could play all we wanted, but one day he showed me something that blew my mind: people could make their own games by programming the computer!</p> <p>He showed me some tricks in BASIC, like how you could generate random numbers using the RAND function. I was amazed. At that point, I realized computers were more than a glorified Nintendo with a keyboard: you could actually tell them to do things for you — cool things, like drawing lines using trigonometric functions and then painting them by applying random colors! You could even make music with them by passing different frequencies to BEEP. In fact, once I brought the Spectrum to my house and spent an entire afternoon playing different kinds of beep sounds on my TV — I’m sure my mom loved it.</p> <p>How do you land a job as a computer programmer when you have almost no programming experience and you lack a university degree to prove your knowledge? Later on, during my teenage years, I continued spending time with friends who had their own computers, and naturally we played games on them. Meanwhile, with my more tech-savvy friends, I learned a few operating system tricks — mostly MS-DOS.</p> <p>Every once in awhile, we would try some BASIC programming by copying, character by character, the code snippets that appeared in old computer magazines. To us, they seemed like magic spells or technological incantations. One thing we really liked was trying to edit the text messages a game would show for different situations. We thought we were such hackers!</p> <p>By the early 2000s, I managed to convince my grandfather to buy me a computer: a Pentium MMX with 32MB of RAM! What a machine! I installed Linux on it for the first time, using a SUSE CD that came for free with an Argentinean computer magazine. I spent quite a lot of time on that computer: trying different Linux distributions, getting familiarized with the command line, and so on, but never really doing any programming.</p> <p>When I look back to those days, I can’t understand why I wasn’t learning C programming — or any kind of programming for that matter. A friend even offered me the bible of C programming by Kernighan and Ritchie, so not having access to a manual wasn’t an excuse. But for some reason, after reading a few examples, it didn’t spark any interest in me, as I didn’t understand how what it covered would be useful for me. In any case, playing with Linux was the only thing I was doing with computers back then.</p> <p>From that point on, I had several minor jobs, played in a rock ’n’ roll band, and tried to become a linguistics teacher, all while getting married and moving all over the country together with my wife.</p> <p>Fast forward to November 2006 and I found myself in need of somehow becoming hirable by a software company. I had to become a credible computer programmer.</p> <p>Time for Some Goals</p> <p>If I wanted to get hired, the first thing to do was evaluate my skillset as a programmer. I had to be honest with myself so I could know where to focus my efforts.</p> <p>At the time, I knew a bit of ActionScript for Flash MX and the very basics of PHP programming. Earlier that year, I had started learning those technologies as a hobby. I’d also started a pet project to learn programming, thinking maybe it could become a secondary source of income.</p> <p>I came up with the idea of making a digital map of my hometown where you could drop pins that would point the user to the location of businesses, shops, and interesting locations. I would then charge those businesses money in exchange for appearing in my online map application.</p> <p>Of course I know what you’re thinking. “That’s just Google Maps,” you say. Yes, but back in 2006, the only thing Google Maps knew about my hometown was that it was crossed by a big national highway. Given that, my map seemed like a good idea. Also, I figured this project would be the perfect way to showcase my skills to a prospective employer. I had a clear goal of what I wanted to build; I just had to get down to work and make it happen.</p> <p>So at the end of 2006, I set myself a deadline: come February 2007, I had to have a working concept of the map application. This had to include a Flash frontend, served by a PHP backend, using MySQL for data persistence. The technologies I’ve just mentioned might not seem too relevant today, but the point here is that I had to nail down every detail of my plan so I would know which problems to tackle first, since time was ticking: every day that went by was another day where my wife was overloaded, working overtime to get food on our table.</p> <p>Additionally, to even have a shot at getting a programming job, I had to show potential employers that I could program in those particular technologies, because that was part of the job description. Naturally, I had nothing related to these skills on my resume, so I had to build up my knowledge from scratch, and my app would serve as the showcase of my programming expertise.</p> <p>The plan was to land an interview at the company my friend had mentioned before, and hopefully, with the combination of my skills and my app, I would end up getting a job there. Even then, I knew the importance of setting clear goals for yourself in order to achieve what you want.</p> <p>Learning project: a Map Application</p> <p>The map application I created was called Aleph Maps — a reference to Jorge Luis Borges’ 1949 story, “El Aleph,” about a place in the universe where everything — past, present, and future — is contained. Not ambitious at all, right? And to bring the idea into existence, I would have to learn how to program web apps.</p> <p>Having no internet at home is a real challenge for a future web developer. When I started, ADSL broadband adoption was almost nonexistent, limited only to businesses and maybe wealthy households. For the average family, connecting to the internet meant dialing in on a modem connection and paying high prices for a slow internet experience. I couldn’t afford that, which meant I had to go and bother friends every time I needed to access some online tutorial that explained how to program in PHP.</p> <p>So even though I had a computer and the will to learn, I still didn’t have easy or regular access to the information on how to do it. But I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions.</p> <p>Meanwhile, due to the lack of internet access around town, cyber cafes started popping up in the city, charging around half a dollar for one hour of surfing. This struck me as a better solution than constantly bothering my friends. But this also meant finding an extra 50 cents and a couple of floppy disks in order to get to a cyber cafe, find the information I wanted, copy it onto one of those diskettes, and get it home onto my computer. More often than not, data got corrupted in the process of extracting it from the floppy disks.</p> <p>Imagine how angry and frustrated I was: I had made a trip to a cyber cafe and wasted 50 cents for nothing. Half a dollar! This might not sound like much, but at that time where we lived, you could buy a burger or a bottle of beer for a dollar. For us, it was a lot of money: it meant our daily bottle of milk or a loaf of bread.</p> <p>During those days, my routine consisted of trying to solve problem A to get to point B. Sometimes the tasks were rather easy and I felt like I was making quick progress. Other days, it felt like I was going nowhere. For example, say I had to implement a feature like “insert new data into the database.” This meant writing down all the obstacles I had to solve to achieve that — from how to write an SQL INSERT statement to how to execute it using PHP — and then integrating everything into the app.</p> <p>Each of these tasks was an item on my daily “shopping list” for when I went to the internet cafe. I would take a couple of floppy disks with me, and then I would google for blog posts, tutorials, and guides that would help me solve the items on my list. Once that was complete, it was time to save them on my diskettes and head home, all the while hoping the data had successfully saved and would be easily accessed on my computer.</p> <p>Because of the uncertainty involved, the bicycle trip back would be fueled by the worst anxiety ever. “What if the data isn’t there at all?” I wondered. “What if the bike shakes too much and the data gets corrupted? I really don’t have another dollar to spare until tomorrow, so this better work when I get home.”</p> <p>I was determined to get that job, and I knew that even these setbacks wouldn’t deter me from learning PHP. When you don’t have time to waste, you don’t have time to feel desperate; instead, you have to focus on finding solutions. Suffice to say, this wasn’t practical at all. Once I was back home, I’d use the information I’d brought back to help me accomplish the task in progress, but once it was complete, I lacked the knowledge to perform the next step. This means I was left sitting at home, thinking about a problem, and waiting until the next day, when I could squeeze another 50 cents out of our budget to go to the cafe and repeat this routine. Though at the time it seemed like my only option, eventually I had to admit to myself that it was time for a new strategy. I needed something that contained most of the information on how to write a web application with PHP and Flash MX, with guides explaining how to perform the most trivial of tasks, all in one single place. Not the internet, but books!</p> <p>It seems like such a no-brainer, but for someone in my situation, the kinds of books I needed weren’t necessarily in reach. The problem is that when you’re part of a marginalized sector of society, accessing books isn’t so easy. The closest thing to a programming book you could find at the public library would be some outdated manual on how to repair a computer — maybe some dusty MS-DOS guide, or perhaps a BASIC or Delphi book if you got lucky — but not much more.</p> <p>Well, at least one could buy books, right? Not really.</p> <p>In most towns in Uruguay’s countryside, technical books are usually absent from the bookstore shelves, and my town was no exception. Add to the problem the fact that most of the tech books — particularly those talking about cutting-edge technology — are written in English, and you can just forget about the local bookstore. In the end, this left me with only one option: Amazon.</p> <p>But it wasn’t that easy either. To buy books on Amazon, you need a little piece of plastic called a credit card, but to get access to a credit card, you need a good credit history — which for most people is not a problem. In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan.</p> <p>For us, it worked like this: if we wanted to buy something more expensive than our monthly income, we either saved month after month until we got enough money to buy what we wanted, or we asked some family member to buy the product for us and worked to pay them back later.</p> <p>And even if we’d had the option of buying books on Amazon, we hadn’t factored in the fact that shipping alone from the United States to Uruguay was nearly the cost of the book, not to mention it would take a month for it to arrive.</p> <p>In my case, though, I was living in a completely different world: everything we bought was paid for in cash. We didn’t have the money or the economical certainty to enter into a credit plan Sometimes the solution to these kinds of problems is closer to home than we think. Eventually, we ended up resorting to asking for help from family. My wife has an aunt who had been living in the US for quite a while, so we figured it was worth a shot to ask and see if she would buy me a couple of programming books. So on one of my internet excursions, I wrote an email to her explaining my situation, hit send, and basically crossed my fingers and prayed to every deity out there that she would help us. After a couple of days, I had a new email in my inbox. It was her answer, straight to the point: “Tell me which books you need and I’ll order them from Amazon.” After doing some research, I ended up asking for the Flash MX Bible and the PHP 5 and MySQL Bible.</p> <p>Those two books proved incredibly helpful in the weeks to come. They were both so thorough that I was able to make steady progress without needing to constantly visit the internet cafe in search of missing information. I could finally make headway on understanding what I needed to know to build my maps application. And finally, with access to the information I needed, it was time to sit down in front of my computer and get to work.</p>]]></content:encoded>
			<enclosure length="16312865" type="audio/mpeg" url="https://traffic.libsyn.com/secure/freecodecamp/Episode_1_-_How_I_went_from_Selling_Food_in_the_Street_to_Working_as_a_Developer_at_Companies_Like_Apple_Part_1_-_Learning_to_Code.mp3?dest-id=603849" />
			<itunes:duration>16:56</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies....]]></itunes:subtitle>
			<itunes:summary>In this episode, Quincy tells the story of Alvaro Videla, who was living in poverty in Uruguay when he decided he wanted to learn to code. He had limited access to books and the internet. But he eventually got a job at Apple and other tech companies.</itunes:summary>
			<itunes:episode>1</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>freeCodeCamp</itunes:author>
					</item>
	</channel>
</rss>
